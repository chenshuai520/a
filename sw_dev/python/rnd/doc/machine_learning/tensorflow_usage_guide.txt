[-] General.
	- Site.
		https://www.tensorflow.org/

		https://www.tensorflow.org/api_guides/
		https://www.tensorflow.org/api_guides/python/

[-] Usage.
	- TensorBoard.
		Run.
			tensorboard --logdir=/path/to/log-directory
		Open a web browser.
			http://localhost:6006/

	- Preprocessing.
		https://www.tensorflow.org/api_guides/python/image
		http://tensorlayer.readthedocs.io/

	- Check devices.
		from tensorflow.python.client import device_lib
		print(device_lib.list_local_devices())

	- NVIDIA driver version.
		cat /proc/driver/nvidia/version
	- CUDA version.
		nvcc --version

[-] Installation.
	- Windows.
		TensorFlow supports only 64-bit Python 3.5 on Windows.

	- Build and install from sources.
		https://www.tensorflow.org/install/install_sources
		https://bazel.build/versions/master/docs/install-ubuntu.html

	- Install from wheel files (old versions).
		https://www.tensorflow.org/versions/
		https://www.tensorflow.org/versions/r1.0/install/install_windows
		https://www.tensorflow.org/versions/r0.12/get_started/os_setup

		pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-1.0.1-cp35-cp35m-win_amd64.whl
		pip install --upgrade https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-0.12.1-cp27-none-linux_x86_64.whl
		pip install --upgrade https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-0.12.1-cp35-cp35m-win_amd64.whl

[-] Model.
	REF [site] >> https://github.com/tensorflow/models
	REF [site] >> https://github.com/tensorflow/models/tree/master/slim
	REF [site] >> https://github.com/tensorflow/models/tree/master/slim/nets

	- ResNet.
		REF [site] >> https://github.com/tensorflow/models/tree/master/resnet
		REF [site] >> https://github.com/tensorflow/models/tree/master/slim/nets

		Download CIFAR-10/CIFAR-100 datasets.
			wget https://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz
			wget https://www.cs.toronto.edu/~kriz/cifar-100-binary.tar.gz
		Uncompress datasets.
			tar xvf cifar-10-binary.tar.gz
			tar xvf cifar-100-binary.tar.gz
		(Optional) modify files.
			To use w28-10 wide residual network:
				In ${TENSORFLOW_MODELS_HOME}/resnet/resnet_model.py:
					Uncomment 'filters = [16, 160, 320, 640]' in line 87.
				In ${TENSORFLOW_MODELS_HOME}/resnet/resnet_main.py:
                	<before>
                	num_residual_units=5, (line 197)
                	<after>
                	num_residual_units=4, (?)
		Build.
			REF [doc] >> bazel_usage_guide.txt
			GPU:
				bazel build -c opt --config=cuda resnet/...
		Train model.
			Unix:
				bazel-bin/resnet/resnet_main --train_data_path=${CIFAR10_DATASET_HOME}/data_batch* --log_root=./resnet_model_cifar10 --train_dir=./resnet_model_cifar10/train --dataset='cifar10' --num_gpus=1
				bazel-bin/resnet/resnet_main --train_data_path=${CIFAR100_DATASET_HOME}/train.bin --log_root=./resnet_model_cifar100 --train_dir=./resnet_model_cifar100/train --dataset='cifar100' --num_gpus=1
			Windows:
	            python bazel-bin/resnet/resnet_main --train_data_path=${CIFAR10_DATASET_HOME}/data_batch* --log_root=./resnet_model_cifar10 --train_dir=./resnet_model_cifar10/train --dataset=cifar10 --num_gpus=1
					==> Not --dataset='cifar10' but --dataset=cifar10.
	            python bazel-bin/resnet/resnet_main --train_data_path=${CIFAR100_DATASET_HOME}/train.bin --log_root=./resnet_model_cifar100 --train_dir=./resnet_model_cifar100/train --dataset=cifar100 --num_gpus=1
					==> Not --dataset='cifar100' but --dataset=cifar100.
		(Optional) check on its progress using tensorboard.
            tensorboard --logdir=/tmp/resnet_model
        Evaluate the model.
			Unix:
	        	bazel-bin/resnet/resnet_main --eval_data_path=${CIFAR10_DATASET_HOME}/test_batch.bin --log_root=./resnet_model_cifar10 --eval_dir=./resnet_model_cifar10/test --mode=eval --dataset='cifar10' --num_gpus=0
	        	bazel-bin/resnet/resnet_main --eval_data_path=${CIFAR100_DATASET_HOME}/test.bin --log_root=./resnet_model_cifar100 --eval_dir=./resnet_model_cifar100/test --mode=eval --dataset='cifar100' --num_gpus=0
			Windows:
        		python bazel-bin/resnet/resnet_main --eval_data_path=${CIFAR10_DATASET_HOME}/test_batch.bin --log_root=./resnet_model_cifar10 --eval_dir=./resnet_model_cifar10/test --mode=eval --dataset=cifar10 --num_gpus=0
	        	python bazel-bin/resnet/resnet_main --eval_data_path=${CIFAR100_DATASET_HOME}/test.bin --log_root=./resnet_model_cifar100 --eval_dir=./resnet_model_cifar100/test --mode=eval --dataset=cifar100 --num_gpus=0

[-] Android.
	- Reference.
		https://www.tensorflow.org/mobile/
		https://www.tensorflow.org/mobile/android_build

	- TensorFlow Android demo.
		${TENSORFLOW_HOME}/tensorflow/examples/android
		https://www.tensorflow.org/mobile/android_build#build_the_demo_using_android_studio
		https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/android

		Open an existing demo project in Android Studio.
			${TENSORFLOW_HOME}/tensorflow/examples/android
		Edit the build.gradle file.
			${TENSORFLOW_HOME}/tensorflow/examples/android/build.gradle
		Build the project.

		In the process of building, the latest stable version of TensorFlow is automatically downloaded as an AAR by Gradle.
			tensorflow-android-1.10.0.aar
			==> Need TensorFlow JNI for native libraries. (?)

	- Add TensorFlow to my app using Android Studio.
		REF [site] >> https://www.tensorflow.org/mobile/android_build#adding_tensorflow_to_your_apps_using_android_studio

		==> <error> This procedure does not work.

	- TensorFlow Lite.
		${TENSORFLOW_HOME}/tensorflow/contrib/lite
		${TENSORFLOW_HOME}/tensorflow/contrib/lite/toco
		${TENSORFLOW_HOME}/tensorflow/contrib/lite/java/demo
		https://www.tensorflow.org/mobile/tflite/
		https://www.tensorflow.org/mobile/tflite/demo_android
		https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/java/demo/README.md
		https://heartbeat.fritz.ai/intro-to-machine-learning-on-android-how-to-convert-a-custom-model-to-tensorflow-lite-e07d2d9d50e3
		https://medium.com/tensorflow/using-tensorflow-lite-on-android-9bbc9cb7d69d

		Convert a model to tflite:
			${TENSORFLOW_HOME}/tensorflow/contrib/lite/python/tflite_convert.py
			${TENSORFLOW_HOME}/tensorflow/contrib/lite/python/lite.py
			https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/toco/g3doc/cmdline_examples.md
			https://medium.com/tensorflow/using-tensorflow-lite-on-android-9bbc9cb7d69d
			https://heartbeat.fritz.ai/intro-to-machine-learning-on-android-how-to-convert-a-custom-model-to-tensorflow-lite-e07d2d9d50e3

	- TensorFlow Android Inference Interface.
		${TENSORFLOW_HOME}/tensorflow/contrib/android/java/org/tensorflow/contrib/android/TensorFlowInferenceInterface.java
		https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/android
		https://medium.com/capital-one-developers/using-a-pre-trained-tensorflow-model-on-android-e747831a3d6

	- Download TensorFlow Android. (???)
		By Gradle:
			repositories {
				maven {
					url 'https://google.bintray.com/tensorflow'
				}
			}
			In build.gradle (Project):
				dependencies {
					implementation 'org.tensorflow:tensorflow-android:+'
				}
			In build.gradle (Module):
				dependencies {
					implementation 'org.tensorflow:tensorflow-lite:0.0.0-nightly'
				}
			=> The latest stable version of TensorFlow can be downloaded as in 'TensorFlow Android demo'.
		By Maven:
			<repositories>
				<repository>
					<id>tensorflow</id>
					<url>https://google.bintray.com/tensorflow/</url>
				</repository>
			</repositories>

			<dependencies>
				<dependency>
					<groupId>org.tensorflow</groupId>
					<artifactId>tensorflow-android</artifactId>
					<version>1.10.0</version>
					<type>pom</type>
				</dependency>
				<dependency>
					<groupId>org.tensorflow</groupId>
					<artifactId>tensorflow-lite</artifactId>
					<version>1.10.0</version>
					<type>pom</type>
				</dependency>

				<dependency>
					<groupId>org.tensorflow</groupId>
					<artifactId>libtensorflow</artifactId>
					<version>1.10.0</version>
					<type>pom</type>
				</dependency>
				<dependency>
					<groupId>org.tensorflow</groupId>
					<artifactId>libtensorflow_jni</artifactId>
					<version>1.10.0</version>
					<type>pom</type>
				</dependency>
				<dependency>
					<groupId>org.tensorflow</groupId>
					<artifactId>libtensorflow_jni_gpu</artifactId>
					<version>1.10.0</version>
					<type>pom</type>
				</dependency>
			</dependencies>
