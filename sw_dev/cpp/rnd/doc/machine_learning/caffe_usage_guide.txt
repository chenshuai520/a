[-] General.
	- Site.
		http://caffe.berkeleyvision.org/
		https://github.com/BVLC/caffe

		https://github.com/BVLC/caffe/wiki

		http://caffe.berkeleyvision.org/tutorial/
		http://caffe.berkeleyvision.org/tutorial/solver.html
		https://github.com/BVLC/caffe/tree/master/docs/tutorial

		http://caffe.berkeleyvision.org/doxygen/

	- Example.
		http://caffe.berkeleyvision.org/gathered/examples/mnist.html
		http://caffe.berkeleyvision.org/gathered/examples/cifar10.html
		http://caffe.berkeleyvision.org/gathered/examples/finetune_flickr_style.html
		http://caffe.berkeleyvision.org/gathered/examples/feature_extraction.html

[-] Linking (Windows).
	- Link two libraries.
		caffe.lib
		proto.lib

[-] Installation.
	REF [site] >> http://caffe.berkeleyvision.org/installation.html

	- PyCaffe.
		Support Python 2 or 3.

		Set PYTHONPATH to ${CAFFE_HOME}/python.
			export PYTHONPATH=${CAFFE_HOME}/python:$PYTHONPATH
			set PYTHONPATH=${CAFFE_HOME}/python:%PYTHONPATH%
			==> Do not import the module in the ${CAFFE_HOME}/python/caffe directory.
		Change directory.
			cd ${CAFFE_HOME}/python
		Install the packages.
			pip install -r requirements.txt
		Run a Python interpreter.
			python -c "import caffe"

[-] Deployment.
	REF [site] >> https://github.com/BVLC/caffe/wiki/Using-a-Trained-Network:-Deploy

	- Prediction.
		REF [file] >> ${SWDT_C++_HOME}/rnd/test/machine_learning/caffe/caffe_classification_example.cpp

		A network is defined by its design (.prototxt), and its weights (.caffemodel).
		As a network is being trained, the current state of that network's weights are stored in a .caffemodel.

[-] Example.
	- Protobuf definitions used by Caffe.
		${CAFFE_HOME}/src/caffe/proto/caffe.proto

	- MNIST.
		REF [site] >> http://caffe.berkeleyvision.org/gathered/examples/mnist.html
		REF [directory] >> ${CAFFE_HOME}/examples/mnist

		Download dataset.
			${CAFFE_HOME}/data/mnist/get_mnist.sh
			${CAFFE_HOME}/examples/mnist/create_mnist.sh
				<option>
					EXAMPLE=examples/mnist
					DATA=data/mnist
					BUILD=build/examples/mnist
					BACKEND="lmdb"
				<database>
					${CAFFE_HOME}/examples/mnist/mnist_train_lmdb
					${CAFFE_HOME}/examples/mnist/mnist_test_lmdb
		Define a model.
			${CAFFE_HOME}/examples/mnist/lenet_train_test.prototxt
			${CAFFE_HOME}/examples/mnist/lenet.prototxt
		Define a solver,
			${CAFFE_HOME}/examples/mnist/lenet_solver.prototxt
			${CAFFE_HOME}/examples/mnist/lenet_multistep_solver.prototxt
		Train and test the model.
			${CAFFE_HOME}/examples/mnist/train_lenet.sh
			${CAFFE_HOME}/build/tools/caffe train --solver=examples/mnist/lenet_solver.prototxt

	- CIFAR-10.
		REF [site] >> http://caffe.berkeleyvision.org/gathered/examples/cifar10.html
		REF [directory] >> ${CAFFE_HOME}/examples/cifar10

		Download dataset.
			${CAFFE_HOME}/data/cifar10/get_cifar10.sh
			${CAFFE_HOME}/examples/cifar10/create_cifar10.sh
				<option>
					EXAMPLE=examples/cifar10
					DATA=data/cifar10
					DBTYPE=lmdb
				<database>
					${CAFFE_HOME}/examples/cifar10/cifar10_train_lmdb
					${CAFFE_HOME}/examples/cifar10/cifar10_test_lmdb
				<image mean>
					${CAFFE_HOME}/examples/cifar10/mean.binaryproto
		Define a model.
			${CAFFE_HOME}/examples/cifar10/cifar10_quick_train_test.prototxt
		Define a solver,
			${CAFFE_HOME}/examples/cifar10/cifar10_quick_solver.prototxt
		Train and test a quick model.
			${CAFFE_HOME}/examples/cifar10/train_quick.sh
			${CAFFE_HOME}/build/tools/caffe train --solver=examples/cifar10/cifar10_quick_solver.prototxt

	- ImageNet.
		REF [site] >> http://caffe.berkeleyvision.org/gathered/examples/imagenet.html
		REF [directory] >> ${CAFFE_HOME}/examples/imagenet

		NOTICE [caution] >> The Caffe build directory should be ${CAFFE_HOME}/build.

		Download ImageNet dataset.
		Download auxiliary data for training.
			${CAFFE_HOME}/data/ilsvrc12/get_ilsvrc_aux.sh
		Create ImageNet database.
			${CAFFE_HOME}/examples/imagenet/create_imagenet.sh
				<option>
					TRAIN_DATA_ROOT=${IMAGENET_DATASET_DIR}/Data/CLS-LOC/train/
					VAL_DATA_ROOT=${IMAGENET_DATASET_DIR}/Data/CLS-LOC/val/
					RESIZE=true
					EXAMPLE=examples/imagenet
					DATA=data/ilsvrc12
					TOOLS=build/tools
				<database>
					${CAFFE_HOME}/examples/imagenet/ilsvrc12_train_lmdb
					${CAFFE_HOME}/examples/imagenet/ilsvrc12_test_lmdb
			NOTICE [caution] >> ${CAFFE_HOME}/examples/imagenet/ilsvrc12_train_lmdb and ${CAFFE_HOME}/examples/imagenet/ilsvrc12_val_lmdb should not exist before this execution.
		Compute image mean.
			${CAFFE_HOME}/examples/imagenet/make_imagenet_mean.sh
		Define a model.
			${CAFFE_HOME}/models/bvlc_reference_caffenet/train_val.prototxt
		Define a solver,
			${CAFFE_HOME}/models/bvlc_reference_caffenet/solver.prototxt
		Train the model.
			${CAFFE_HOME}/examples/imagenet/train_caffenet.sh
			${CAFFE_HOME}/build/tools/caffe train --solver=models/bvlc_reference_caffenet/solver.prototxt
		Resume training.
			${CAFFE_HOME}/examples/imagenet/resume_training.sh
			${CAFFE_HOME}/build/tools/caffe train --solver=models/bvlc_reference_caffenet/solver.prototxt --snapshot=models/bvlc_reference_caffenet/caffenet_train_iter_10000.solverstate

	- Model.
		AlexNet:
			${CAFFE_HOME}/models/bvlc_alexnet
		GoogLeNet:
			${CAFFE_HOME}/models/bvlc_googlenet
		CaffeNet:
			${CAFFE_HOME}/models/bvlc_reference_caffenet
		R-CNN:
			${CAFFE_HOME}/models/bvlc_reference_rcnn_ilsvrc13

	- Convert image/label datasets to database.
		REF [file] >> ${CAFFE_HOME}/examples/mnist/convert_mnist_data.cpp
		REF [file] >> ${CAFFE_HOME}/examples/cifar10/convert_cifar_data.cpp
		REF [file] >> ${CAFFE_HOME}/tools/convert_imageset.cpp

[-] Building (CMake, Windows).
	NOTICE [info] >> Fail to be built in VC.

	- The name of a build directory for CMake should be "build".
		The existing scripts in Caffe assume its build directory is "build".

	- Configure & generate.
		Set CMAKE_DEBUG_POSTFIX to d.
		Set USE_CUDNN to true.
		Set USE_NCCL to true.
		Set USE_OPENCV to true.
		Set USE_LEVELDB to true.
		Set USE_LMDB to true.

		Set BUILD_python to false.
		Set BUILD_python_layer to false.
		Set BUILD_SHARED_LIBS to false (for Windows).
			Build static libraries in Windows.
	- Build.
	- Install.

[-] Building (Ubuntu).
	- Make.
		mkdir build
		cd build

		Install protobuf.
			conda install protobuf

		Install dateutil.
			conda install dateutil
			pip install python-dateutil

		cmake ..
			In order to edit the configuration of CMake, use cmake-gui.
			Use GCC ver 6, CUDA 9.x, and Python 3.
			Use protobuf and HDF5 in Python virual environment.

		make -j8 all
			pycaffe is built too.
		make -j8 runtest
		make install

		make pycaffe (?)
		make distribute (?)

		Set LD_LIBRARY_PATH to libcaffe.so.
			export LD_LIBRARY_PATH+=${CAFFE_HOME}/build/install/lib
		sudo ldconfig (?)

[-] Troubleshooting.
	- PyCaffe import error.
		<error>
			ImportError: dynamic module does not define module export function (PyInit__caffe)
		<solution>
			Set PYTHONPATH to ${CAFFE_HOME}/python.
			'python2-numpy' has to be installed from 'apt-get' rather than from 'pip2'. (?)
			'_caffe.so' exists in the '${CAFFE_HOME}/python/caffe' folder.
	- CUDA architecture error.
		<error>
			nvcc fatal : Unsupported gpu architecture 'compute_21'
		<solution>
			Set CUDA_ARCH_NAME to Kepler, Maxwell, or Pascal. (?)
			CUDA architecture:
				Fermi -> Kepler -> Maxwell -> Pascal -> Volta.
	- CMake dependency error.
		<error>
			CMake Error at CMakeLists.txt:107 (add_dependencies):
				The dependency target "pycaffe" of target "pytest" does not exist.
		<solution>
			Move the following sentences from ${CAFFE_HOME}/CMakeLists.txt to ${CAFFE_HOME}/python/CMakeLists.txt.
				# ---[ pytest target
				if(BUILD_python)
					add_custom_target(pytest COMMAND python${python_version} -m unittest discover -s caffe/test WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/python )
					add_dependencies(pytest pycaffe)
				endif()
	- CMake regexp error.
		<error>
			CMake Error at cmake/Dependencies.cmake:156 (STRING):
				STRING sub-command REGEX, mode REPLACE needs at least 6 arguments total to command.
		<solution>
			Fix ${CAFFE_HOME}/cmake/Dependencies.cmke.
			<before>
				STRING( REGEX REPLACE "[^0-9]" "" boost_py_version ${version} )
			<after>
				STRING( REGEX REPLACE "[^0-9]" "" boost_py_version "${version}" )
