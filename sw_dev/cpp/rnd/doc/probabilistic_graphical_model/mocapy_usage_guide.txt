[-] General.
	- Site.
		http://sourceforge.net/projects/mocapy/
		http://www.biomedcentral.com/1471-2105/11/126

[-] Building (CMake, Windows).
	- Set CMake.
		uint type를 찾을 수 없다는 오류 발생.
			==> CMake GUI 환경에서 아래의 값을 설정.
				CMAKE_CXX_FLAGS -> -Duint=uint8_t
				CMAKE_C_FLAGS -> -Duint=uint8_t
			==> ${MOCAPY_HOME}/src/utils/utils.h file에 macro로 정의되어 있음.
				<before>
				#define uint unsigned int
				<after>
				#if !defined(uint)
				#define uint unsigned int
				#endif
		srandom function을 찾을 수 없다는 오류 발생.
			==> ${MOCAPY_HOME}/src/utils/random_data.cpp file에 존재.
				<before>
				srandom(seed);
				<after>
				std::srand(seed);
		Static library를 build하는 경우 Mocapy library는 생성되지만, example 생성 시 오류 발생.
			example과 관련된 shared library를 생성하는 과정에 오류 발생.
		Shared library build 설정이 주석으로 되어 있음.
				${MOCAPY_HOME}/src/CMakeLists.txt
			==> 위 file에서 add_library를 검색하면 확인 가능.
				add_library (Mocapy SHARED ...
			==> static library build 설정을 주석으로 처리하고, shared library build 설정을 주석 해제.
			==> MinGW, MSYS, & Cygwin에서는 shared library를 생성하는데 실패.
				이들 환경 모두 shared library를 생성하기 위해 gcc 대신 dlltool & dllwrap을 사용.
				REF [file] >> D:\work_center\sw_dev\cpp\CMake_usage_guide.txt
				REF [file] >> D:\work_center\sw_dev\cpp\basic\test\simple_make_test\Makefile_shared
		Shared library building 시에 external library 관련 linking 오류 발생.
			필요한 external library.
				Boost.Serialization / Boost.Thread / Boost.Program_Options
				LAPACK / BLAS
				Pthread
			==> CMake GUI에서 아래의 두 항목에 external library에 대한 linking 추가.
				for MinGW & MSYS
					CMAKE_CXX_STANDARD_LIBRARIES -> -L/d/MyProgramFiles/MinGW/lib -lboost_program_options-mgw46-mt-1_48.dll -lboost_serialization-mgw46-mt-1_48.dll -lboost_thread-mgw46-mt-1_48.dll -llapack.dll -lblas.dll -lpthread.dll
					CMAKE_C_STANDARD_LIBRARIES -> -L/d/MyProgramFiles/MinGW/lib -lboost_program_options-mgw46-mt-1_48.dll -lboost_serialization-mgw46-mt-1_48.dll -lboost_thread-mgw46-mt-1_48.dll -llapack.dll -lblas.dll -lpthread.dll
				for Cygwin
					CMAKE_CXX_STANDARD_LIBRARIES -> -L/usr/lib -lboost_program_options-mt.dll -lboost_serialization-mt.dll -lboost_thread-mt.dll -lboost_system-mt.dll -llapack.dll -lblas.dll -lpthread
					CMAKE_C_STANDARD_LIBRARIES -> -L/usr/lib -lboost_program_options-mt.dll -lboost_serialization-mt.dll -lboost_thread-mt.dll -lboost_system-mt.dll -llapack.dll -lblas.dll -lpthread
			==> CMAKE_SHARED_LINKER_FLAGS 항목에 설정하면 동일한 오류가 발생.
				CMake에 의해 생성된 linking option에서 option 위치가 부적절하여 정상적으로 linking되지 않음.
			==> CMake GUI로부터 생성된 library linking option 관련 정보는 아래의 파일에 저장됨.
				${MOCAPY_HOME}/build_mingw/src/CMakeFiles/Mocapy.dir/link.txt
		Release & debug build mode 설정.
			CMakeLists.txt file에 아래와 같이 설정되어 있음.
				SET(BUILD_RELEASE ON)
				SET(BUILD_DEBUG OFF)
				SET(BUILD_PROFILE OFF)
				SET(BUILD_DUMMYRANDOM OFF)
			REF [file] >> ${MINGW_HOME}/src/CMakeLists.txt
			REF [file] >> ${MINGW_HOME}/examples/CMakeLists.txt

[-] Building (MinGW & MSYS).
	- (중요)
		Mocapy library의 API들에 '__declspec(dllexport)'이 선언되어 있지 않아 symbol이 export되지 않음.
		따라서, MinGW & MSYS에서 생성된 shared library를 실제 사용할 수 없음.
	
	- Build external libraries.
		External library들을 MinGW 환경에서 building.
			boost, lapack, pthread
			==> boost는 shared library를 사용해야 정상적으로 building. (?)
				MinGW directory에 있는 header & library를 사용해야 함.
				${MINGW_HOME}/include
				${MINGW_HOME}/lib
			==> CMake GUI에서 BOOST_LIBRARYDIR을 설정해야 함.
				${MINGW_HOME}/lib
			==> multi-threaded & shared library version의 Boost library를 사용하고자 한다면.
				아래의 CMakeList.txt file에서 
					${MINGW_HOME}/src/CMakeLists.txt
					${MINGW_HOME}/examples/CMakeLists.txt
					${MINGW_HOME}/tests/CMakeLists.txt
				Boost library 설정을 아래와 같이 설정해야 함.
					SET(Boost_USE_MULTITHREADED ON)
					SET(Boost_USE_STATIC_LIBS OFF)
	
	- Set build environment (MinGW).
		MSYS or Cygwin을 사용하지 않고 Windows command prompt에서 building 가능.
			==> CMake GUI에서 CMAKE_SH 항목을 cmd.exe로 설정 가능. (?)
			==> Windows command prompt에서 ${MINGW_HOME}/bin을 path 설정.
				set path=${MINGW_HOME}/bin;%path%
		Building을 위해서 ${MINGW_HOME}/bin 하위의 executable file을 사용.
			"mingw32-"이 없는 executable file을 사용.
				e.g.)
					mingw32-gcc.exe (X) ==> gcc.exe (O)
					mingw32-g++.exe (X) ==> g++.exe (O)
			단, make의 경우 mingw32-make.exe를 사용.
				make.exe (X) ==> mingw32-make.exe (O)
	- Set build environment (MSYS의 경우).
		MSYS shell을 이용해 building 가능.
		Building을 위해서 ${MSYS_ROOT}/bin 또는 ${MINGW_HOME}/bin 하위의 executable file을 사용.
			"mingw32-"이 없는 executable file을 사용.
				e.g.)
					mingw32-gcc.exe (X) ==> gcc.exe (O)
					mingw32-g++.exe (X) ==> g++.exe (O)
			단, make의 경우 ${MSYS_ROOT}/bin/make.exe를 사용.
	- Create makefile using CMake.
		CMake GUI 실행.
			(MinGW의 경우) Windows command prompt에서 CMake GUI 실행. (?)
		    (MSYS의 경우) Windows용 CMake GUI 실행.
		필요한 library or install prefix 등을 설정.
			install prefix는 ${MINGW_HOME}로 설정하면 아래의 directory에 file이 설치.
				${MINGW_HOME}/include
				${MINGW_HOME}/lib
		Create makefile.
		Build.
			cd ${MINGW_HOME}/build_mingw
			mingw32-make -j4
				The "-j4" is assuming that you have a 4-core CPU.
			mingw32-make install
			mingw32-make clean
	- Build examples.
		Example building 시에 Mocapy library linking 오류 발생.
			==> Mocapy library의 API들에 '__declspec(dllexport)'이 선언되어 있지 않아 symbol이 export되지 않아 발생.
		CMake가 생성하는 link.txt에서 정상적으로 Mocapy library를 linking하고 있는지 확인 필요.
			==> 아래의 linking option 필요.
				..\..\libs\libMocapy.dll.a
				e.g.)
					${MOCAPY_HOME}/build_mingw/examples/CMakeFiles/discrete_hmm_with_prior.dir/link.txt

[-] Building (Cygwin).
	- Set CMake.
		 Cygwin의 CMake를 사용해야 함.
			${CYGWIN_HOME}/bin/ccmake.exe
			${CYGWIN_HOME}/bin/cmake.exe
			==> Windows용 CMake를 사용하면 정상적으로 생성되지 않음. (확인 필요)
				Windows용 CMake을 사용하는 경우 configure 과정이 정상적으로 수행되지 않음.
		CMake Generator로서 'Unix Makefiles'를 사용.
			mkdir build_cygwin
			cd build_cygwin
			<초기 설정 시>
			ccmake.exe -G "Unix Makefiles" -D BOOST_LIBRARYDIR:PATH=/usr/lib -D CMAKE_C_STANDARD_LIBRARIES:STRING="-L/usr/lib -lboost_program_options-mt.dll -lboost_serialization-mt.dll -lboost_thread-mt.dll -llapack.dll -lblas.dll -lpthread" -D CMAKE_CXX_STANDARD_LIBRARIES:STRING="-L/usr/lib -lboost_program_options-mt.dll -lboost_serialization-mt.dll -lboost_thread-mt.dll -lboost_system-mt.dll -llapack.dll -lblas.dll -lpthread" --build ..
				or cmake.exe -i -G "Unix Makefiles" -D BOOST_LIBRARYDIR:PATH=/usr/lib -D CMAKE_C_STANDARD_LIBRARIES:STRING="-L/usr/lib -lboost_program_options-mt.dll -lboost_serialization-mt.dll -lboost_thread-mt.dll -llapack.dll -lblas.dll -lpthread" -D CMAKE_CXX_STANDARD_LIBRARIES:STRING="-L/usr/lib -lboost_program_options-mt.dll -lboost_serialization-mt.dll -lboost_thread-mt.dll -lboost_system-mt.dll -llapack.dll -lblas.dll -lpthread" --build ..
			<재설정 시>
			ccmake .. or cmake -i ..
			make -j4
				The "-j4" is assuming that you have a 4-core CPU.
			make install
		Makefile를 처음 생성할 때 아래의 오류 발생.
			<Example을>
				The C compiler "${CYGWIN_HOME}/bin/gcc.exe" is not able to compile a simple test program.
			make.exe가 올바르게 지정되지 않아서 발생.
			==> CMAKE_MAKE_PROGRAM 항목을 아래와 같이 지정.
				in ${MOCAPY_HOME}/CMakeCache.txt
					CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make.exe
		Boost library linking 관련 오류 발생.
			<Example을>
				the following boost libraries could not be found
					boost_serialization
					boost_thread
			==> Cygwin에서는 Boost library의 multi-threaded & shared library version만을 기본적으로 설치.
			==> 따라서, CMakeLists.txt file에서 multi-threaded & shared library version의 Boost library를 사용하도록 설정해야 함.
				아래의 CMakeList.txt file에서 
					${MOCAPY_HOME}/src/CMakeLists.txt
					${MOCAPY_HOME}/examples/CMakeLists.txt
					${MOCAPY_HOME}/tests/CMakeLists.txt
				Boost library 설정을 아래와 같이 설정해야 함.
					SET(Boost_USE_MULTITHREADED ON)
					SET(Boost_USE_STATIC_LIBS OFF)
			==> 필요한 경우 아래의 항목을 설정.
				BOOST_LIBRARYDIR:PATH=/usr/lib
				Boost_INCLUDE_DIR:PATH=/usr/include
				Boost_LIBRARY_DIRS:FILEPATH=/usr/lib
				Boost_PROGRAM_OPTIONS_LIBRARY:FILEPATH=/usr/lib/libboost_program_options-mt.dll.a
				Boost_PROGRAM_OPTIONS_LIBRARY_DEBUG:FILEPATH=/usr/lib/libboost_program_options-mt.dll.a
				Boost_PROGRAM_OPTIONS_LIBRARY_RELEASE:FILEPATH=/usr/lib/libboost_program_options-mt.dll.a
				Boost_SERIALIZATION_LIBRARY:FILEPATH=/usr/lib/libboost_serialization-mt.dll.a
				Boost_SERIALIZATION_LIBRARY_DEBUG:FILEPATH=/usr/lib/libboost_serialization-mt.dll.a
				Boost_SERIALIZATION_LIBRARY_RELEASE:FILEPATH=/usr/lib/libboost_serialization-mt.dll.a
				Boost_THREAD_LIBRARY:FILEPATH=/usr/lib/libboost_thread-mt.dll.a
				Boost_THREAD_LIBRARY_DEBUG:FILEPATH=/usr/lib/libboost_thread-mt.dll.a
				Boost_THREAD_LIBRARY_RELEASE:FILEPATH=/usr/lib/libboost_thread-mt.dll.a
				LAPACK_LIBRARY:FILEPATH=/usr/lib/liblapack.dll.a
				PTHREAD:FILEPATH=/usr/lib/libpthread.a
		Cygwin에서 사용하게 되는 external shared library의 이름은 아래와 같음.
			${CYGWIN_HOME}/bin/cygboost_program_options-mt-1_50.dll
			${CYGWIN_HOME}/bin/cygboost_serialization-mt-1_50.dll
			${CYGWIN_HOME}/bin/cygboost_thread-mt-1_50.dll
			${CYGWIN_HOME}/bin/cygboost_system-mt-1_50.dll
			${CYGWIN_HOME}/lib/lapack/cyglapack-0.dll
			${CYGWIN_HOME}/lib/lapack/cygblas-0.dll
			${CYGWIN_HOME}/lib/lapack/libpthread.a

[-] Trouble shooting (Windows).
	- Cygwin/MinGW/MSYS 환경에서 생성된 import library (libMocapy.dll.a)는 Windows system에서 사용할 수 없음.
		Cygwin/MinGW/MSYS 환경에서 생성된 shared library (cygMocapy.dll)로부터 Windows system을 위한 import library (cygMocapy.dll.lib)을 생성해야 함.
			REF [file] >> D:\dev_center\software_development\doc\implementation_technique\creating_import_library_from_shared_library.txt
			==> Mocapy library가 정상적으로 linking되지 않음.

[-] Trouble shooting (Linux).
	- Example을 building하는 과정에 Boost.System library 관련 오류 발생.
		<error>
			undefined reference to symbol 'boost::system::system_category()'
		==> CMake의 linking 관련 설정 변경.
			아래의 file에 Boost.System library linking 추가.
				/usr/local/lib/libboost_system.so
				${MOCAPY_HOME}/build_cb10/examples/CMakeFiles/mlr-uni.dir/link.txt
