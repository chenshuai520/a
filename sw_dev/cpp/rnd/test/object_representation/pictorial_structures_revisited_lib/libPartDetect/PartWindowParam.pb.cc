// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PartWindowParam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PartWindowParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartWindowParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartWindowParam_PartParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartWindowParam_PartParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PartWindowParam_2eproto() {
  protobuf_AddDesc_PartWindowParam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PartWindowParam.proto");
  GOOGLE_CHECK(file != NULL);
  PartWindowParam_descriptor_ = file->message_type(0);
  static const int PartWindowParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam, train_object_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam, bbox_offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam, bbox_offset_y_),
  };
  PartWindowParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartWindowParam_descriptor_,
      PartWindowParam::default_instance_,
      PartWindowParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartWindowParam));
  PartWindowParam_PartParam_descriptor_ = PartWindowParam_descriptor_->nested_type(0);
  static const int PartWindowParam_PartParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam_PartParam, part_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam_PartParam, window_size_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam_PartParam, window_size_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam_PartParam, pos_offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam_PartParam, pos_offset_y_),
  };
  PartWindowParam_PartParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartWindowParam_PartParam_descriptor_,
      PartWindowParam_PartParam::default_instance_,
      PartWindowParam_PartParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam_PartParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartWindowParam_PartParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartWindowParam_PartParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PartWindowParam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartWindowParam_descriptor_, &PartWindowParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartWindowParam_PartParam_descriptor_, &PartWindowParam_PartParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PartWindowParam_2eproto() {
  delete PartWindowParam::default_instance_;
  delete PartWindowParam_reflection_;
  delete PartWindowParam_PartParam::default_instance_;
  delete PartWindowParam_PartParam_reflection_;
}

void protobuf_AddDesc_PartWindowParam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025PartWindowParam.proto\"\217\002\n\017PartWindowPa"
    "ram\022(\n\004part\030\005 \003(\0132\032.PartWindowParam.Part"
    "Param\022 \n\023train_object_height\030\007 \001(\001:\003200\022"
    "\030\n\rbbox_offset_x\030\t \001(\001:\0010\022\030\n\rbbox_offset"
    "_y\030\n \001(\001:\0010\032|\n\tPartParam\022\017\n\007part_id\030\006 \001("
    "\005\022\030\n\rwindow_size_x\030\001 \001(\005:\0010\022\030\n\rwindow_si"
    "ze_y\030\002 \001(\005:\0010\022\024\n\014pos_offset_x\030\003 \001(\005\022\024\n\014p"
    "os_offset_y\030\004 \001(\005", 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PartWindowParam.proto", &protobuf_RegisterTypes);
  PartWindowParam::default_instance_ = new PartWindowParam();
  PartWindowParam_PartParam::default_instance_ = new PartWindowParam_PartParam();
  PartWindowParam::default_instance_->InitAsDefaultInstance();
  PartWindowParam_PartParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PartWindowParam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PartWindowParam_2eproto {
  StaticDescriptorInitializer_PartWindowParam_2eproto() {
    protobuf_AddDesc_PartWindowParam_2eproto();
  }
} static_descriptor_initializer_PartWindowParam_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PartWindowParam_PartParam::kPartIdFieldNumber;
const int PartWindowParam_PartParam::kWindowSizeXFieldNumber;
const int PartWindowParam_PartParam::kWindowSizeYFieldNumber;
const int PartWindowParam_PartParam::kPosOffsetXFieldNumber;
const int PartWindowParam_PartParam::kPosOffsetYFieldNumber;
#endif  // !_MSC_VER

PartWindowParam_PartParam::PartWindowParam_PartParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartWindowParam_PartParam::InitAsDefaultInstance() {
}

PartWindowParam_PartParam::PartWindowParam_PartParam(const PartWindowParam_PartParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartWindowParam_PartParam::SharedCtor() {
  _cached_size_ = 0;
  part_id_ = 0;
  window_size_x_ = 0;
  window_size_y_ = 0;
  pos_offset_x_ = 0;
  pos_offset_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartWindowParam_PartParam::~PartWindowParam_PartParam() {
  SharedDtor();
}

void PartWindowParam_PartParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartWindowParam_PartParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartWindowParam_PartParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartWindowParam_PartParam_descriptor_;
}

const PartWindowParam_PartParam& PartWindowParam_PartParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PartWindowParam_2eproto();  return *default_instance_;
}

PartWindowParam_PartParam* PartWindowParam_PartParam::default_instance_ = NULL;

PartWindowParam_PartParam* PartWindowParam_PartParam::New() const {
  return new PartWindowParam_PartParam;
}

void PartWindowParam_PartParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_id_ = 0;
    window_size_x_ = 0;
    window_size_y_ = 0;
    pos_offset_x_ = 0;
    pos_offset_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartWindowParam_PartParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 window_size_x = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_size_x_)));
          set_has_window_size_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_window_size_y;
        break;
      }
      
      // optional int32 window_size_y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_window_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_size_y_)));
          set_has_window_size_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_offset_x;
        break;
      }
      
      // optional int32 pos_offset_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_offset_x_)));
          set_has_pos_offset_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos_offset_y;
        break;
      }
      
      // optional int32 pos_offset_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_offset_y_)));
          set_has_pos_offset_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_part_id;
        break;
      }
      
      // optional int32 part_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_id_)));
          set_has_part_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartWindowParam_PartParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 window_size_x = 1 [default = 0];
  if (has_window_size_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->window_size_x(), output);
  }
  
  // optional int32 window_size_y = 2 [default = 0];
  if (has_window_size_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->window_size_y(), output);
  }
  
  // optional int32 pos_offset_x = 3;
  if (has_pos_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_offset_x(), output);
  }
  
  // optional int32 pos_offset_y = 4;
  if (has_pos_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_offset_y(), output);
  }
  
  // optional int32 part_id = 6;
  if (has_part_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->part_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartWindowParam_PartParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 window_size_x = 1 [default = 0];
  if (has_window_size_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->window_size_x(), target);
  }
  
  // optional int32 window_size_y = 2 [default = 0];
  if (has_window_size_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->window_size_y(), target);
  }
  
  // optional int32 pos_offset_x = 3;
  if (has_pos_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_offset_x(), target);
  }
  
  // optional int32 pos_offset_y = 4;
  if (has_pos_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_offset_y(), target);
  }
  
  // optional int32 part_id = 6;
  if (has_part_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->part_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartWindowParam_PartParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 part_id = 6;
    if (has_part_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part_id());
    }
    
    // optional int32 window_size_x = 1 [default = 0];
    if (has_window_size_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_size_x());
    }
    
    // optional int32 window_size_y = 2 [default = 0];
    if (has_window_size_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->window_size_y());
    }
    
    // optional int32 pos_offset_x = 3;
    if (has_pos_offset_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_offset_x());
    }
    
    // optional int32 pos_offset_y = 4;
    if (has_pos_offset_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_offset_y());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartWindowParam_PartParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartWindowParam_PartParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartWindowParam_PartParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartWindowParam_PartParam::MergeFrom(const PartWindowParam_PartParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part_id()) {
      set_part_id(from.part_id());
    }
    if (from.has_window_size_x()) {
      set_window_size_x(from.window_size_x());
    }
    if (from.has_window_size_y()) {
      set_window_size_y(from.window_size_y());
    }
    if (from.has_pos_offset_x()) {
      set_pos_offset_x(from.pos_offset_x());
    }
    if (from.has_pos_offset_y()) {
      set_pos_offset_y(from.pos_offset_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartWindowParam_PartParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartWindowParam_PartParam::CopyFrom(const PartWindowParam_PartParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartWindowParam_PartParam::IsInitialized() const {
  
  return true;
}

void PartWindowParam_PartParam::Swap(PartWindowParam_PartParam* other) {
  if (other != this) {
    std::swap(part_id_, other->part_id_);
    std::swap(window_size_x_, other->window_size_x_);
    std::swap(window_size_y_, other->window_size_y_);
    std::swap(pos_offset_x_, other->pos_offset_x_);
    std::swap(pos_offset_y_, other->pos_offset_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartWindowParam_PartParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartWindowParam_PartParam_descriptor_;
  metadata.reflection = PartWindowParam_PartParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PartWindowParam::kPartFieldNumber;
const int PartWindowParam::kTrainObjectHeightFieldNumber;
const int PartWindowParam::kBboxOffsetXFieldNumber;
const int PartWindowParam::kBboxOffsetYFieldNumber;
#endif  // !_MSC_VER

PartWindowParam::PartWindowParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartWindowParam::InitAsDefaultInstance() {
}

PartWindowParam::PartWindowParam(const PartWindowParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartWindowParam::SharedCtor() {
  _cached_size_ = 0;
  train_object_height_ = 200;
  bbox_offset_x_ = 0;
  bbox_offset_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartWindowParam::~PartWindowParam() {
  SharedDtor();
}

void PartWindowParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartWindowParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartWindowParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartWindowParam_descriptor_;
}

const PartWindowParam& PartWindowParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PartWindowParam_2eproto();  return *default_instance_;
}

PartWindowParam* PartWindowParam::default_instance_ = NULL;

PartWindowParam* PartWindowParam::New() const {
  return new PartWindowParam;
}

void PartWindowParam::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    train_object_height_ = 200;
    bbox_offset_x_ = 0;
    bbox_offset_y_ = 0;
  }
  part_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartWindowParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PartWindowParam.PartParam part = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_part;
        if (input->ExpectTag(57)) goto parse_train_object_height;
        break;
      }
      
      // optional double train_object_height = 7 [default = 200];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_train_object_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &train_object_height_)));
          set_has_train_object_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_bbox_offset_x;
        break;
      }
      
      // optional double bbox_offset_x = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bbox_offset_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bbox_offset_x_)));
          set_has_bbox_offset_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_bbox_offset_y;
        break;
      }
      
      // optional double bbox_offset_y = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bbox_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bbox_offset_y_)));
          set_has_bbox_offset_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartWindowParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PartWindowParam.PartParam part = 5;
  for (int i = 0; i < this->part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->part(i), output);
  }
  
  // optional double train_object_height = 7 [default = 200];
  if (has_train_object_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->train_object_height(), output);
  }
  
  // optional double bbox_offset_x = 9 [default = 0];
  if (has_bbox_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bbox_offset_x(), output);
  }
  
  // optional double bbox_offset_y = 10 [default = 0];
  if (has_bbox_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->bbox_offset_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartWindowParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PartWindowParam.PartParam part = 5;
  for (int i = 0; i < this->part_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->part(i), target);
  }
  
  // optional double train_object_height = 7 [default = 200];
  if (has_train_object_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->train_object_height(), target);
  }
  
  // optional double bbox_offset_x = 9 [default = 0];
  if (has_bbox_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bbox_offset_x(), target);
  }
  
  // optional double bbox_offset_y = 10 [default = 0];
  if (has_bbox_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->bbox_offset_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartWindowParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double train_object_height = 7 [default = 200];
    if (has_train_object_height()) {
      total_size += 1 + 8;
    }
    
    // optional double bbox_offset_x = 9 [default = 0];
    if (has_bbox_offset_x()) {
      total_size += 1 + 8;
    }
    
    // optional double bbox_offset_y = 10 [default = 0];
    if (has_bbox_offset_y()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .PartWindowParam.PartParam part = 5;
  total_size += 1 * this->part_size();
  for (int i = 0; i < this->part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->part(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartWindowParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartWindowParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartWindowParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartWindowParam::MergeFrom(const PartWindowParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_.MergeFrom(from.part_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_train_object_height()) {
      set_train_object_height(from.train_object_height());
    }
    if (from.has_bbox_offset_x()) {
      set_bbox_offset_x(from.bbox_offset_x());
    }
    if (from.has_bbox_offset_y()) {
      set_bbox_offset_y(from.bbox_offset_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartWindowParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartWindowParam::CopyFrom(const PartWindowParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartWindowParam::IsInitialized() const {
  
  return true;
}

void PartWindowParam::Swap(PartWindowParam* other) {
  if (other != this) {
    part_.Swap(&other->part_);
    std::swap(train_object_height_, other->train_object_height_);
    std::swap(bbox_offset_x_, other->bbox_offset_x_);
    std::swap(bbox_offset_y_, other->bbox_offset_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartWindowParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartWindowParam_descriptor_;
  metadata.reflection = PartWindowParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
