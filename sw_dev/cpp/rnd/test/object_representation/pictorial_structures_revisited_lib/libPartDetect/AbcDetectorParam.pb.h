// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AbcDetectorParam.proto

#ifndef PROTOBUF_AbcDetectorParam_2eproto__INCLUDED
#define PROTOBUF_AbcDetectorParam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AbcDetectorParam_2eproto();
void protobuf_AssignDesc_AbcDetectorParam_2eproto();
void protobuf_ShutdownFile_AbcDetectorParam_2eproto();

class AbcDetectorParam;

// ===================================================================

class AbcDetectorParam : public ::google::protobuf::Message {
 public:
  AbcDetectorParam();
  virtual ~AbcDetectorParam();
  
  AbcDetectorParam(const AbcDetectorParam& from);
  
  inline AbcDetectorParam& operator=(const AbcDetectorParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AbcDetectorParam& default_instance();
  
  void Swap(AbcDetectorParam* other);
  
  // implements Message ----------------------------------------------
  
  AbcDetectorParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbcDetectorParam& from);
  void MergeFrom(const AbcDetectorParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 desc_size = 2;
  inline bool has_desc_size() const;
  inline void clear_desc_size();
  static const int kDescSizeFieldNumber = 2;
  inline ::google::protobuf::int32 desc_size() const;
  inline void set_desc_size(::google::protobuf::int32 value);
  
  // optional int32 desc_step = 3;
  inline bool has_desc_step() const;
  inline void clear_desc_step();
  static const int kDescStepFieldNumber = 3;
  inline ::google::protobuf::int32 desc_step() const;
  inline void set_desc_step(::google::protobuf::int32 value);
  
  // optional double window_desc_step_ratio = 4 [default = 1];
  inline bool has_window_desc_step_ratio() const;
  inline void clear_window_desc_step_ratio();
  static const int kWindowDescStepRatioFieldNumber = 4;
  inline double window_desc_step_ratio() const;
  inline void set_window_desc_step_ratio(double value);
  
  // optional int32 boosting_rounds = 1 [default = 500];
  inline bool has_boosting_rounds() const;
  inline void clear_boosting_rounds();
  static const int kBoostingRoundsFieldNumber = 1;
  inline ::google::protobuf::int32 boosting_rounds() const;
  inline void set_boosting_rounds(::google::protobuf::int32 value);
  
  // optional int32 num_train_pos = 6 [default = -1];
  inline bool has_num_train_pos() const;
  inline void clear_num_train_pos();
  static const int kNumTrainPosFieldNumber = 6;
  inline ::google::protobuf::int32 num_train_pos() const;
  inline void set_num_train_pos(::google::protobuf::int32 value);
  
  // optional int32 num_train_neg = 8 [default = -1];
  inline bool has_num_train_neg() const;
  inline void clear_num_train_neg();
  static const int kNumTrainNegFieldNumber = 8;
  inline ::google::protobuf::int32 num_train_neg() const;
  inline void set_num_train_neg(::google::protobuf::int32 value);
  
  // optional string feature_type = 10 [default = "SHAPE"];
  inline bool has_feature_type() const;
  inline void clear_feature_type();
  static const int kFeatureTypeFieldNumber = 10;
  inline const ::std::string& feature_type() const;
  inline void set_feature_type(const ::std::string& value);
  inline void set_feature_type(const char* value);
  inline void set_feature_type(const char* value, size_t size);
  inline ::std::string* mutable_feature_type();
  inline ::std::string* release_feature_type();
  
  // optional int32 param_version = 11 [default = 0];
  inline bool has_param_version() const;
  inline void clear_param_version();
  static const int kParamVersionFieldNumber = 11;
  inline ::google::protobuf::int32 param_version() const;
  inline void set_param_version(::google::protobuf::int32 value);
  
  // optional bool do_jitter = 12 [default = true];
  inline bool has_do_jitter() const;
  inline void clear_do_jitter();
  static const int kDoJitterFieldNumber = 12;
  inline bool do_jitter() const;
  inline void set_do_jitter(bool value);
  
  // optional double bootstrap_fraction = 14 [default = 0];
  inline bool has_bootstrap_fraction() const;
  inline void clear_bootstrap_fraction();
  static const int kBootstrapFractionFieldNumber = 14;
  inline double bootstrap_fraction() const;
  inline void set_bootstrap_fraction(double value);
  
  // optional bool feature_full_orientation = 15 [default = false];
  inline bool has_feature_full_orientation() const;
  inline void clear_feature_full_orientation();
  static const int kFeatureFullOrientationFieldNumber = 15;
  inline bool feature_full_orientation() const;
  inline void set_feature_full_orientation(bool value);
  
  // optional int32 feature_orisize = 17 [default = 8];
  inline bool has_feature_orisize() const;
  inline void clear_feature_orisize();
  static const int kFeatureOrisizeFieldNumber = 17;
  inline ::google::protobuf::int32 feature_orisize() const;
  inline void set_feature_orisize(::google::protobuf::int32 value);
  
  // optional int32 num_train_jitter = 7 [default = 0];
  inline bool has_num_train_jitter() const;
  inline void clear_num_train_jitter();
  static const int kNumTrainJitterFieldNumber = 7;
  inline ::google::protobuf::int32 num_train_jitter() const;
  inline void set_num_train_jitter(::google::protobuf::int32 value);
  
  // optional int32 num_train_bootstrap = 9 [default = 0];
  inline bool has_num_train_bootstrap() const;
  inline void clear_num_train_bootstrap();
  static const int kNumTrainBootstrapFieldNumber = 9;
  inline ::google::protobuf::int32 num_train_bootstrap() const;
  inline void set_num_train_bootstrap(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:AbcDetectorParam)
 private:
  inline void set_has_desc_size();
  inline void clear_has_desc_size();
  inline void set_has_desc_step();
  inline void clear_has_desc_step();
  inline void set_has_window_desc_step_ratio();
  inline void clear_has_window_desc_step_ratio();
  inline void set_has_boosting_rounds();
  inline void clear_has_boosting_rounds();
  inline void set_has_num_train_pos();
  inline void clear_has_num_train_pos();
  inline void set_has_num_train_neg();
  inline void clear_has_num_train_neg();
  inline void set_has_feature_type();
  inline void clear_has_feature_type();
  inline void set_has_param_version();
  inline void clear_has_param_version();
  inline void set_has_do_jitter();
  inline void clear_has_do_jitter();
  inline void set_has_bootstrap_fraction();
  inline void clear_has_bootstrap_fraction();
  inline void set_has_feature_full_orientation();
  inline void clear_has_feature_full_orientation();
  inline void set_has_feature_orisize();
  inline void clear_has_feature_orisize();
  inline void set_has_num_train_jitter();
  inline void clear_has_num_train_jitter();
  inline void set_has_num_train_bootstrap();
  inline void clear_has_num_train_bootstrap();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 desc_size_;
  ::google::protobuf::int32 desc_step_;
  double window_desc_step_ratio_;
  ::google::protobuf::int32 boosting_rounds_;
  ::google::protobuf::int32 num_train_pos_;
  ::std::string* feature_type_;
  static const ::std::string _default_feature_type_;
  ::google::protobuf::int32 num_train_neg_;
  ::google::protobuf::int32 param_version_;
  double bootstrap_fraction_;
  bool do_jitter_;
  bool feature_full_orientation_;
  ::google::protobuf::int32 feature_orisize_;
  ::google::protobuf::int32 num_train_jitter_;
  ::google::protobuf::int32 num_train_bootstrap_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_AbcDetectorParam_2eproto();
  friend void protobuf_AssignDesc_AbcDetectorParam_2eproto();
  friend void protobuf_ShutdownFile_AbcDetectorParam_2eproto();
  
  void InitAsDefaultInstance();
  static AbcDetectorParam* default_instance_;
};
// ===================================================================


// ===================================================================

// AbcDetectorParam

// optional int32 desc_size = 2;
inline bool AbcDetectorParam::has_desc_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbcDetectorParam::set_has_desc_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AbcDetectorParam::clear_has_desc_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AbcDetectorParam::clear_desc_size() {
  desc_size_ = 0;
  clear_has_desc_size();
}
inline ::google::protobuf::int32 AbcDetectorParam::desc_size() const {
  return desc_size_;
}
inline void AbcDetectorParam::set_desc_size(::google::protobuf::int32 value) {
  set_has_desc_size();
  desc_size_ = value;
}

// optional int32 desc_step = 3;
inline bool AbcDetectorParam::has_desc_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AbcDetectorParam::set_has_desc_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AbcDetectorParam::clear_has_desc_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AbcDetectorParam::clear_desc_step() {
  desc_step_ = 0;
  clear_has_desc_step();
}
inline ::google::protobuf::int32 AbcDetectorParam::desc_step() const {
  return desc_step_;
}
inline void AbcDetectorParam::set_desc_step(::google::protobuf::int32 value) {
  set_has_desc_step();
  desc_step_ = value;
}

// optional double window_desc_step_ratio = 4 [default = 1];
inline bool AbcDetectorParam::has_window_desc_step_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AbcDetectorParam::set_has_window_desc_step_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AbcDetectorParam::clear_has_window_desc_step_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AbcDetectorParam::clear_window_desc_step_ratio() {
  window_desc_step_ratio_ = 1;
  clear_has_window_desc_step_ratio();
}
inline double AbcDetectorParam::window_desc_step_ratio() const {
  return window_desc_step_ratio_;
}
inline void AbcDetectorParam::set_window_desc_step_ratio(double value) {
  set_has_window_desc_step_ratio();
  window_desc_step_ratio_ = value;
}

// optional int32 boosting_rounds = 1 [default = 500];
inline bool AbcDetectorParam::has_boosting_rounds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AbcDetectorParam::set_has_boosting_rounds() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AbcDetectorParam::clear_has_boosting_rounds() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AbcDetectorParam::clear_boosting_rounds() {
  boosting_rounds_ = 500;
  clear_has_boosting_rounds();
}
inline ::google::protobuf::int32 AbcDetectorParam::boosting_rounds() const {
  return boosting_rounds_;
}
inline void AbcDetectorParam::set_boosting_rounds(::google::protobuf::int32 value) {
  set_has_boosting_rounds();
  boosting_rounds_ = value;
}

// optional int32 num_train_pos = 6 [default = -1];
inline bool AbcDetectorParam::has_num_train_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AbcDetectorParam::set_has_num_train_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AbcDetectorParam::clear_has_num_train_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AbcDetectorParam::clear_num_train_pos() {
  num_train_pos_ = -1;
  clear_has_num_train_pos();
}
inline ::google::protobuf::int32 AbcDetectorParam::num_train_pos() const {
  return num_train_pos_;
}
inline void AbcDetectorParam::set_num_train_pos(::google::protobuf::int32 value) {
  set_has_num_train_pos();
  num_train_pos_ = value;
}

// optional int32 num_train_neg = 8 [default = -1];
inline bool AbcDetectorParam::has_num_train_neg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AbcDetectorParam::set_has_num_train_neg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AbcDetectorParam::clear_has_num_train_neg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AbcDetectorParam::clear_num_train_neg() {
  num_train_neg_ = -1;
  clear_has_num_train_neg();
}
inline ::google::protobuf::int32 AbcDetectorParam::num_train_neg() const {
  return num_train_neg_;
}
inline void AbcDetectorParam::set_num_train_neg(::google::protobuf::int32 value) {
  set_has_num_train_neg();
  num_train_neg_ = value;
}

// optional string feature_type = 10 [default = "SHAPE"];
inline bool AbcDetectorParam::has_feature_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AbcDetectorParam::set_has_feature_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AbcDetectorParam::clear_has_feature_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AbcDetectorParam::clear_feature_type() {
  if (feature_type_ != &_default_feature_type_) {
    feature_type_->assign(_default_feature_type_);
  }
  clear_has_feature_type();
}
inline const ::std::string& AbcDetectorParam::feature_type() const {
  return *feature_type_;
}
inline void AbcDetectorParam::set_feature_type(const ::std::string& value) {
  set_has_feature_type();
  if (feature_type_ == &_default_feature_type_) {
    feature_type_ = new ::std::string;
  }
  feature_type_->assign(value);
}
inline void AbcDetectorParam::set_feature_type(const char* value) {
  set_has_feature_type();
  if (feature_type_ == &_default_feature_type_) {
    feature_type_ = new ::std::string;
  }
  feature_type_->assign(value);
}
inline void AbcDetectorParam::set_feature_type(const char* value, size_t size) {
  set_has_feature_type();
  if (feature_type_ == &_default_feature_type_) {
    feature_type_ = new ::std::string;
  }
  feature_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbcDetectorParam::mutable_feature_type() {
  set_has_feature_type();
  if (feature_type_ == &_default_feature_type_) {
    feature_type_ = new ::std::string(_default_feature_type_);
  }
  return feature_type_;
}
inline ::std::string* AbcDetectorParam::release_feature_type() {
  clear_has_feature_type();
  if (feature_type_ == &_default_feature_type_) {
    return NULL;
  } else {
    ::std::string* temp = feature_type_;
    feature_type_ = const_cast< ::std::string*>(&_default_feature_type_);
    return temp;
  }
}

// optional int32 param_version = 11 [default = 0];
inline bool AbcDetectorParam::has_param_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AbcDetectorParam::set_has_param_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AbcDetectorParam::clear_has_param_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AbcDetectorParam::clear_param_version() {
  param_version_ = 0;
  clear_has_param_version();
}
inline ::google::protobuf::int32 AbcDetectorParam::param_version() const {
  return param_version_;
}
inline void AbcDetectorParam::set_param_version(::google::protobuf::int32 value) {
  set_has_param_version();
  param_version_ = value;
}

// optional bool do_jitter = 12 [default = true];
inline bool AbcDetectorParam::has_do_jitter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AbcDetectorParam::set_has_do_jitter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AbcDetectorParam::clear_has_do_jitter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AbcDetectorParam::clear_do_jitter() {
  do_jitter_ = true;
  clear_has_do_jitter();
}
inline bool AbcDetectorParam::do_jitter() const {
  return do_jitter_;
}
inline void AbcDetectorParam::set_do_jitter(bool value) {
  set_has_do_jitter();
  do_jitter_ = value;
}

// optional double bootstrap_fraction = 14 [default = 0];
inline bool AbcDetectorParam::has_bootstrap_fraction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AbcDetectorParam::set_has_bootstrap_fraction() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AbcDetectorParam::clear_has_bootstrap_fraction() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AbcDetectorParam::clear_bootstrap_fraction() {
  bootstrap_fraction_ = 0;
  clear_has_bootstrap_fraction();
}
inline double AbcDetectorParam::bootstrap_fraction() const {
  return bootstrap_fraction_;
}
inline void AbcDetectorParam::set_bootstrap_fraction(double value) {
  set_has_bootstrap_fraction();
  bootstrap_fraction_ = value;
}

// optional bool feature_full_orientation = 15 [default = false];
inline bool AbcDetectorParam::has_feature_full_orientation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AbcDetectorParam::set_has_feature_full_orientation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AbcDetectorParam::clear_has_feature_full_orientation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AbcDetectorParam::clear_feature_full_orientation() {
  feature_full_orientation_ = false;
  clear_has_feature_full_orientation();
}
inline bool AbcDetectorParam::feature_full_orientation() const {
  return feature_full_orientation_;
}
inline void AbcDetectorParam::set_feature_full_orientation(bool value) {
  set_has_feature_full_orientation();
  feature_full_orientation_ = value;
}

// optional int32 feature_orisize = 17 [default = 8];
inline bool AbcDetectorParam::has_feature_orisize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AbcDetectorParam::set_has_feature_orisize() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AbcDetectorParam::clear_has_feature_orisize() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AbcDetectorParam::clear_feature_orisize() {
  feature_orisize_ = 8;
  clear_has_feature_orisize();
}
inline ::google::protobuf::int32 AbcDetectorParam::feature_orisize() const {
  return feature_orisize_;
}
inline void AbcDetectorParam::set_feature_orisize(::google::protobuf::int32 value) {
  set_has_feature_orisize();
  feature_orisize_ = value;
}

// optional int32 num_train_jitter = 7 [default = 0];
inline bool AbcDetectorParam::has_num_train_jitter() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AbcDetectorParam::set_has_num_train_jitter() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AbcDetectorParam::clear_has_num_train_jitter() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AbcDetectorParam::clear_num_train_jitter() {
  num_train_jitter_ = 0;
  clear_has_num_train_jitter();
}
inline ::google::protobuf::int32 AbcDetectorParam::num_train_jitter() const {
  return num_train_jitter_;
}
inline void AbcDetectorParam::set_num_train_jitter(::google::protobuf::int32 value) {
  set_has_num_train_jitter();
  num_train_jitter_ = value;
}

// optional int32 num_train_bootstrap = 9 [default = 0];
inline bool AbcDetectorParam::has_num_train_bootstrap() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AbcDetectorParam::set_has_num_train_bootstrap() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AbcDetectorParam::clear_has_num_train_bootstrap() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AbcDetectorParam::clear_num_train_bootstrap() {
  num_train_bootstrap_ = 0;
  clear_has_num_train_bootstrap();
}
inline ::google::protobuf::int32 AbcDetectorParam::num_train_bootstrap() const {
  return num_train_bootstrap_;
}
inline void AbcDetectorParam::set_num_train_bootstrap(::google::protobuf::int32 value) {
  set_has_num_train_bootstrap();
  num_train_bootstrap_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AbcDetectorParam_2eproto__INCLUDED
