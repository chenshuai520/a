// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PartConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PartDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* Joint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Joint_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppearanceGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppearanceGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PartConfig_2eproto() {
  protobuf_AddDesc_PartConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PartConfig.proto");
  GOOGLE_CHECK(file != NULL);
  PartDef_descriptor_ = file->message_type(0);
  static const int PartDef_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, part_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, part_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, part_x_axis_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, part_x_axis_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, part_x_axis_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, ext_x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, ext_x_neg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, ext_y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, ext_y_neg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, is_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, is_detect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, is_upright_),
  };
  PartDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartDef_descriptor_,
      PartDef::default_instance_,
      PartDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartDef));
  Joint_descriptor_ = file->message_type(1);
  static const int Joint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, child_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, parent_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, joint_pos_),
  };
  Joint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Joint_descriptor_,
      Joint::default_instance_,
      Joint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Joint));
  AppearanceGroup_descriptor_ = file->message_type(2);
  static const int AppearanceGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceGroup, part_id_),
  };
  AppearanceGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppearanceGroup_descriptor_,
      AppearanceGroup::default_instance_,
      AppearanceGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppearanceGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppearanceGroup));
  PartConfig_descriptor_ = file->message_type(3);
  static const int PartConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartConfig, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartConfig, joint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartConfig, app_group_),
  };
  PartConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartConfig_descriptor_,
      PartConfig::default_instance_,
      PartConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PartConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartDef_descriptor_, &PartDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Joint_descriptor_, &Joint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppearanceGroup_descriptor_, &AppearanceGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartConfig_descriptor_, &PartConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PartConfig_2eproto() {
  delete PartDef::default_instance_;
  delete PartDef_reflection_;
  delete Joint::default_instance_;
  delete Joint_reflection_;
  delete AppearanceGroup::default_instance_;
  delete AppearanceGroup_reflection_;
  delete PartConfig::default_instance_;
  delete PartConfig_reflection_;
}

void protobuf_AddDesc_PartConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020PartConfig.proto\"\241\002\n\007PartDef\022\017\n\007part_i"
    "d\030\001 \001(\005\022\020\n\010part_pos\030\002 \003(\005\022\030\n\020part_x_axis"
    "_from\030\004 \001(\005\022\026\n\016part_x_axis_to\030\005 \001(\005\022\035\n\022p"
    "art_x_axis_offset\030\006 \001(\002:\0010\022\024\n\text_x_pos\030"
    "\007 \001(\002:\0010\022\024\n\text_x_neg\030\010 \001(\002:\0010\022\024\n\text_y_"
    "pos\030\t \001(\002:\0010\022\024\n\text_y_neg\030\n \001(\002:\0010\022\026\n\007is"
    "_root\030\013 \001(\010:\005false\022\027\n\tis_detect\030\014 \001(\010:\004t"
    "rue\022\031\n\nis_upright\030\r \001(\010:\005false\"Y\n\005Joint\022"
    "\021\n\tchild_idx\030\001 \001(\005\022\022\n\nparent_idx\030\002 \001(\005\022\026"
    "\n\004type\030\003 \001(\t:\010Gaussian\022\021\n\tjoint_pos\030\004 \003("
    "\005\"\"\n\017AppearanceGroup\022\017\n\007part_id\030\001 \003(\005\"`\n"
    "\nPartConfig\022\026\n\004part\030\001 \003(\0132\010.PartDef\022\025\n\005j"
    "oint\030\002 \003(\0132\006.Joint\022#\n\tapp_group\030\003 \003(\0132\020."
    "AppearanceGroup", 535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PartConfig.proto", &protobuf_RegisterTypes);
  PartDef::default_instance_ = new PartDef();
  Joint::default_instance_ = new Joint();
  AppearanceGroup::default_instance_ = new AppearanceGroup();
  PartConfig::default_instance_ = new PartConfig();
  PartDef::default_instance_->InitAsDefaultInstance();
  Joint::default_instance_->InitAsDefaultInstance();
  AppearanceGroup::default_instance_->InitAsDefaultInstance();
  PartConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PartConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PartConfig_2eproto {
  StaticDescriptorInitializer_PartConfig_2eproto() {
    protobuf_AddDesc_PartConfig_2eproto();
  }
} static_descriptor_initializer_PartConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PartDef::kPartIdFieldNumber;
const int PartDef::kPartPosFieldNumber;
const int PartDef::kPartXAxisFromFieldNumber;
const int PartDef::kPartXAxisToFieldNumber;
const int PartDef::kPartXAxisOffsetFieldNumber;
const int PartDef::kExtXPosFieldNumber;
const int PartDef::kExtXNegFieldNumber;
const int PartDef::kExtYPosFieldNumber;
const int PartDef::kExtYNegFieldNumber;
const int PartDef::kIsRootFieldNumber;
const int PartDef::kIsDetectFieldNumber;
const int PartDef::kIsUprightFieldNumber;
#endif  // !_MSC_VER

PartDef::PartDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartDef::InitAsDefaultInstance() {
}

PartDef::PartDef(const PartDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartDef::SharedCtor() {
  _cached_size_ = 0;
  part_id_ = 0;
  part_x_axis_from_ = 0;
  part_x_axis_to_ = 0;
  part_x_axis_offset_ = 0;
  ext_x_pos_ = 0;
  ext_x_neg_ = 0;
  ext_y_pos_ = 0;
  ext_y_neg_ = 0;
  is_root_ = false;
  is_detect_ = true;
  is_upright_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartDef::~PartDef() {
  SharedDtor();
}

void PartDef::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartDef_descriptor_;
}

const PartDef& PartDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PartConfig_2eproto();  return *default_instance_;
}

PartDef* PartDef::default_instance_ = NULL;

PartDef* PartDef::New() const {
  return new PartDef;
}

void PartDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_id_ = 0;
    part_x_axis_from_ = 0;
    part_x_axis_to_ = 0;
    part_x_axis_offset_ = 0;
    ext_x_pos_ = 0;
    ext_x_neg_ = 0;
    ext_y_pos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ext_y_neg_ = 0;
    is_root_ = false;
    is_detect_ = true;
    is_upright_ = false;
  }
  part_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 part_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_id_)));
          set_has_part_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part_pos;
        break;
      }
      
      // repeated int32 part_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_part_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_part_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part_pos;
        if (input->ExpectTag(32)) goto parse_part_x_axis_from;
        break;
      }
      
      // optional int32 part_x_axis_from = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_x_axis_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_x_axis_from_)));
          set_has_part_x_axis_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_part_x_axis_to;
        break;
      }
      
      // optional int32 part_x_axis_to = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_x_axis_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_x_axis_to_)));
          set_has_part_x_axis_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_part_x_axis_offset;
        break;
      }
      
      // optional float part_x_axis_offset = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_part_x_axis_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &part_x_axis_offset_)));
          set_has_part_x_axis_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ext_x_pos;
        break;
      }
      
      // optional float ext_x_pos = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ext_x_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ext_x_pos_)));
          set_has_ext_x_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ext_x_neg;
        break;
      }
      
      // optional float ext_x_neg = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ext_x_neg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ext_x_neg_)));
          set_has_ext_x_neg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_ext_y_pos;
        break;
      }
      
      // optional float ext_y_pos = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ext_y_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ext_y_pos_)));
          set_has_ext_y_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ext_y_neg;
        break;
      }
      
      // optional float ext_y_neg = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ext_y_neg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ext_y_neg_)));
          set_has_ext_y_neg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_root;
        break;
      }
      
      // optional bool is_root = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_root_)));
          set_has_is_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_detect;
        break;
      }
      
      // optional bool is_detect = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_detect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_detect_)));
          set_has_is_detect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_is_upright;
        break;
      }
      
      // optional bool is_upright = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_upright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_upright_)));
          set_has_is_upright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 part_id = 1;
  if (has_part_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part_id(), output);
  }
  
  // repeated int32 part_pos = 2;
  for (int i = 0; i < this->part_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->part_pos(i), output);
  }
  
  // optional int32 part_x_axis_from = 4;
  if (has_part_x_axis_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->part_x_axis_from(), output);
  }
  
  // optional int32 part_x_axis_to = 5;
  if (has_part_x_axis_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->part_x_axis_to(), output);
  }
  
  // optional float part_x_axis_offset = 6 [default = 0];
  if (has_part_x_axis_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->part_x_axis_offset(), output);
  }
  
  // optional float ext_x_pos = 7 [default = 0];
  if (has_ext_x_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ext_x_pos(), output);
  }
  
  // optional float ext_x_neg = 8 [default = 0];
  if (has_ext_x_neg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ext_x_neg(), output);
  }
  
  // optional float ext_y_pos = 9 [default = 0];
  if (has_ext_y_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ext_y_pos(), output);
  }
  
  // optional float ext_y_neg = 10 [default = 0];
  if (has_ext_y_neg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ext_y_neg(), output);
  }
  
  // optional bool is_root = 11 [default = false];
  if (has_is_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_root(), output);
  }
  
  // optional bool is_detect = 12 [default = true];
  if (has_is_detect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_detect(), output);
  }
  
  // optional bool is_upright = 13 [default = false];
  if (has_is_upright()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_upright(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 part_id = 1;
  if (has_part_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->part_id(), target);
  }
  
  // repeated int32 part_pos = 2;
  for (int i = 0; i < this->part_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->part_pos(i), target);
  }
  
  // optional int32 part_x_axis_from = 4;
  if (has_part_x_axis_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->part_x_axis_from(), target);
  }
  
  // optional int32 part_x_axis_to = 5;
  if (has_part_x_axis_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->part_x_axis_to(), target);
  }
  
  // optional float part_x_axis_offset = 6 [default = 0];
  if (has_part_x_axis_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->part_x_axis_offset(), target);
  }
  
  // optional float ext_x_pos = 7 [default = 0];
  if (has_ext_x_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ext_x_pos(), target);
  }
  
  // optional float ext_x_neg = 8 [default = 0];
  if (has_ext_x_neg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ext_x_neg(), target);
  }
  
  // optional float ext_y_pos = 9 [default = 0];
  if (has_ext_y_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->ext_y_pos(), target);
  }
  
  // optional float ext_y_neg = 10 [default = 0];
  if (has_ext_y_neg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->ext_y_neg(), target);
  }
  
  // optional bool is_root = 11 [default = false];
  if (has_is_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_root(), target);
  }
  
  // optional bool is_detect = 12 [default = true];
  if (has_is_detect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_detect(), target);
  }
  
  // optional bool is_upright = 13 [default = false];
  if (has_is_upright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_upright(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartDef::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 part_id = 1;
    if (has_part_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part_id());
    }
    
    // optional int32 part_x_axis_from = 4;
    if (has_part_x_axis_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part_x_axis_from());
    }
    
    // optional int32 part_x_axis_to = 5;
    if (has_part_x_axis_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part_x_axis_to());
    }
    
    // optional float part_x_axis_offset = 6 [default = 0];
    if (has_part_x_axis_offset()) {
      total_size += 1 + 4;
    }
    
    // optional float ext_x_pos = 7 [default = 0];
    if (has_ext_x_pos()) {
      total_size += 1 + 4;
    }
    
    // optional float ext_x_neg = 8 [default = 0];
    if (has_ext_x_neg()) {
      total_size += 1 + 4;
    }
    
    // optional float ext_y_pos = 9 [default = 0];
    if (has_ext_y_pos()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float ext_y_neg = 10 [default = 0];
    if (has_ext_y_neg()) {
      total_size += 1 + 4;
    }
    
    // optional bool is_root = 11 [default = false];
    if (has_is_root()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_detect = 12 [default = true];
    if (has_is_detect()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_upright = 13 [default = false];
    if (has_is_upright()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 part_pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->part_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->part_pos(i));
    }
    total_size += 1 * this->part_pos_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartDef::MergeFrom(const PartDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_pos_.MergeFrom(from.part_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part_id()) {
      set_part_id(from.part_id());
    }
    if (from.has_part_x_axis_from()) {
      set_part_x_axis_from(from.part_x_axis_from());
    }
    if (from.has_part_x_axis_to()) {
      set_part_x_axis_to(from.part_x_axis_to());
    }
    if (from.has_part_x_axis_offset()) {
      set_part_x_axis_offset(from.part_x_axis_offset());
    }
    if (from.has_ext_x_pos()) {
      set_ext_x_pos(from.ext_x_pos());
    }
    if (from.has_ext_x_neg()) {
      set_ext_x_neg(from.ext_x_neg());
    }
    if (from.has_ext_y_pos()) {
      set_ext_y_pos(from.ext_y_pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ext_y_neg()) {
      set_ext_y_neg(from.ext_y_neg());
    }
    if (from.has_is_root()) {
      set_is_root(from.is_root());
    }
    if (from.has_is_detect()) {
      set_is_detect(from.is_detect());
    }
    if (from.has_is_upright()) {
      set_is_upright(from.is_upright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartDef::CopyFrom(const PartDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartDef::IsInitialized() const {
  
  return true;
}

void PartDef::Swap(PartDef* other) {
  if (other != this) {
    std::swap(part_id_, other->part_id_);
    part_pos_.Swap(&other->part_pos_);
    std::swap(part_x_axis_from_, other->part_x_axis_from_);
    std::swap(part_x_axis_to_, other->part_x_axis_to_);
    std::swap(part_x_axis_offset_, other->part_x_axis_offset_);
    std::swap(ext_x_pos_, other->ext_x_pos_);
    std::swap(ext_x_neg_, other->ext_x_neg_);
    std::swap(ext_y_pos_, other->ext_y_pos_);
    std::swap(ext_y_neg_, other->ext_y_neg_);
    std::swap(is_root_, other->is_root_);
    std::swap(is_detect_, other->is_detect_);
    std::swap(is_upright_, other->is_upright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartDef_descriptor_;
  metadata.reflection = PartDef_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Joint::_default_type_("Gaussian");
#ifndef _MSC_VER
const int Joint::kChildIdxFieldNumber;
const int Joint::kParentIdxFieldNumber;
const int Joint::kTypeFieldNumber;
const int Joint::kJointPosFieldNumber;
#endif  // !_MSC_VER

Joint::Joint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Joint::InitAsDefaultInstance() {
}

Joint::Joint(const Joint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Joint::SharedCtor() {
  _cached_size_ = 0;
  child_idx_ = 0;
  parent_idx_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Joint::~Joint() {
  SharedDtor();
}

void Joint::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void Joint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Joint_descriptor_;
}

const Joint& Joint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PartConfig_2eproto();  return *default_instance_;
}

Joint* Joint::default_instance_ = NULL;

Joint* Joint::New() const {
  return new Joint;
}

void Joint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    child_idx_ = 0;
    parent_idx_ = 0;
    if (has_type()) {
      if (type_ != &_default_type_) {
        type_->assign(_default_type_);
      }
    }
  }
  joint_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Joint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 child_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_idx_)));
          set_has_child_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent_idx;
        break;
      }
      
      // optional int32 parent_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_idx_)));
          set_has_parent_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }
      
      // optional string type = 3 [default = "Gaussian"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_joint_pos;
        break;
      }
      
      // repeated int32 joint_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joint_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_joint_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_joint_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_joint_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Joint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 child_idx = 1;
  if (has_child_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->child_idx(), output);
  }
  
  // optional int32 parent_idx = 2;
  if (has_parent_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_idx(), output);
  }
  
  // optional string type = 3 [default = "Gaussian"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }
  
  // repeated int32 joint_pos = 4;
  for (int i = 0; i < this->joint_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->joint_pos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Joint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 child_idx = 1;
  if (has_child_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->child_idx(), target);
  }
  
  // optional int32 parent_idx = 2;
  if (has_parent_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_idx(), target);
  }
  
  // optional string type = 3 [default = "Gaussian"];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }
  
  // repeated int32 joint_pos = 4;
  for (int i = 0; i < this->joint_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->joint_pos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Joint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 child_idx = 1;
    if (has_child_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_idx());
    }
    
    // optional int32 parent_idx = 2;
    if (has_parent_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_idx());
    }
    
    // optional string type = 3 [default = "Gaussian"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  // repeated int32 joint_pos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->joint_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->joint_pos(i));
    }
    total_size += 1 * this->joint_pos_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Joint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Joint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Joint::MergeFrom(const Joint& from) {
  GOOGLE_CHECK_NE(&from, this);
  joint_pos_.MergeFrom(from.joint_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_child_idx()) {
      set_child_idx(from.child_idx());
    }
    if (from.has_parent_idx()) {
      set_parent_idx(from.parent_idx());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Joint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joint::CopyFrom(const Joint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joint::IsInitialized() const {
  
  return true;
}

void Joint::Swap(Joint* other) {
  if (other != this) {
    std::swap(child_idx_, other->child_idx_);
    std::swap(parent_idx_, other->parent_idx_);
    std::swap(type_, other->type_);
    joint_pos_.Swap(&other->joint_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Joint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Joint_descriptor_;
  metadata.reflection = Joint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppearanceGroup::kPartIdFieldNumber;
#endif  // !_MSC_VER

AppearanceGroup::AppearanceGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppearanceGroup::InitAsDefaultInstance() {
}

AppearanceGroup::AppearanceGroup(const AppearanceGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppearanceGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppearanceGroup::~AppearanceGroup() {
  SharedDtor();
}

void AppearanceGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppearanceGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppearanceGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppearanceGroup_descriptor_;
}

const AppearanceGroup& AppearanceGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PartConfig_2eproto();  return *default_instance_;
}

AppearanceGroup* AppearanceGroup::default_instance_ = NULL;

AppearanceGroup* AppearanceGroup::New() const {
  return new AppearanceGroup;
}

void AppearanceGroup::Clear() {
  part_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppearanceGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 part_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_part_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_part_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_part_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppearanceGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 part_id = 1;
  for (int i = 0; i < this->part_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->part_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppearanceGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 part_id = 1;
  for (int i = 0; i < this->part_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->part_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppearanceGroup::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 part_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->part_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->part_id(i));
    }
    total_size += 1 * this->part_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppearanceGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppearanceGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppearanceGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppearanceGroup::MergeFrom(const AppearanceGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_id_.MergeFrom(from.part_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppearanceGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceGroup::CopyFrom(const AppearanceGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceGroup::IsInitialized() const {
  
  return true;
}

void AppearanceGroup::Swap(AppearanceGroup* other) {
  if (other != this) {
    part_id_.Swap(&other->part_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppearanceGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppearanceGroup_descriptor_;
  metadata.reflection = AppearanceGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartConfig::kPartFieldNumber;
const int PartConfig::kJointFieldNumber;
const int PartConfig::kAppGroupFieldNumber;
#endif  // !_MSC_VER

PartConfig::PartConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartConfig::InitAsDefaultInstance() {
}

PartConfig::PartConfig(const PartConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartConfig::~PartConfig() {
  SharedDtor();
}

void PartConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartConfig_descriptor_;
}

const PartConfig& PartConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PartConfig_2eproto();  return *default_instance_;
}

PartConfig* PartConfig::default_instance_ = NULL;

PartConfig* PartConfig::New() const {
  return new PartConfig;
}

void PartConfig::Clear() {
  part_.Clear();
  joint_.Clear();
  app_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PartDef part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_part()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_part;
        if (input->ExpectTag(18)) goto parse_joint;
        break;
      }
      
      // repeated .Joint joint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_joint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_joint;
        if (input->ExpectTag(26)) goto parse_app_group;
        break;
      }
      
      // repeated .AppearanceGroup app_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PartDef part = 1;
  for (int i = 0; i < this->part_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->part(i), output);
  }
  
  // repeated .Joint joint = 2;
  for (int i = 0; i < this->joint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joint(i), output);
  }
  
  // repeated .AppearanceGroup app_group = 3;
  for (int i = 0; i < this->app_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->app_group(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PartDef part = 1;
  for (int i = 0; i < this->part_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->part(i), target);
  }
  
  // repeated .Joint joint = 2;
  for (int i = 0; i < this->joint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->joint(i), target);
  }
  
  // repeated .AppearanceGroup app_group = 3;
  for (int i = 0; i < this->app_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->app_group(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartConfig::ByteSize() const {
  int total_size = 0;
  
  // repeated .PartDef part = 1;
  total_size += 1 * this->part_size();
  for (int i = 0; i < this->part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->part(i));
  }
  
  // repeated .Joint joint = 2;
  total_size += 1 * this->joint_size();
  for (int i = 0; i < this->joint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joint(i));
  }
  
  // repeated .AppearanceGroup app_group = 3;
  total_size += 1 * this->app_group_size();
  for (int i = 0; i < this->app_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app_group(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartConfig::MergeFrom(const PartConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_.MergeFrom(from.part_);
  joint_.MergeFrom(from.joint_);
  app_group_.MergeFrom(from.app_group_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartConfig::CopyFrom(const PartConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartConfig::IsInitialized() const {
  
  return true;
}

void PartConfig::Swap(PartConfig* other) {
  if (other != this) {
    part_.Swap(&other->part_);
    joint_.Swap(&other->joint_);
    app_group_.Swap(&other->app_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartConfig_descriptor_;
  metadata.reflection = PartConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
