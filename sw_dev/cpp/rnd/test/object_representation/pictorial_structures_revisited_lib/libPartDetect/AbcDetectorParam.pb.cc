// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AbcDetectorParam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AbcDetectorParam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AbcDetectorParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbcDetectorParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AbcDetectorParam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_AbcDetectorParam_2eproto() {
  protobuf_AddDesc_AbcDetectorParam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AbcDetectorParam.proto");
  GOOGLE_CHECK(file != NULL);
  AbcDetectorParam_descriptor_ = file->message_type(0);
  static const int AbcDetectorParam_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, desc_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, desc_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, window_desc_step_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, boosting_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, num_train_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, num_train_neg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, feature_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, param_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, do_jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, bootstrap_fraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, feature_full_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, feature_orisize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, num_train_jitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, num_train_bootstrap_),
  };
  AbcDetectorParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AbcDetectorParam_descriptor_,
      AbcDetectorParam::internal_default_instance(),
      AbcDetectorParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, _has_bits_),
      -1,
      -1,
      sizeof(AbcDetectorParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbcDetectorParam, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AbcDetectorParam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AbcDetectorParam_descriptor_, AbcDetectorParam::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AbcDetectorParam_2eproto() {
  AbcDetectorParam_default_instance_.Shutdown();
  delete AbcDetectorParam_reflection_;
  delete AbcDetectorParam::_default_feature_type_;
}

void protobuf_InitDefaults_AbcDetectorParam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AbcDetectorParam::_default_feature_type_ =
      new ::std::string("SHAPE", 5);
  AbcDetectorParam_default_instance_.DefaultConstruct();
  AbcDetectorParam_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_AbcDetectorParam_2eproto_once_);
void protobuf_InitDefaults_AbcDetectorParam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_AbcDetectorParam_2eproto_once_,
                 &protobuf_InitDefaults_AbcDetectorParam_2eproto_impl);
}
void protobuf_AddDesc_AbcDetectorParam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_AbcDetectorParam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026AbcDetectorParam.proto\"\240\003\n\020AbcDetector"
    "Param\022\021\n\tdesc_size\030\002 \001(\005\022\021\n\tdesc_step\030\003 "
    "\001(\005\022!\n\026window_desc_step_ratio\030\004 \001(\001:\0011\022\034"
    "\n\017boosting_rounds\030\001 \001(\005:\003500\022\031\n\rnum_trai"
    "n_pos\030\006 \001(\005:\002-1\022\031\n\rnum_train_neg\030\010 \001(\005:\002"
    "-1\022\033\n\014feature_type\030\n \001(\t:\005SHAPE\022\030\n\rparam"
    "_version\030\013 \001(\005:\0010\022\027\n\tdo_jitter\030\014 \001(\010:\004tr"
    "ue\022\035\n\022bootstrap_fraction\030\016 \001(\001:\0010\022\'\n\030fea"
    "ture_full_orientation\030\017 \001(\010:\005false\022\032\n\017fe"
    "ature_orisize\030\021 \001(\005:\0018\022\033\n\020num_train_jitt"
    "er\030\007 \001(\005:\0010\022\036\n\023num_train_bootstrap\030\t \001(\005"
    ":\0010", 443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AbcDetectorParam.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AbcDetectorParam_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_AbcDetectorParam_2eproto_once_);
void protobuf_AddDesc_AbcDetectorParam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_AbcDetectorParam_2eproto_once_,
                 &protobuf_AddDesc_AbcDetectorParam_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AbcDetectorParam_2eproto {
  StaticDescriptorInitializer_AbcDetectorParam_2eproto() {
    protobuf_AddDesc_AbcDetectorParam_2eproto();
  }
} static_descriptor_initializer_AbcDetectorParam_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

::std::string* AbcDetectorParam::_default_feature_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbcDetectorParam::kDescSizeFieldNumber;
const int AbcDetectorParam::kDescStepFieldNumber;
const int AbcDetectorParam::kWindowDescStepRatioFieldNumber;
const int AbcDetectorParam::kBoostingRoundsFieldNumber;
const int AbcDetectorParam::kNumTrainPosFieldNumber;
const int AbcDetectorParam::kNumTrainNegFieldNumber;
const int AbcDetectorParam::kFeatureTypeFieldNumber;
const int AbcDetectorParam::kParamVersionFieldNumber;
const int AbcDetectorParam::kDoJitterFieldNumber;
const int AbcDetectorParam::kBootstrapFractionFieldNumber;
const int AbcDetectorParam::kFeatureFullOrientationFieldNumber;
const int AbcDetectorParam::kFeatureOrisizeFieldNumber;
const int AbcDetectorParam::kNumTrainJitterFieldNumber;
const int AbcDetectorParam::kNumTrainBootstrapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbcDetectorParam::AbcDetectorParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_AbcDetectorParam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:AbcDetectorParam)
}

void AbcDetectorParam::InitAsDefaultInstance() {
}

AbcDetectorParam::AbcDetectorParam(const AbcDetectorParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AbcDetectorParam)
}

void AbcDetectorParam::SharedCtor() {
  _cached_size_ = 0;
  feature_type_.UnsafeSetDefault(_default_feature_type_);
  ::memset(&desc_size_, 0, reinterpret_cast<char*>(&num_train_bootstrap_) -
    reinterpret_cast<char*>(&desc_size_) + sizeof(num_train_bootstrap_));
  feature_orisize_ = 8;
  window_desc_step_ratio_ = 1;
  boosting_rounds_ = 500;
  num_train_pos_ = -1;
  num_train_neg_ = -1;
  do_jitter_ = true;
}

AbcDetectorParam::~AbcDetectorParam() {
  // @@protoc_insertion_point(destructor:AbcDetectorParam)
  SharedDtor();
}

void AbcDetectorParam::SharedDtor() {
  feature_type_.DestroyNoArena(_default_feature_type_);
}

void AbcDetectorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbcDetectorParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbcDetectorParam_descriptor_;
}

const AbcDetectorParam& AbcDetectorParam::default_instance() {
  protobuf_InitDefaults_AbcDetectorParam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AbcDetectorParam> AbcDetectorParam_default_instance_;

AbcDetectorParam* AbcDetectorParam::New(::google::protobuf::Arena* arena) const {
  AbcDetectorParam* n = new AbcDetectorParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbcDetectorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:AbcDetectorParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AbcDetectorParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AbcDetectorParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(desc_size_, param_version_);
    window_desc_step_ratio_ = 1;
    boosting_rounds_ = 500;
    num_train_pos_ = -1;
    num_train_neg_ = -1;
    if (has_feature_type()) {
      feature_type_.ClearToDefaultNoArena(_default_feature_type_);
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(feature_full_orientation_, num_train_bootstrap_);
    do_jitter_ = true;
    feature_orisize_ = 8;
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AbcDetectorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AbcDetectorParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boosting_rounds = 1 [default = 500];
      case 1: {
        if (tag == 8) {
          set_has_boosting_rounds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boosting_rounds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_desc_size;
        break;
      }

      // optional int32 desc_size = 2;
      case 2: {
        if (tag == 16) {
         parse_desc_size:
          set_has_desc_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desc_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_desc_step;
        break;
      }

      // optional int32 desc_step = 3;
      case 3: {
        if (tag == 24) {
         parse_desc_step:
          set_has_desc_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desc_step_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_window_desc_step_ratio;
        break;
      }

      // optional double window_desc_step_ratio = 4 [default = 1];
      case 4: {
        if (tag == 33) {
         parse_window_desc_step_ratio:
          set_has_window_desc_step_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_desc_step_ratio_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_train_pos;
        break;
      }

      // optional int32 num_train_pos = 6 [default = -1];
      case 6: {
        if (tag == 48) {
         parse_num_train_pos:
          set_has_num_train_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_train_pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_train_jitter;
        break;
      }

      // optional int32 num_train_jitter = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_num_train_jitter:
          set_has_num_train_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_train_jitter_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_train_neg;
        break;
      }

      // optional int32 num_train_neg = 8 [default = -1];
      case 8: {
        if (tag == 64) {
         parse_num_train_neg:
          set_has_num_train_neg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_train_neg_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_train_bootstrap;
        break;
      }

      // optional int32 num_train_bootstrap = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_num_train_bootstrap:
          set_has_num_train_bootstrap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_train_bootstrap_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_feature_type;
        break;
      }

      // optional string feature_type = 10 [default = "SHAPE"];
      case 10: {
        if (tag == 82) {
         parse_feature_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature_type().data(), this->feature_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AbcDetectorParam.feature_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_param_version;
        break;
      }

      // optional int32 param_version = 11 [default = 0];
      case 11: {
        if (tag == 88) {
         parse_param_version:
          set_has_param_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_do_jitter;
        break;
      }

      // optional bool do_jitter = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_do_jitter:
          set_has_do_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_jitter_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_bootstrap_fraction;
        break;
      }

      // optional double bootstrap_fraction = 14 [default = 0];
      case 14: {
        if (tag == 113) {
         parse_bootstrap_fraction:
          set_has_bootstrap_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bootstrap_fraction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_feature_full_orientation;
        break;
      }

      // optional bool feature_full_orientation = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_feature_full_orientation:
          set_has_feature_full_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_full_orientation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_feature_orisize;
        break;
      }

      // optional int32 feature_orisize = 17 [default = 8];
      case 17: {
        if (tag == 136) {
         parse_feature_orisize:
          set_has_feature_orisize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_orisize_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AbcDetectorParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AbcDetectorParam)
  return false;
#undef DO_
}

void AbcDetectorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AbcDetectorParam)
  // optional int32 boosting_rounds = 1 [default = 500];
  if (has_boosting_rounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boosting_rounds(), output);
  }

  // optional int32 desc_size = 2;
  if (has_desc_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desc_size(), output);
  }

  // optional int32 desc_step = 3;
  if (has_desc_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->desc_step(), output);
  }

  // optional double window_desc_step_ratio = 4 [default = 1];
  if (has_window_desc_step_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->window_desc_step_ratio(), output);
  }

  // optional int32 num_train_pos = 6 [default = -1];
  if (has_num_train_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_train_pos(), output);
  }

  // optional int32 num_train_jitter = 7 [default = 0];
  if (has_num_train_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->num_train_jitter(), output);
  }

  // optional int32 num_train_neg = 8 [default = -1];
  if (has_num_train_neg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_train_neg(), output);
  }

  // optional int32 num_train_bootstrap = 9 [default = 0];
  if (has_num_train_bootstrap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_train_bootstrap(), output);
  }

  // optional string feature_type = 10 [default = "SHAPE"];
  if (has_feature_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_type().data(), this->feature_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AbcDetectorParam.feature_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->feature_type(), output);
  }

  // optional int32 param_version = 11 [default = 0];
  if (has_param_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->param_version(), output);
  }

  // optional bool do_jitter = 12 [default = true];
  if (has_do_jitter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->do_jitter(), output);
  }

  // optional double bootstrap_fraction = 14 [default = 0];
  if (has_bootstrap_fraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->bootstrap_fraction(), output);
  }

  // optional bool feature_full_orientation = 15 [default = false];
  if (has_feature_full_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->feature_full_orientation(), output);
  }

  // optional int32 feature_orisize = 17 [default = 8];
  if (has_feature_orisize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->feature_orisize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AbcDetectorParam)
}

::google::protobuf::uint8* AbcDetectorParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AbcDetectorParam)
  // optional int32 boosting_rounds = 1 [default = 500];
  if (has_boosting_rounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boosting_rounds(), target);
  }

  // optional int32 desc_size = 2;
  if (has_desc_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desc_size(), target);
  }

  // optional int32 desc_step = 3;
  if (has_desc_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->desc_step(), target);
  }

  // optional double window_desc_step_ratio = 4 [default = 1];
  if (has_window_desc_step_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->window_desc_step_ratio(), target);
  }

  // optional int32 num_train_pos = 6 [default = -1];
  if (has_num_train_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_train_pos(), target);
  }

  // optional int32 num_train_jitter = 7 [default = 0];
  if (has_num_train_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->num_train_jitter(), target);
  }

  // optional int32 num_train_neg = 8 [default = -1];
  if (has_num_train_neg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_train_neg(), target);
  }

  // optional int32 num_train_bootstrap = 9 [default = 0];
  if (has_num_train_bootstrap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_train_bootstrap(), target);
  }

  // optional string feature_type = 10 [default = "SHAPE"];
  if (has_feature_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_type().data(), this->feature_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AbcDetectorParam.feature_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->feature_type(), target);
  }

  // optional int32 param_version = 11 [default = 0];
  if (has_param_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->param_version(), target);
  }

  // optional bool do_jitter = 12 [default = true];
  if (has_do_jitter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->do_jitter(), target);
  }

  // optional double bootstrap_fraction = 14 [default = 0];
  if (has_bootstrap_fraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->bootstrap_fraction(), target);
  }

  // optional bool feature_full_orientation = 15 [default = false];
  if (has_feature_full_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->feature_full_orientation(), target);
  }

  // optional int32 feature_orisize = 17 [default = 8];
  if (has_feature_orisize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->feature_orisize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AbcDetectorParam)
  return target;
}

size_t AbcDetectorParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AbcDetectorParam)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 desc_size = 2;
    if (has_desc_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desc_size());
    }

    // optional int32 desc_step = 3;
    if (has_desc_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desc_step());
    }

    // optional double window_desc_step_ratio = 4 [default = 1];
    if (has_window_desc_step_ratio()) {
      total_size += 1 + 8;
    }

    // optional int32 boosting_rounds = 1 [default = 500];
    if (has_boosting_rounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boosting_rounds());
    }

    // optional int32 num_train_pos = 6 [default = -1];
    if (has_num_train_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_train_pos());
    }

    // optional int32 num_train_neg = 8 [default = -1];
    if (has_num_train_neg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_train_neg());
    }

    // optional string feature_type = 10 [default = "SHAPE"];
    if (has_feature_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_type());
    }

    // optional int32 param_version = 11 [default = 0];
    if (has_param_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_version());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool do_jitter = 12 [default = true];
    if (has_do_jitter()) {
      total_size += 1 + 1;
    }

    // optional double bootstrap_fraction = 14 [default = 0];
    if (has_bootstrap_fraction()) {
      total_size += 1 + 8;
    }

    // optional bool feature_full_orientation = 15 [default = false];
    if (has_feature_full_orientation()) {
      total_size += 1 + 1;
    }

    // optional int32 feature_orisize = 17 [default = 8];
    if (has_feature_orisize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feature_orisize());
    }

    // optional int32 num_train_jitter = 7 [default = 0];
    if (has_num_train_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_train_jitter());
    }

    // optional int32 num_train_bootstrap = 9 [default = 0];
    if (has_num_train_bootstrap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_train_bootstrap());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbcDetectorParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AbcDetectorParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AbcDetectorParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbcDetectorParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AbcDetectorParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AbcDetectorParam)
    UnsafeMergeFrom(*source);
  }
}

void AbcDetectorParam::MergeFrom(const AbcDetectorParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AbcDetectorParam)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AbcDetectorParam::UnsafeMergeFrom(const AbcDetectorParam& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc_size()) {
      set_desc_size(from.desc_size());
    }
    if (from.has_desc_step()) {
      set_desc_step(from.desc_step());
    }
    if (from.has_window_desc_step_ratio()) {
      set_window_desc_step_ratio(from.window_desc_step_ratio());
    }
    if (from.has_boosting_rounds()) {
      set_boosting_rounds(from.boosting_rounds());
    }
    if (from.has_num_train_pos()) {
      set_num_train_pos(from.num_train_pos());
    }
    if (from.has_num_train_neg()) {
      set_num_train_neg(from.num_train_neg());
    }
    if (from.has_feature_type()) {
      set_has_feature_type();
      feature_type_.AssignWithDefault(_default_feature_type_, from.feature_type_);
    }
    if (from.has_param_version()) {
      set_param_version(from.param_version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_do_jitter()) {
      set_do_jitter(from.do_jitter());
    }
    if (from.has_bootstrap_fraction()) {
      set_bootstrap_fraction(from.bootstrap_fraction());
    }
    if (from.has_feature_full_orientation()) {
      set_feature_full_orientation(from.feature_full_orientation());
    }
    if (from.has_feature_orisize()) {
      set_feature_orisize(from.feature_orisize());
    }
    if (from.has_num_train_jitter()) {
      set_num_train_jitter(from.num_train_jitter());
    }
    if (from.has_num_train_bootstrap()) {
      set_num_train_bootstrap(from.num_train_bootstrap());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AbcDetectorParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AbcDetectorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbcDetectorParam::CopyFrom(const AbcDetectorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AbcDetectorParam)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AbcDetectorParam::IsInitialized() const {

  return true;
}

void AbcDetectorParam::Swap(AbcDetectorParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbcDetectorParam::InternalSwap(AbcDetectorParam* other) {
  std::swap(desc_size_, other->desc_size_);
  std::swap(desc_step_, other->desc_step_);
  std::swap(window_desc_step_ratio_, other->window_desc_step_ratio_);
  std::swap(boosting_rounds_, other->boosting_rounds_);
  std::swap(num_train_pos_, other->num_train_pos_);
  std::swap(num_train_neg_, other->num_train_neg_);
  feature_type_.Swap(&other->feature_type_);
  std::swap(param_version_, other->param_version_);
  std::swap(do_jitter_, other->do_jitter_);
  std::swap(bootstrap_fraction_, other->bootstrap_fraction_);
  std::swap(feature_full_orientation_, other->feature_full_orientation_);
  std::swap(feature_orisize_, other->feature_orisize_);
  std::swap(num_train_jitter_, other->num_train_jitter_);
  std::swap(num_train_bootstrap_, other->num_train_bootstrap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbcDetectorParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbcDetectorParam_descriptor_;
  metadata.reflection = AbcDetectorParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbcDetectorParam

// optional int32 desc_size = 2;
bool AbcDetectorParam::has_desc_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AbcDetectorParam::set_has_desc_size() {
  _has_bits_[0] |= 0x00000001u;
}
void AbcDetectorParam::clear_has_desc_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void AbcDetectorParam::clear_desc_size() {
  desc_size_ = 0;
  clear_has_desc_size();
}
::google::protobuf::int32 AbcDetectorParam::desc_size() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.desc_size)
  return desc_size_;
}
void AbcDetectorParam::set_desc_size(::google::protobuf::int32 value) {
  set_has_desc_size();
  desc_size_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.desc_size)
}

// optional int32 desc_step = 3;
bool AbcDetectorParam::has_desc_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AbcDetectorParam::set_has_desc_step() {
  _has_bits_[0] |= 0x00000002u;
}
void AbcDetectorParam::clear_has_desc_step() {
  _has_bits_[0] &= ~0x00000002u;
}
void AbcDetectorParam::clear_desc_step() {
  desc_step_ = 0;
  clear_has_desc_step();
}
::google::protobuf::int32 AbcDetectorParam::desc_step() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.desc_step)
  return desc_step_;
}
void AbcDetectorParam::set_desc_step(::google::protobuf::int32 value) {
  set_has_desc_step();
  desc_step_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.desc_step)
}

// optional double window_desc_step_ratio = 4 [default = 1];
bool AbcDetectorParam::has_window_desc_step_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AbcDetectorParam::set_has_window_desc_step_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
void AbcDetectorParam::clear_has_window_desc_step_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
void AbcDetectorParam::clear_window_desc_step_ratio() {
  window_desc_step_ratio_ = 1;
  clear_has_window_desc_step_ratio();
}
double AbcDetectorParam::window_desc_step_ratio() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.window_desc_step_ratio)
  return window_desc_step_ratio_;
}
void AbcDetectorParam::set_window_desc_step_ratio(double value) {
  set_has_window_desc_step_ratio();
  window_desc_step_ratio_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.window_desc_step_ratio)
}

// optional int32 boosting_rounds = 1 [default = 500];
bool AbcDetectorParam::has_boosting_rounds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AbcDetectorParam::set_has_boosting_rounds() {
  _has_bits_[0] |= 0x00000008u;
}
void AbcDetectorParam::clear_has_boosting_rounds() {
  _has_bits_[0] &= ~0x00000008u;
}
void AbcDetectorParam::clear_boosting_rounds() {
  boosting_rounds_ = 500;
  clear_has_boosting_rounds();
}
::google::protobuf::int32 AbcDetectorParam::boosting_rounds() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.boosting_rounds)
  return boosting_rounds_;
}
void AbcDetectorParam::set_boosting_rounds(::google::protobuf::int32 value) {
  set_has_boosting_rounds();
  boosting_rounds_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.boosting_rounds)
}

// optional int32 num_train_pos = 6 [default = -1];
bool AbcDetectorParam::has_num_train_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AbcDetectorParam::set_has_num_train_pos() {
  _has_bits_[0] |= 0x00000010u;
}
void AbcDetectorParam::clear_has_num_train_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
void AbcDetectorParam::clear_num_train_pos() {
  num_train_pos_ = -1;
  clear_has_num_train_pos();
}
::google::protobuf::int32 AbcDetectorParam::num_train_pos() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.num_train_pos)
  return num_train_pos_;
}
void AbcDetectorParam::set_num_train_pos(::google::protobuf::int32 value) {
  set_has_num_train_pos();
  num_train_pos_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.num_train_pos)
}

// optional int32 num_train_neg = 8 [default = -1];
bool AbcDetectorParam::has_num_train_neg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AbcDetectorParam::set_has_num_train_neg() {
  _has_bits_[0] |= 0x00000020u;
}
void AbcDetectorParam::clear_has_num_train_neg() {
  _has_bits_[0] &= ~0x00000020u;
}
void AbcDetectorParam::clear_num_train_neg() {
  num_train_neg_ = -1;
  clear_has_num_train_neg();
}
::google::protobuf::int32 AbcDetectorParam::num_train_neg() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.num_train_neg)
  return num_train_neg_;
}
void AbcDetectorParam::set_num_train_neg(::google::protobuf::int32 value) {
  set_has_num_train_neg();
  num_train_neg_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.num_train_neg)
}

// optional string feature_type = 10 [default = "SHAPE"];
bool AbcDetectorParam::has_feature_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AbcDetectorParam::set_has_feature_type() {
  _has_bits_[0] |= 0x00000040u;
}
void AbcDetectorParam::clear_has_feature_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void AbcDetectorParam::clear_feature_type() {
  feature_type_.ClearToDefaultNoArena(_default_feature_type_);
  clear_has_feature_type();
}
const ::std::string& AbcDetectorParam::feature_type() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.feature_type)
  return feature_type_.GetNoArena(_default_feature_type_);
}
void AbcDetectorParam::set_feature_type(const ::std::string& value) {
  set_has_feature_type();
  feature_type_.SetNoArena(_default_feature_type_, value);
  // @@protoc_insertion_point(field_set:AbcDetectorParam.feature_type)
}
void AbcDetectorParam::set_feature_type(const char* value) {
  set_has_feature_type();
  feature_type_.SetNoArena(_default_feature_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AbcDetectorParam.feature_type)
}
void AbcDetectorParam::set_feature_type(const char* value, size_t size) {
  set_has_feature_type();
  feature_type_.SetNoArena(_default_feature_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AbcDetectorParam.feature_type)
}
::std::string* AbcDetectorParam::mutable_feature_type() {
  set_has_feature_type();
  // @@protoc_insertion_point(field_mutable:AbcDetectorParam.feature_type)
  return feature_type_.MutableNoArena(_default_feature_type_);
}
::std::string* AbcDetectorParam::release_feature_type() {
  // @@protoc_insertion_point(field_release:AbcDetectorParam.feature_type)
  clear_has_feature_type();
  return feature_type_.ReleaseNoArena(_default_feature_type_);
}
void AbcDetectorParam::set_allocated_feature_type(::std::string* feature_type) {
  if (feature_type != NULL) {
    set_has_feature_type();
  } else {
    clear_has_feature_type();
  }
  feature_type_.SetAllocatedNoArena(_default_feature_type_, feature_type);
  // @@protoc_insertion_point(field_set_allocated:AbcDetectorParam.feature_type)
}

// optional int32 param_version = 11 [default = 0];
bool AbcDetectorParam::has_param_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AbcDetectorParam::set_has_param_version() {
  _has_bits_[0] |= 0x00000080u;
}
void AbcDetectorParam::clear_has_param_version() {
  _has_bits_[0] &= ~0x00000080u;
}
void AbcDetectorParam::clear_param_version() {
  param_version_ = 0;
  clear_has_param_version();
}
::google::protobuf::int32 AbcDetectorParam::param_version() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.param_version)
  return param_version_;
}
void AbcDetectorParam::set_param_version(::google::protobuf::int32 value) {
  set_has_param_version();
  param_version_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.param_version)
}

// optional bool do_jitter = 12 [default = true];
bool AbcDetectorParam::has_do_jitter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AbcDetectorParam::set_has_do_jitter() {
  _has_bits_[0] |= 0x00000100u;
}
void AbcDetectorParam::clear_has_do_jitter() {
  _has_bits_[0] &= ~0x00000100u;
}
void AbcDetectorParam::clear_do_jitter() {
  do_jitter_ = true;
  clear_has_do_jitter();
}
bool AbcDetectorParam::do_jitter() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.do_jitter)
  return do_jitter_;
}
void AbcDetectorParam::set_do_jitter(bool value) {
  set_has_do_jitter();
  do_jitter_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.do_jitter)
}

// optional double bootstrap_fraction = 14 [default = 0];
bool AbcDetectorParam::has_bootstrap_fraction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AbcDetectorParam::set_has_bootstrap_fraction() {
  _has_bits_[0] |= 0x00000200u;
}
void AbcDetectorParam::clear_has_bootstrap_fraction() {
  _has_bits_[0] &= ~0x00000200u;
}
void AbcDetectorParam::clear_bootstrap_fraction() {
  bootstrap_fraction_ = 0;
  clear_has_bootstrap_fraction();
}
double AbcDetectorParam::bootstrap_fraction() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.bootstrap_fraction)
  return bootstrap_fraction_;
}
void AbcDetectorParam::set_bootstrap_fraction(double value) {
  set_has_bootstrap_fraction();
  bootstrap_fraction_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.bootstrap_fraction)
}

// optional bool feature_full_orientation = 15 [default = false];
bool AbcDetectorParam::has_feature_full_orientation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AbcDetectorParam::set_has_feature_full_orientation() {
  _has_bits_[0] |= 0x00000400u;
}
void AbcDetectorParam::clear_has_feature_full_orientation() {
  _has_bits_[0] &= ~0x00000400u;
}
void AbcDetectorParam::clear_feature_full_orientation() {
  feature_full_orientation_ = false;
  clear_has_feature_full_orientation();
}
bool AbcDetectorParam::feature_full_orientation() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.feature_full_orientation)
  return feature_full_orientation_;
}
void AbcDetectorParam::set_feature_full_orientation(bool value) {
  set_has_feature_full_orientation();
  feature_full_orientation_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.feature_full_orientation)
}

// optional int32 feature_orisize = 17 [default = 8];
bool AbcDetectorParam::has_feature_orisize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AbcDetectorParam::set_has_feature_orisize() {
  _has_bits_[0] |= 0x00000800u;
}
void AbcDetectorParam::clear_has_feature_orisize() {
  _has_bits_[0] &= ~0x00000800u;
}
void AbcDetectorParam::clear_feature_orisize() {
  feature_orisize_ = 8;
  clear_has_feature_orisize();
}
::google::protobuf::int32 AbcDetectorParam::feature_orisize() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.feature_orisize)
  return feature_orisize_;
}
void AbcDetectorParam::set_feature_orisize(::google::protobuf::int32 value) {
  set_has_feature_orisize();
  feature_orisize_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.feature_orisize)
}

// optional int32 num_train_jitter = 7 [default = 0];
bool AbcDetectorParam::has_num_train_jitter() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AbcDetectorParam::set_has_num_train_jitter() {
  _has_bits_[0] |= 0x00001000u;
}
void AbcDetectorParam::clear_has_num_train_jitter() {
  _has_bits_[0] &= ~0x00001000u;
}
void AbcDetectorParam::clear_num_train_jitter() {
  num_train_jitter_ = 0;
  clear_has_num_train_jitter();
}
::google::protobuf::int32 AbcDetectorParam::num_train_jitter() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.num_train_jitter)
  return num_train_jitter_;
}
void AbcDetectorParam::set_num_train_jitter(::google::protobuf::int32 value) {
  set_has_num_train_jitter();
  num_train_jitter_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.num_train_jitter)
}

// optional int32 num_train_bootstrap = 9 [default = 0];
bool AbcDetectorParam::has_num_train_bootstrap() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AbcDetectorParam::set_has_num_train_bootstrap() {
  _has_bits_[0] |= 0x00002000u;
}
void AbcDetectorParam::clear_has_num_train_bootstrap() {
  _has_bits_[0] &= ~0x00002000u;
}
void AbcDetectorParam::clear_num_train_bootstrap() {
  num_train_bootstrap_ = 0;
  clear_has_num_train_bootstrap();
}
::google::protobuf::int32 AbcDetectorParam::num_train_bootstrap() const {
  // @@protoc_insertion_point(field_get:AbcDetectorParam.num_train_bootstrap)
  return num_train_bootstrap_;
}
void AbcDetectorParam::set_num_train_bootstrap(::google::protobuf::int32 value) {
  set_has_num_train_bootstrap();
  num_train_bootstrap_ = value;
  // @@protoc_insertion_point(field_set:AbcDetectorParam.num_train_bootstrap)
}

inline const AbcDetectorParam* AbcDetectorParam::internal_default_instance() {
  return &AbcDetectorParam_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
