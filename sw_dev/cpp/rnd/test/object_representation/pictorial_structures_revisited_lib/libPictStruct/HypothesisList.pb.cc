// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HypothesisList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HypothesisList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HypothesisList_reflection_ = NULL;
const ::google::protobuf::Descriptor* HypothesisList_ObjectHypothesis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HypothesisList_ObjectHypothesis_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HypothesisList_2eproto() {
  protobuf_AddDesc_HypothesisList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HypothesisList.proto");
  GOOGLE_CHECK(file != NULL);
  HypothesisList_descriptor_ = file->message_type(0);
  static const int HypothesisList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList, hyp_),
  };
  HypothesisList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HypothesisList_descriptor_,
      HypothesisList::default_instance_,
      HypothesisList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HypothesisList));
  HypothesisList_ObjectHypothesis_descriptor_ = HypothesisList_descriptor_->nested_type(0);
  static const int HypothesisList_ObjectHypothesis_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList_ObjectHypothesis, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList_ObjectHypothesis, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList_ObjectHypothesis, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList_ObjectHypothesis, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList_ObjectHypothesis, flip_),
  };
  HypothesisList_ObjectHypothesis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HypothesisList_ObjectHypothesis_descriptor_,
      HypothesisList_ObjectHypothesis::default_instance_,
      HypothesisList_ObjectHypothesis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList_ObjectHypothesis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HypothesisList_ObjectHypothesis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HypothesisList_ObjectHypothesis));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HypothesisList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HypothesisList_descriptor_, &HypothesisList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HypothesisList_ObjectHypothesis_descriptor_, &HypothesisList_ObjectHypothesis::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HypothesisList_2eproto() {
  delete HypothesisList::default_instance_;
  delete HypothesisList_reflection_;
  delete HypothesisList_ObjectHypothesis::default_instance_;
  delete HypothesisList_ObjectHypothesis_reflection_;
}

void protobuf_AddDesc_HypothesisList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024HypothesisList.proto\"\234\001\n\016HypothesisLis"
    "t\022-\n\003hyp\030\001 \003(\0132 .HypothesisList.ObjectHy"
    "pothesis\032[\n\020ObjectHypothesis\022\t\n\001x\030\001 \001(\002\022"
    "\t\n\001y\030\002 \001(\002\022\r\n\005scale\030\003 \001(\002\022\r\n\005score\030\004 \001(\002"
    "\022\023\n\004flip\030\005 \001(\010:\005false", 181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HypothesisList.proto", &protobuf_RegisterTypes);
  HypothesisList::default_instance_ = new HypothesisList();
  HypothesisList_ObjectHypothesis::default_instance_ = new HypothesisList_ObjectHypothesis();
  HypothesisList::default_instance_->InitAsDefaultInstance();
  HypothesisList_ObjectHypothesis::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HypothesisList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HypothesisList_2eproto {
  StaticDescriptorInitializer_HypothesisList_2eproto() {
    protobuf_AddDesc_HypothesisList_2eproto();
  }
} static_descriptor_initializer_HypothesisList_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HypothesisList_ObjectHypothesis::kXFieldNumber;
const int HypothesisList_ObjectHypothesis::kYFieldNumber;
const int HypothesisList_ObjectHypothesis::kScaleFieldNumber;
const int HypothesisList_ObjectHypothesis::kScoreFieldNumber;
const int HypothesisList_ObjectHypothesis::kFlipFieldNumber;
#endif  // !_MSC_VER

HypothesisList_ObjectHypothesis::HypothesisList_ObjectHypothesis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HypothesisList_ObjectHypothesis::InitAsDefaultInstance() {
}

HypothesisList_ObjectHypothesis::HypothesisList_ObjectHypothesis(const HypothesisList_ObjectHypothesis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HypothesisList_ObjectHypothesis::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  scale_ = 0;
  score_ = 0;
  flip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HypothesisList_ObjectHypothesis::~HypothesisList_ObjectHypothesis() {
  SharedDtor();
}

void HypothesisList_ObjectHypothesis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HypothesisList_ObjectHypothesis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HypothesisList_ObjectHypothesis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HypothesisList_ObjectHypothesis_descriptor_;
}

const HypothesisList_ObjectHypothesis& HypothesisList_ObjectHypothesis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HypothesisList_2eproto();  return *default_instance_;
}

HypothesisList_ObjectHypothesis* HypothesisList_ObjectHypothesis::default_instance_ = NULL;

HypothesisList_ObjectHypothesis* HypothesisList_ObjectHypothesis::New() const {
  return new HypothesisList_ObjectHypothesis;
}

void HypothesisList_ObjectHypothesis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    scale_ = 0;
    score_ = 0;
    flip_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HypothesisList_ObjectHypothesis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_scale;
        break;
      }
      
      // optional float scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_score;
        break;
      }
      
      // optional float score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flip;
        break;
      }
      
      // optional bool flip = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_)));
          set_has_flip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HypothesisList_ObjectHypothesis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float scale = 3;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scale(), output);
  }
  
  // optional float score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score(), output);
  }
  
  // optional bool flip = 5 [default = false];
  if (has_flip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HypothesisList_ObjectHypothesis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float scale = 3;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scale(), target);
  }
  
  // optional float score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->score(), target);
  }
  
  // optional bool flip = 5 [default = false];
  if (has_flip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HypothesisList_ObjectHypothesis::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float scale = 3;
    if (has_scale()) {
      total_size += 1 + 4;
    }
    
    // optional float score = 4;
    if (has_score()) {
      total_size += 1 + 4;
    }
    
    // optional bool flip = 5 [default = false];
    if (has_flip()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HypothesisList_ObjectHypothesis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HypothesisList_ObjectHypothesis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HypothesisList_ObjectHypothesis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HypothesisList_ObjectHypothesis::MergeFrom(const HypothesisList_ObjectHypothesis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_flip()) {
      set_flip(from.flip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HypothesisList_ObjectHypothesis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HypothesisList_ObjectHypothesis::CopyFrom(const HypothesisList_ObjectHypothesis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HypothesisList_ObjectHypothesis::IsInitialized() const {
  
  return true;
}

void HypothesisList_ObjectHypothesis::Swap(HypothesisList_ObjectHypothesis* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(scale_, other->scale_);
    std::swap(score_, other->score_);
    std::swap(flip_, other->flip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HypothesisList_ObjectHypothesis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HypothesisList_ObjectHypothesis_descriptor_;
  metadata.reflection = HypothesisList_ObjectHypothesis_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HypothesisList::kHypFieldNumber;
#endif  // !_MSC_VER

HypothesisList::HypothesisList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HypothesisList::InitAsDefaultInstance() {
}

HypothesisList::HypothesisList(const HypothesisList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HypothesisList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HypothesisList::~HypothesisList() {
  SharedDtor();
}

void HypothesisList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HypothesisList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HypothesisList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HypothesisList_descriptor_;
}

const HypothesisList& HypothesisList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HypothesisList_2eproto();  return *default_instance_;
}

HypothesisList* HypothesisList::default_instance_ = NULL;

HypothesisList* HypothesisList::New() const {
  return new HypothesisList;
}

void HypothesisList::Clear() {
  hyp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HypothesisList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HypothesisList.ObjectHypothesis hyp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hyp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hyp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hyp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HypothesisList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HypothesisList.ObjectHypothesis hyp = 1;
  for (int i = 0; i < this->hyp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hyp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HypothesisList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HypothesisList.ObjectHypothesis hyp = 1;
  for (int i = 0; i < this->hyp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hyp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HypothesisList::ByteSize() const {
  int total_size = 0;
  
  // repeated .HypothesisList.ObjectHypothesis hyp = 1;
  total_size += 1 * this->hyp_size();
  for (int i = 0; i < this->hyp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hyp(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HypothesisList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HypothesisList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HypothesisList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HypothesisList::MergeFrom(const HypothesisList& from) {
  GOOGLE_CHECK_NE(&from, this);
  hyp_.MergeFrom(from.hyp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HypothesisList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HypothesisList::CopyFrom(const HypothesisList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HypothesisList::IsInitialized() const {
  
  return true;
}

void HypothesisList::Swap(HypothesisList* other) {
  if (other != this) {
    hyp_.Swap(&other->hyp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HypothesisList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HypothesisList_descriptor_;
  metadata.reflection = HypothesisList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
