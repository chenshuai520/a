// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExpParam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExpParam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ExpParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExpParam_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ExpParam_2eproto() {
  protobuf_AddDesc_ExpParam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExpParam.proto");
  GOOGLE_CHECK(file != NULL);
  ExpParam_descriptor_ = file->message_type(0);
  static const int ExpParam_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, train_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, validation_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, test_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, log_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, log_subdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, class_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scoregrid_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, partprob_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, part_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, abc_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, min_object_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, max_object_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_scale_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, min_part_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, max_part_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_rotation_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, flip_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_nbins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_def_pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_def_ph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_minval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_maxval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, object_height_width_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, compute_part_marginals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_pose_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, strip_border_detections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, save_image_scoregrid_),
  };
  ExpParam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExpParam_descriptor_,
      ExpParam::internal_default_instance(),
      ExpParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, _has_bits_),
      -1,
      -1,
      sizeof(ExpParam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExpParam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExpParam_descriptor_, ExpParam::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExpParam_2eproto() {
  ExpParam_default_instance_.Shutdown();
  delete ExpParam_reflection_;
}

void protobuf_InitDefaults_ExpParam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ExpParam_default_instance_.DefaultConstruct();
  ExpParam_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ExpParam_2eproto_once_);
void protobuf_InitDefaults_ExpParam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ExpParam_2eproto_once_,
                 &protobuf_InitDefaults_ExpParam_2eproto_impl);
}
void protobuf_AddDesc_ExpParam_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ExpParam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ExpParam.proto\"\375\005\n\010ExpParam\022\025\n\rtrain_d"
    "ataset\030\001 \003(\t\022\032\n\022validation_dataset\030\010 \003(\t"
    "\022\024\n\014test_dataset\030\002 \003(\t\022\017\n\007log_dir\030\003 \001(\t\022"
    "\022\n\nlog_subdir\030\007 \001(\t\022\021\n\tclass_dir\030\004 \001(\t\022\025"
    "\n\rscoregrid_dir\030\020 \001(\t\022\024\n\014partprob_dir\030\021 "
    "\001(\t\022\021\n\tpart_conf\030\005 \001(\t\022\021\n\tabc_param\030\006 \001("
    "\t\022\033\n\020min_object_scale\030\t \001(\002:\0011\022\033\n\020max_ob"
    "ject_scale\030\n \001(\002:\0011\022\032\n\017num_scale_steps\030\013"
    " \001(\r:\0011\022\034\n\021min_part_rotation\030\014 \001(\002:\0010\022\034\n"
    "\021max_part_rotation\030\r \001(\002:\0010\022\035\n\022num_rotat"
    "ion_steps\030\016 \001(\r:\0011\022\037\n\020flip_orientation\030\017"
    " \001(\010:\005false\022\033\n\017scorehist_nbins\030\022 \001(\r:\00220"
    "\022\034\n\020scorehist_def_pw\030\023 \001(\r:\00210\022\034\n\020scoreh"
    "ist_def_ph\030\024 \001(\r:\00210\022\036\n\020scorehist_minval"
    "\030\032 \001(\001:\004-0.5\022\035\n\020scorehist_maxval\030\033 \001(\001:\003"
    "0.5\022&\n\031object_height_width_ratio\030\025 \001(\002:\003"
    "2.5\022%\n\026compute_part_marginals\030\026 \001(\010:\005fal"
    "se\022\033\n\020num_pose_samples\030\027 \001(\005:\0010\022\"\n\027strip"
    "_border_detections\030\030 \001(\002:\0010\022#\n\024save_imag"
    "e_scoregrid\030\031 \001(\010:\005false", 784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExpParam.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExpParam_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ExpParam_2eproto_once_);
void protobuf_AddDesc_ExpParam_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ExpParam_2eproto_once_,
                 &protobuf_AddDesc_ExpParam_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExpParam_2eproto {
  StaticDescriptorInitializer_ExpParam_2eproto() {
    protobuf_AddDesc_ExpParam_2eproto();
  }
} static_descriptor_initializer_ExpParam_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExpParam::kTrainDatasetFieldNumber;
const int ExpParam::kValidationDatasetFieldNumber;
const int ExpParam::kTestDatasetFieldNumber;
const int ExpParam::kLogDirFieldNumber;
const int ExpParam::kLogSubdirFieldNumber;
const int ExpParam::kClassDirFieldNumber;
const int ExpParam::kScoregridDirFieldNumber;
const int ExpParam::kPartprobDirFieldNumber;
const int ExpParam::kPartConfFieldNumber;
const int ExpParam::kAbcParamFieldNumber;
const int ExpParam::kMinObjectScaleFieldNumber;
const int ExpParam::kMaxObjectScaleFieldNumber;
const int ExpParam::kNumScaleStepsFieldNumber;
const int ExpParam::kMinPartRotationFieldNumber;
const int ExpParam::kMaxPartRotationFieldNumber;
const int ExpParam::kNumRotationStepsFieldNumber;
const int ExpParam::kFlipOrientationFieldNumber;
const int ExpParam::kScorehistNbinsFieldNumber;
const int ExpParam::kScorehistDefPwFieldNumber;
const int ExpParam::kScorehistDefPhFieldNumber;
const int ExpParam::kScorehistMinvalFieldNumber;
const int ExpParam::kScorehistMaxvalFieldNumber;
const int ExpParam::kObjectHeightWidthRatioFieldNumber;
const int ExpParam::kComputePartMarginalsFieldNumber;
const int ExpParam::kNumPoseSamplesFieldNumber;
const int ExpParam::kStripBorderDetectionsFieldNumber;
const int ExpParam::kSaveImageScoregridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExpParam::ExpParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ExpParam_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExpParam)
}

void ExpParam::InitAsDefaultInstance() {
}

ExpParam::ExpParam(const ExpParam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExpParam)
}

void ExpParam::SharedCtor() {
  _cached_size_ = 0;
  log_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_subdir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scoregrid_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partprob_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_conf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abc_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_part_rotation_, 0, reinterpret_cast<char*>(&strip_border_detections_) -
    reinterpret_cast<char*>(&min_part_rotation_) + sizeof(strip_border_detections_));
  min_object_scale_ = 1;
  max_object_scale_ = 1;
  num_scale_steps_ = 1u;
  num_rotation_steps_ = 1u;
  scorehist_nbins_ = 20u;
  scorehist_def_pw_ = 10u;
  scorehist_minval_ = -0.5;
  scorehist_def_ph_ = 10u;
  object_height_width_ratio_ = 2.5f;
  scorehist_maxval_ = 0.5;
}

ExpParam::~ExpParam() {
  // @@protoc_insertion_point(destructor:ExpParam)
  SharedDtor();
}

void ExpParam::SharedDtor() {
  log_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_subdir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scoregrid_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partprob_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_conf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abc_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExpParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpParam_descriptor_;
}

const ExpParam& ExpParam::default_instance() {
  protobuf_InitDefaults_ExpParam_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExpParam> ExpParam_default_instance_;

ExpParam* ExpParam::New(::google::protobuf::Arena* arena) const {
  ExpParam* n = new ExpParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExpParam::Clear() {
// @@protoc_insertion_point(message_clear_start:ExpParam)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ExpParam, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExpParam*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 248u) {
    if (has_log_dir()) {
      log_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_log_subdir()) {
      log_subdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_class_dir()) {
      class_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_scoregrid_dir()) {
      scoregrid_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_partprob_dir()) {
      partprob_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(min_part_rotation_, max_part_rotation_);
    if (has_part_conf()) {
      part_conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_abc_param()) {
      abc_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    min_object_scale_ = 1;
    max_object_scale_ = 1;
    num_scale_steps_ = 1u;
    num_rotation_steps_ = 1u;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(flip_orientation_, compute_part_marginals_);
    scorehist_nbins_ = 20u;
    scorehist_def_pw_ = 10u;
    scorehist_def_ph_ = 10u;
    scorehist_minval_ = -0.5;
    scorehist_maxval_ = 0.5;
    object_height_width_ratio_ = 2.5f;
  }
  ZR_(save_image_scoregrid_, strip_border_detections_);

#undef ZR_HELPER_
#undef ZR_

  train_dataset_.Clear();
  validation_dataset_.Clear();
  test_dataset_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExpParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExpParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string train_dataset = 1;
      case 1: {
        if (tag == 10) {
         parse_train_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_train_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_dataset(this->train_dataset_size() - 1).data(),
            this->train_dataset(this->train_dataset_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.train_dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_train_dataset;
        if (input->ExpectTag(18)) goto parse_test_dataset;
        break;
      }

      // repeated string test_dataset = 2;
      case 2: {
        if (tag == 18) {
         parse_test_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test_dataset(this->test_dataset_size() - 1).data(),
            this->test_dataset(this->test_dataset_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.test_dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_dataset;
        if (input->ExpectTag(26)) goto parse_log_dir;
        break;
      }

      // optional string log_dir = 3;
      case 3: {
        if (tag == 26) {
         parse_log_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_dir().data(), this->log_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.log_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_class_dir;
        break;
      }

      // optional string class_dir = 4;
      case 4: {
        if (tag == 34) {
         parse_class_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_dir().data(), this->class_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.class_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_part_conf;
        break;
      }

      // optional string part_conf = 5;
      case 5: {
        if (tag == 42) {
         parse_part_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_conf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->part_conf().data(), this->part_conf().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.part_conf");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_abc_param;
        break;
      }

      // optional string abc_param = 6;
      case 6: {
        if (tag == 50) {
         parse_abc_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abc_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->abc_param().data(), this->abc_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.abc_param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_log_subdir;
        break;
      }

      // optional string log_subdir = 7;
      case 7: {
        if (tag == 58) {
         parse_log_subdir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_subdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_subdir().data(), this->log_subdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.log_subdir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_validation_dataset;
        break;
      }

      // repeated string validation_dataset = 8;
      case 8: {
        if (tag == 66) {
         parse_validation_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_validation_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->validation_dataset(this->validation_dataset_size() - 1).data(),
            this->validation_dataset(this->validation_dataset_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.validation_dataset");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_validation_dataset;
        if (input->ExpectTag(77)) goto parse_min_object_scale;
        break;
      }

      // optional float min_object_scale = 9 [default = 1];
      case 9: {
        if (tag == 77) {
         parse_min_object_scale:
          set_has_min_object_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_max_object_scale;
        break;
      }

      // optional float max_object_scale = 10 [default = 1];
      case 10: {
        if (tag == 85) {
         parse_max_object_scale:
          set_has_max_object_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_object_scale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num_scale_steps;
        break;
      }

      // optional uint32 num_scale_steps = 11 [default = 1];
      case 11: {
        if (tag == 88) {
         parse_num_scale_steps:
          set_has_num_scale_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_scale_steps_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_min_part_rotation;
        break;
      }

      // optional float min_part_rotation = 12 [default = 0];
      case 12: {
        if (tag == 101) {
         parse_min_part_rotation:
          set_has_min_part_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_part_rotation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_max_part_rotation;
        break;
      }

      // optional float max_part_rotation = 13 [default = 0];
      case 13: {
        if (tag == 109) {
         parse_max_part_rotation:
          set_has_max_part_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_part_rotation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_num_rotation_steps;
        break;
      }

      // optional uint32 num_rotation_steps = 14 [default = 1];
      case 14: {
        if (tag == 112) {
         parse_num_rotation_steps:
          set_has_num_rotation_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rotation_steps_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_flip_orientation;
        break;
      }

      // optional bool flip_orientation = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_flip_orientation:
          set_has_flip_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_orientation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_scoregrid_dir;
        break;
      }

      // optional string scoregrid_dir = 16;
      case 16: {
        if (tag == 130) {
         parse_scoregrid_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scoregrid_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scoregrid_dir().data(), this->scoregrid_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.scoregrid_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_partprob_dir;
        break;
      }

      // optional string partprob_dir = 17;
      case 17: {
        if (tag == 138) {
         parse_partprob_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partprob_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partprob_dir().data(), this->partprob_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ExpParam.partprob_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_scorehist_nbins;
        break;
      }

      // optional uint32 scorehist_nbins = 18 [default = 20];
      case 18: {
        if (tag == 144) {
         parse_scorehist_nbins:
          set_has_scorehist_nbins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scorehist_nbins_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_scorehist_def_pw;
        break;
      }

      // optional uint32 scorehist_def_pw = 19 [default = 10];
      case 19: {
        if (tag == 152) {
         parse_scorehist_def_pw:
          set_has_scorehist_def_pw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scorehist_def_pw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_scorehist_def_ph;
        break;
      }

      // optional uint32 scorehist_def_ph = 20 [default = 10];
      case 20: {
        if (tag == 160) {
         parse_scorehist_def_ph:
          set_has_scorehist_def_ph();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scorehist_def_ph_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_object_height_width_ratio;
        break;
      }

      // optional float object_height_width_ratio = 21 [default = 2.5];
      case 21: {
        if (tag == 173) {
         parse_object_height_width_ratio:
          set_has_object_height_width_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_height_width_ratio_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_compute_part_marginals;
        break;
      }

      // optional bool compute_part_marginals = 22 [default = false];
      case 22: {
        if (tag == 176) {
         parse_compute_part_marginals:
          set_has_compute_part_marginals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compute_part_marginals_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_num_pose_samples;
        break;
      }

      // optional int32 num_pose_samples = 23 [default = 0];
      case 23: {
        if (tag == 184) {
         parse_num_pose_samples:
          set_has_num_pose_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_pose_samples_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_strip_border_detections;
        break;
      }

      // optional float strip_border_detections = 24 [default = 0];
      case 24: {
        if (tag == 197) {
         parse_strip_border_detections:
          set_has_strip_border_detections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strip_border_detections_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_save_image_scoregrid;
        break;
      }

      // optional bool save_image_scoregrid = 25 [default = false];
      case 25: {
        if (tag == 200) {
         parse_save_image_scoregrid:
          set_has_save_image_scoregrid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_image_scoregrid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_scorehist_minval;
        break;
      }

      // optional double scorehist_minval = 26 [default = -0.5];
      case 26: {
        if (tag == 209) {
         parse_scorehist_minval:
          set_has_scorehist_minval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scorehist_minval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_scorehist_maxval;
        break;
      }

      // optional double scorehist_maxval = 27 [default = 0.5];
      case 27: {
        if (tag == 217) {
         parse_scorehist_maxval:
          set_has_scorehist_maxval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scorehist_maxval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExpParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExpParam)
  return false;
#undef DO_
}

void ExpParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExpParam)
  // repeated string train_dataset = 1;
  for (int i = 0; i < this->train_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_dataset(i).data(), this->train_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.train_dataset");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->train_dataset(i), output);
  }

  // repeated string test_dataset = 2;
  for (int i = 0; i < this->test_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_dataset(i).data(), this->test_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.test_dataset");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_dataset(i), output);
  }

  // optional string log_dir = 3;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.log_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->log_dir(), output);
  }

  // optional string class_dir = 4;
  if (has_class_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_dir().data(), this->class_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.class_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->class_dir(), output);
  }

  // optional string part_conf = 5;
  if (has_part_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->part_conf().data(), this->part_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.part_conf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->part_conf(), output);
  }

  // optional string abc_param = 6;
  if (has_abc_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abc_param().data(), this->abc_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.abc_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->abc_param(), output);
  }

  // optional string log_subdir = 7;
  if (has_log_subdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_subdir().data(), this->log_subdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.log_subdir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->log_subdir(), output);
  }

  // repeated string validation_dataset = 8;
  for (int i = 0; i < this->validation_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->validation_dataset(i).data(), this->validation_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.validation_dataset");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->validation_dataset(i), output);
  }

  // optional float min_object_scale = 9 [default = 1];
  if (has_min_object_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->min_object_scale(), output);
  }

  // optional float max_object_scale = 10 [default = 1];
  if (has_max_object_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->max_object_scale(), output);
  }

  // optional uint32 num_scale_steps = 11 [default = 1];
  if (has_num_scale_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num_scale_steps(), output);
  }

  // optional float min_part_rotation = 12 [default = 0];
  if (has_min_part_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->min_part_rotation(), output);
  }

  // optional float max_part_rotation = 13 [default = 0];
  if (has_max_part_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->max_part_rotation(), output);
  }

  // optional uint32 num_rotation_steps = 14 [default = 1];
  if (has_num_rotation_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->num_rotation_steps(), output);
  }

  // optional bool flip_orientation = 15 [default = false];
  if (has_flip_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->flip_orientation(), output);
  }

  // optional string scoregrid_dir = 16;
  if (has_scoregrid_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scoregrid_dir().data(), this->scoregrid_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.scoregrid_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->scoregrid_dir(), output);
  }

  // optional string partprob_dir = 17;
  if (has_partprob_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partprob_dir().data(), this->partprob_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.partprob_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->partprob_dir(), output);
  }

  // optional uint32 scorehist_nbins = 18 [default = 20];
  if (has_scorehist_nbins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->scorehist_nbins(), output);
  }

  // optional uint32 scorehist_def_pw = 19 [default = 10];
  if (has_scorehist_def_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->scorehist_def_pw(), output);
  }

  // optional uint32 scorehist_def_ph = 20 [default = 10];
  if (has_scorehist_def_ph()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->scorehist_def_ph(), output);
  }

  // optional float object_height_width_ratio = 21 [default = 2.5];
  if (has_object_height_width_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->object_height_width_ratio(), output);
  }

  // optional bool compute_part_marginals = 22 [default = false];
  if (has_compute_part_marginals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->compute_part_marginals(), output);
  }

  // optional int32 num_pose_samples = 23 [default = 0];
  if (has_num_pose_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->num_pose_samples(), output);
  }

  // optional float strip_border_detections = 24 [default = 0];
  if (has_strip_border_detections()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->strip_border_detections(), output);
  }

  // optional bool save_image_scoregrid = 25 [default = false];
  if (has_save_image_scoregrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->save_image_scoregrid(), output);
  }

  // optional double scorehist_minval = 26 [default = -0.5];
  if (has_scorehist_minval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->scorehist_minval(), output);
  }

  // optional double scorehist_maxval = 27 [default = 0.5];
  if (has_scorehist_maxval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->scorehist_maxval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExpParam)
}

::google::protobuf::uint8* ExpParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ExpParam)
  // repeated string train_dataset = 1;
  for (int i = 0; i < this->train_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_dataset(i).data(), this->train_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.train_dataset");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->train_dataset(i), target);
  }

  // repeated string test_dataset = 2;
  for (int i = 0; i < this->test_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test_dataset(i).data(), this->test_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.test_dataset");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_dataset(i), target);
  }

  // optional string log_dir = 3;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.log_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log_dir(), target);
  }

  // optional string class_dir = 4;
  if (has_class_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_dir().data(), this->class_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.class_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_dir(), target);
  }

  // optional string part_conf = 5;
  if (has_part_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->part_conf().data(), this->part_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.part_conf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->part_conf(), target);
  }

  // optional string abc_param = 6;
  if (has_abc_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->abc_param().data(), this->abc_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.abc_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->abc_param(), target);
  }

  // optional string log_subdir = 7;
  if (has_log_subdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_subdir().data(), this->log_subdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.log_subdir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->log_subdir(), target);
  }

  // repeated string validation_dataset = 8;
  for (int i = 0; i < this->validation_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->validation_dataset(i).data(), this->validation_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.validation_dataset");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->validation_dataset(i), target);
  }

  // optional float min_object_scale = 9 [default = 1];
  if (has_min_object_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->min_object_scale(), target);
  }

  // optional float max_object_scale = 10 [default = 1];
  if (has_max_object_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->max_object_scale(), target);
  }

  // optional uint32 num_scale_steps = 11 [default = 1];
  if (has_num_scale_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num_scale_steps(), target);
  }

  // optional float min_part_rotation = 12 [default = 0];
  if (has_min_part_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->min_part_rotation(), target);
  }

  // optional float max_part_rotation = 13 [default = 0];
  if (has_max_part_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->max_part_rotation(), target);
  }

  // optional uint32 num_rotation_steps = 14 [default = 1];
  if (has_num_rotation_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->num_rotation_steps(), target);
  }

  // optional bool flip_orientation = 15 [default = false];
  if (has_flip_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->flip_orientation(), target);
  }

  // optional string scoregrid_dir = 16;
  if (has_scoregrid_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scoregrid_dir().data(), this->scoregrid_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.scoregrid_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->scoregrid_dir(), target);
  }

  // optional string partprob_dir = 17;
  if (has_partprob_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partprob_dir().data(), this->partprob_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ExpParam.partprob_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->partprob_dir(), target);
  }

  // optional uint32 scorehist_nbins = 18 [default = 20];
  if (has_scorehist_nbins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->scorehist_nbins(), target);
  }

  // optional uint32 scorehist_def_pw = 19 [default = 10];
  if (has_scorehist_def_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->scorehist_def_pw(), target);
  }

  // optional uint32 scorehist_def_ph = 20 [default = 10];
  if (has_scorehist_def_ph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->scorehist_def_ph(), target);
  }

  // optional float object_height_width_ratio = 21 [default = 2.5];
  if (has_object_height_width_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->object_height_width_ratio(), target);
  }

  // optional bool compute_part_marginals = 22 [default = false];
  if (has_compute_part_marginals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->compute_part_marginals(), target);
  }

  // optional int32 num_pose_samples = 23 [default = 0];
  if (has_num_pose_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->num_pose_samples(), target);
  }

  // optional float strip_border_detections = 24 [default = 0];
  if (has_strip_border_detections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->strip_border_detections(), target);
  }

  // optional bool save_image_scoregrid = 25 [default = false];
  if (has_save_image_scoregrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->save_image_scoregrid(), target);
  }

  // optional double scorehist_minval = 26 [default = -0.5];
  if (has_scorehist_minval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->scorehist_minval(), target);
  }

  // optional double scorehist_maxval = 27 [default = 0.5];
  if (has_scorehist_maxval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->scorehist_maxval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExpParam)
  return target;
}

size_t ExpParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExpParam)
  size_t total_size = 0;

  if (_has_bits_[3 / 32] & 248u) {
    // optional string log_dir = 3;
    if (has_log_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_dir());
    }

    // optional string log_subdir = 7;
    if (has_log_subdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_subdir());
    }

    // optional string class_dir = 4;
    if (has_class_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_dir());
    }

    // optional string scoregrid_dir = 16;
    if (has_scoregrid_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scoregrid_dir());
    }

    // optional string partprob_dir = 17;
    if (has_partprob_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partprob_dir());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string part_conf = 5;
    if (has_part_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->part_conf());
    }

    // optional string abc_param = 6;
    if (has_abc_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abc_param());
    }

    // optional float min_object_scale = 9 [default = 1];
    if (has_min_object_scale()) {
      total_size += 1 + 4;
    }

    // optional float max_object_scale = 10 [default = 1];
    if (has_max_object_scale()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_scale_steps = 11 [default = 1];
    if (has_num_scale_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_scale_steps());
    }

    // optional float min_part_rotation = 12 [default = 0];
    if (has_min_part_rotation()) {
      total_size += 1 + 4;
    }

    // optional float max_part_rotation = 13 [default = 0];
    if (has_max_part_rotation()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_rotation_steps = 14 [default = 1];
    if (has_num_rotation_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rotation_steps());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool flip_orientation = 15 [default = false];
    if (has_flip_orientation()) {
      total_size += 1 + 1;
    }

    // optional uint32 scorehist_nbins = 18 [default = 20];
    if (has_scorehist_nbins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scorehist_nbins());
    }

    // optional uint32 scorehist_def_pw = 19 [default = 10];
    if (has_scorehist_def_pw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scorehist_def_pw());
    }

    // optional uint32 scorehist_def_ph = 20 [default = 10];
    if (has_scorehist_def_ph()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scorehist_def_ph());
    }

    // optional double scorehist_minval = 26 [default = -0.5];
    if (has_scorehist_minval()) {
      total_size += 2 + 8;
    }

    // optional double scorehist_maxval = 27 [default = 0.5];
    if (has_scorehist_maxval()) {
      total_size += 2 + 8;
    }

    // optional float object_height_width_ratio = 21 [default = 2.5];
    if (has_object_height_width_ratio()) {
      total_size += 2 + 4;
    }

    // optional bool compute_part_marginals = 22 [default = false];
    if (has_compute_part_marginals()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional int32 num_pose_samples = 23 [default = 0];
    if (has_num_pose_samples()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_pose_samples());
    }

    // optional float strip_border_detections = 24 [default = 0];
    if (has_strip_border_detections()) {
      total_size += 2 + 4;
    }

    // optional bool save_image_scoregrid = 25 [default = false];
    if (has_save_image_scoregrid()) {
      total_size += 2 + 1;
    }

  }
  // repeated string train_dataset = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->train_dataset_size());
  for (int i = 0; i < this->train_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->train_dataset(i));
  }

  // repeated string validation_dataset = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->validation_dataset_size());
  for (int i = 0; i < this->validation_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->validation_dataset(i));
  }

  // repeated string test_dataset = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->test_dataset_size());
  for (int i = 0; i < this->test_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_dataset(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ExpParam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExpParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExpParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ExpParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ExpParam)
    UnsafeMergeFrom(*source);
  }
}

void ExpParam::MergeFrom(const ExpParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExpParam)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExpParam::UnsafeMergeFrom(const ExpParam& from) {
  GOOGLE_DCHECK(&from != this);
  train_dataset_.UnsafeMergeFrom(from.train_dataset_);
  validation_dataset_.UnsafeMergeFrom(from.validation_dataset_);
  test_dataset_.UnsafeMergeFrom(from.test_dataset_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_log_dir()) {
      set_has_log_dir();
      log_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_dir_);
    }
    if (from.has_log_subdir()) {
      set_has_log_subdir();
      log_subdir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_subdir_);
    }
    if (from.has_class_dir()) {
      set_has_class_dir();
      class_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_dir_);
    }
    if (from.has_scoregrid_dir()) {
      set_has_scoregrid_dir();
      scoregrid_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scoregrid_dir_);
    }
    if (from.has_partprob_dir()) {
      set_has_partprob_dir();
      partprob_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partprob_dir_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_part_conf()) {
      set_has_part_conf();
      part_conf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_conf_);
    }
    if (from.has_abc_param()) {
      set_has_abc_param();
      abc_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.abc_param_);
    }
    if (from.has_min_object_scale()) {
      set_min_object_scale(from.min_object_scale());
    }
    if (from.has_max_object_scale()) {
      set_max_object_scale(from.max_object_scale());
    }
    if (from.has_num_scale_steps()) {
      set_num_scale_steps(from.num_scale_steps());
    }
    if (from.has_min_part_rotation()) {
      set_min_part_rotation(from.min_part_rotation());
    }
    if (from.has_max_part_rotation()) {
      set_max_part_rotation(from.max_part_rotation());
    }
    if (from.has_num_rotation_steps()) {
      set_num_rotation_steps(from.num_rotation_steps());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_flip_orientation()) {
      set_flip_orientation(from.flip_orientation());
    }
    if (from.has_scorehist_nbins()) {
      set_scorehist_nbins(from.scorehist_nbins());
    }
    if (from.has_scorehist_def_pw()) {
      set_scorehist_def_pw(from.scorehist_def_pw());
    }
    if (from.has_scorehist_def_ph()) {
      set_scorehist_def_ph(from.scorehist_def_ph());
    }
    if (from.has_scorehist_minval()) {
      set_scorehist_minval(from.scorehist_minval());
    }
    if (from.has_scorehist_maxval()) {
      set_scorehist_maxval(from.scorehist_maxval());
    }
    if (from.has_object_height_width_ratio()) {
      set_object_height_width_ratio(from.object_height_width_ratio());
    }
    if (from.has_compute_part_marginals()) {
      set_compute_part_marginals(from.compute_part_marginals());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_num_pose_samples()) {
      set_num_pose_samples(from.num_pose_samples());
    }
    if (from.has_strip_border_detections()) {
      set_strip_border_detections(from.strip_border_detections());
    }
    if (from.has_save_image_scoregrid()) {
      set_save_image_scoregrid(from.save_image_scoregrid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ExpParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ExpParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParam::CopyFrom(const ExpParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExpParam)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExpParam::IsInitialized() const {

  return true;
}

void ExpParam::Swap(ExpParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExpParam::InternalSwap(ExpParam* other) {
  train_dataset_.UnsafeArenaSwap(&other->train_dataset_);
  validation_dataset_.UnsafeArenaSwap(&other->validation_dataset_);
  test_dataset_.UnsafeArenaSwap(&other->test_dataset_);
  log_dir_.Swap(&other->log_dir_);
  log_subdir_.Swap(&other->log_subdir_);
  class_dir_.Swap(&other->class_dir_);
  scoregrid_dir_.Swap(&other->scoregrid_dir_);
  partprob_dir_.Swap(&other->partprob_dir_);
  part_conf_.Swap(&other->part_conf_);
  abc_param_.Swap(&other->abc_param_);
  std::swap(min_object_scale_, other->min_object_scale_);
  std::swap(max_object_scale_, other->max_object_scale_);
  std::swap(num_scale_steps_, other->num_scale_steps_);
  std::swap(min_part_rotation_, other->min_part_rotation_);
  std::swap(max_part_rotation_, other->max_part_rotation_);
  std::swap(num_rotation_steps_, other->num_rotation_steps_);
  std::swap(flip_orientation_, other->flip_orientation_);
  std::swap(scorehist_nbins_, other->scorehist_nbins_);
  std::swap(scorehist_def_pw_, other->scorehist_def_pw_);
  std::swap(scorehist_def_ph_, other->scorehist_def_ph_);
  std::swap(scorehist_minval_, other->scorehist_minval_);
  std::swap(scorehist_maxval_, other->scorehist_maxval_);
  std::swap(object_height_width_ratio_, other->object_height_width_ratio_);
  std::swap(compute_part_marginals_, other->compute_part_marginals_);
  std::swap(num_pose_samples_, other->num_pose_samples_);
  std::swap(strip_border_detections_, other->strip_border_detections_);
  std::swap(save_image_scoregrid_, other->save_image_scoregrid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExpParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpParam_descriptor_;
  metadata.reflection = ExpParam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpParam

// repeated string train_dataset = 1;
int ExpParam::train_dataset_size() const {
  return train_dataset_.size();
}
void ExpParam::clear_train_dataset() {
  train_dataset_.Clear();
}
const ::std::string& ExpParam::train_dataset(int index) const {
  // @@protoc_insertion_point(field_get:ExpParam.train_dataset)
  return train_dataset_.Get(index);
}
::std::string* ExpParam::mutable_train_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:ExpParam.train_dataset)
  return train_dataset_.Mutable(index);
}
void ExpParam::set_train_dataset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ExpParam.train_dataset)
  train_dataset_.Mutable(index)->assign(value);
}
void ExpParam::set_train_dataset(int index, const char* value) {
  train_dataset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExpParam.train_dataset)
}
void ExpParam::set_train_dataset(int index, const char* value, size_t size) {
  train_dataset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExpParam.train_dataset)
}
::std::string* ExpParam::add_train_dataset() {
  // @@protoc_insertion_point(field_add_mutable:ExpParam.train_dataset)
  return train_dataset_.Add();
}
void ExpParam::add_train_dataset(const ::std::string& value) {
  train_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExpParam.train_dataset)
}
void ExpParam::add_train_dataset(const char* value) {
  train_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExpParam.train_dataset)
}
void ExpParam::add_train_dataset(const char* value, size_t size) {
  train_dataset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExpParam.train_dataset)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExpParam::train_dataset() const {
  // @@protoc_insertion_point(field_list:ExpParam.train_dataset)
  return train_dataset_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExpParam::mutable_train_dataset() {
  // @@protoc_insertion_point(field_mutable_list:ExpParam.train_dataset)
  return &train_dataset_;
}

// repeated string validation_dataset = 8;
int ExpParam::validation_dataset_size() const {
  return validation_dataset_.size();
}
void ExpParam::clear_validation_dataset() {
  validation_dataset_.Clear();
}
const ::std::string& ExpParam::validation_dataset(int index) const {
  // @@protoc_insertion_point(field_get:ExpParam.validation_dataset)
  return validation_dataset_.Get(index);
}
::std::string* ExpParam::mutable_validation_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:ExpParam.validation_dataset)
  return validation_dataset_.Mutable(index);
}
void ExpParam::set_validation_dataset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ExpParam.validation_dataset)
  validation_dataset_.Mutable(index)->assign(value);
}
void ExpParam::set_validation_dataset(int index, const char* value) {
  validation_dataset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExpParam.validation_dataset)
}
void ExpParam::set_validation_dataset(int index, const char* value, size_t size) {
  validation_dataset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExpParam.validation_dataset)
}
::std::string* ExpParam::add_validation_dataset() {
  // @@protoc_insertion_point(field_add_mutable:ExpParam.validation_dataset)
  return validation_dataset_.Add();
}
void ExpParam::add_validation_dataset(const ::std::string& value) {
  validation_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExpParam.validation_dataset)
}
void ExpParam::add_validation_dataset(const char* value) {
  validation_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExpParam.validation_dataset)
}
void ExpParam::add_validation_dataset(const char* value, size_t size) {
  validation_dataset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExpParam.validation_dataset)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExpParam::validation_dataset() const {
  // @@protoc_insertion_point(field_list:ExpParam.validation_dataset)
  return validation_dataset_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExpParam::mutable_validation_dataset() {
  // @@protoc_insertion_point(field_mutable_list:ExpParam.validation_dataset)
  return &validation_dataset_;
}

// repeated string test_dataset = 2;
int ExpParam::test_dataset_size() const {
  return test_dataset_.size();
}
void ExpParam::clear_test_dataset() {
  test_dataset_.Clear();
}
const ::std::string& ExpParam::test_dataset(int index) const {
  // @@protoc_insertion_point(field_get:ExpParam.test_dataset)
  return test_dataset_.Get(index);
}
::std::string* ExpParam::mutable_test_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:ExpParam.test_dataset)
  return test_dataset_.Mutable(index);
}
void ExpParam::set_test_dataset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ExpParam.test_dataset)
  test_dataset_.Mutable(index)->assign(value);
}
void ExpParam::set_test_dataset(int index, const char* value) {
  test_dataset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExpParam.test_dataset)
}
void ExpParam::set_test_dataset(int index, const char* value, size_t size) {
  test_dataset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExpParam.test_dataset)
}
::std::string* ExpParam::add_test_dataset() {
  // @@protoc_insertion_point(field_add_mutable:ExpParam.test_dataset)
  return test_dataset_.Add();
}
void ExpParam::add_test_dataset(const ::std::string& value) {
  test_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExpParam.test_dataset)
}
void ExpParam::add_test_dataset(const char* value) {
  test_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExpParam.test_dataset)
}
void ExpParam::add_test_dataset(const char* value, size_t size) {
  test_dataset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExpParam.test_dataset)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExpParam::test_dataset() const {
  // @@protoc_insertion_point(field_list:ExpParam.test_dataset)
  return test_dataset_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ExpParam::mutable_test_dataset() {
  // @@protoc_insertion_point(field_mutable_list:ExpParam.test_dataset)
  return &test_dataset_;
}

// optional string log_dir = 3;
bool ExpParam::has_log_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ExpParam::set_has_log_dir() {
  _has_bits_[0] |= 0x00000008u;
}
void ExpParam::clear_has_log_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
void ExpParam::clear_log_dir() {
  log_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_dir();
}
const ::std::string& ExpParam::log_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.log_dir)
  return log_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_log_dir(const ::std::string& value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.log_dir)
}
void ExpParam::set_log_dir(const char* value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.log_dir)
}
void ExpParam::set_log_dir(const char* value, size_t size) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.log_dir)
}
::std::string* ExpParam::mutable_log_dir() {
  set_has_log_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.log_dir)
  return log_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpParam::release_log_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.log_dir)
  clear_has_log_dir();
  return log_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_allocated_log_dir(::std::string* log_dir) {
  if (log_dir != NULL) {
    set_has_log_dir();
  } else {
    clear_has_log_dir();
  }
  log_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.log_dir)
}

// optional string log_subdir = 7;
bool ExpParam::has_log_subdir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ExpParam::set_has_log_subdir() {
  _has_bits_[0] |= 0x00000010u;
}
void ExpParam::clear_has_log_subdir() {
  _has_bits_[0] &= ~0x00000010u;
}
void ExpParam::clear_log_subdir() {
  log_subdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_subdir();
}
const ::std::string& ExpParam::log_subdir() const {
  // @@protoc_insertion_point(field_get:ExpParam.log_subdir)
  return log_subdir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_log_subdir(const ::std::string& value) {
  set_has_log_subdir();
  log_subdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.log_subdir)
}
void ExpParam::set_log_subdir(const char* value) {
  set_has_log_subdir();
  log_subdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.log_subdir)
}
void ExpParam::set_log_subdir(const char* value, size_t size) {
  set_has_log_subdir();
  log_subdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.log_subdir)
}
::std::string* ExpParam::mutable_log_subdir() {
  set_has_log_subdir();
  // @@protoc_insertion_point(field_mutable:ExpParam.log_subdir)
  return log_subdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpParam::release_log_subdir() {
  // @@protoc_insertion_point(field_release:ExpParam.log_subdir)
  clear_has_log_subdir();
  return log_subdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_allocated_log_subdir(::std::string* log_subdir) {
  if (log_subdir != NULL) {
    set_has_log_subdir();
  } else {
    clear_has_log_subdir();
  }
  log_subdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_subdir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.log_subdir)
}

// optional string class_dir = 4;
bool ExpParam::has_class_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ExpParam::set_has_class_dir() {
  _has_bits_[0] |= 0x00000020u;
}
void ExpParam::clear_has_class_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
void ExpParam::clear_class_dir() {
  class_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_dir();
}
const ::std::string& ExpParam::class_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.class_dir)
  return class_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_class_dir(const ::std::string& value) {
  set_has_class_dir();
  class_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.class_dir)
}
void ExpParam::set_class_dir(const char* value) {
  set_has_class_dir();
  class_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.class_dir)
}
void ExpParam::set_class_dir(const char* value, size_t size) {
  set_has_class_dir();
  class_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.class_dir)
}
::std::string* ExpParam::mutable_class_dir() {
  set_has_class_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.class_dir)
  return class_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpParam::release_class_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.class_dir)
  clear_has_class_dir();
  return class_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_allocated_class_dir(::std::string* class_dir) {
  if (class_dir != NULL) {
    set_has_class_dir();
  } else {
    clear_has_class_dir();
  }
  class_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.class_dir)
}

// optional string scoregrid_dir = 16;
bool ExpParam::has_scoregrid_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ExpParam::set_has_scoregrid_dir() {
  _has_bits_[0] |= 0x00000040u;
}
void ExpParam::clear_has_scoregrid_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
void ExpParam::clear_scoregrid_dir() {
  scoregrid_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scoregrid_dir();
}
const ::std::string& ExpParam::scoregrid_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.scoregrid_dir)
  return scoregrid_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_scoregrid_dir(const ::std::string& value) {
  set_has_scoregrid_dir();
  scoregrid_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.scoregrid_dir)
}
void ExpParam::set_scoregrid_dir(const char* value) {
  set_has_scoregrid_dir();
  scoregrid_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.scoregrid_dir)
}
void ExpParam::set_scoregrid_dir(const char* value, size_t size) {
  set_has_scoregrid_dir();
  scoregrid_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.scoregrid_dir)
}
::std::string* ExpParam::mutable_scoregrid_dir() {
  set_has_scoregrid_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.scoregrid_dir)
  return scoregrid_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpParam::release_scoregrid_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.scoregrid_dir)
  clear_has_scoregrid_dir();
  return scoregrid_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_allocated_scoregrid_dir(::std::string* scoregrid_dir) {
  if (scoregrid_dir != NULL) {
    set_has_scoregrid_dir();
  } else {
    clear_has_scoregrid_dir();
  }
  scoregrid_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scoregrid_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.scoregrid_dir)
}

// optional string partprob_dir = 17;
bool ExpParam::has_partprob_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ExpParam::set_has_partprob_dir() {
  _has_bits_[0] |= 0x00000080u;
}
void ExpParam::clear_has_partprob_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
void ExpParam::clear_partprob_dir() {
  partprob_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partprob_dir();
}
const ::std::string& ExpParam::partprob_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.partprob_dir)
  return partprob_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_partprob_dir(const ::std::string& value) {
  set_has_partprob_dir();
  partprob_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.partprob_dir)
}
void ExpParam::set_partprob_dir(const char* value) {
  set_has_partprob_dir();
  partprob_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.partprob_dir)
}
void ExpParam::set_partprob_dir(const char* value, size_t size) {
  set_has_partprob_dir();
  partprob_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.partprob_dir)
}
::std::string* ExpParam::mutable_partprob_dir() {
  set_has_partprob_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.partprob_dir)
  return partprob_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpParam::release_partprob_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.partprob_dir)
  clear_has_partprob_dir();
  return partprob_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_allocated_partprob_dir(::std::string* partprob_dir) {
  if (partprob_dir != NULL) {
    set_has_partprob_dir();
  } else {
    clear_has_partprob_dir();
  }
  partprob_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partprob_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.partprob_dir)
}

// optional string part_conf = 5;
bool ExpParam::has_part_conf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ExpParam::set_has_part_conf() {
  _has_bits_[0] |= 0x00000100u;
}
void ExpParam::clear_has_part_conf() {
  _has_bits_[0] &= ~0x00000100u;
}
void ExpParam::clear_part_conf() {
  part_conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_part_conf();
}
const ::std::string& ExpParam::part_conf() const {
  // @@protoc_insertion_point(field_get:ExpParam.part_conf)
  return part_conf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_part_conf(const ::std::string& value) {
  set_has_part_conf();
  part_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.part_conf)
}
void ExpParam::set_part_conf(const char* value) {
  set_has_part_conf();
  part_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.part_conf)
}
void ExpParam::set_part_conf(const char* value, size_t size) {
  set_has_part_conf();
  part_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.part_conf)
}
::std::string* ExpParam::mutable_part_conf() {
  set_has_part_conf();
  // @@protoc_insertion_point(field_mutable:ExpParam.part_conf)
  return part_conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpParam::release_part_conf() {
  // @@protoc_insertion_point(field_release:ExpParam.part_conf)
  clear_has_part_conf();
  return part_conf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_allocated_part_conf(::std::string* part_conf) {
  if (part_conf != NULL) {
    set_has_part_conf();
  } else {
    clear_has_part_conf();
  }
  part_conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_conf);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.part_conf)
}

// optional string abc_param = 6;
bool ExpParam::has_abc_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ExpParam::set_has_abc_param() {
  _has_bits_[0] |= 0x00000200u;
}
void ExpParam::clear_has_abc_param() {
  _has_bits_[0] &= ~0x00000200u;
}
void ExpParam::clear_abc_param() {
  abc_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_abc_param();
}
const ::std::string& ExpParam::abc_param() const {
  // @@protoc_insertion_point(field_get:ExpParam.abc_param)
  return abc_param_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_abc_param(const ::std::string& value) {
  set_has_abc_param();
  abc_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.abc_param)
}
void ExpParam::set_abc_param(const char* value) {
  set_has_abc_param();
  abc_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.abc_param)
}
void ExpParam::set_abc_param(const char* value, size_t size) {
  set_has_abc_param();
  abc_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.abc_param)
}
::std::string* ExpParam::mutable_abc_param() {
  set_has_abc_param();
  // @@protoc_insertion_point(field_mutable:ExpParam.abc_param)
  return abc_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExpParam::release_abc_param() {
  // @@protoc_insertion_point(field_release:ExpParam.abc_param)
  clear_has_abc_param();
  return abc_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExpParam::set_allocated_abc_param(::std::string* abc_param) {
  if (abc_param != NULL) {
    set_has_abc_param();
  } else {
    clear_has_abc_param();
  }
  abc_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abc_param);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.abc_param)
}

// optional float min_object_scale = 9 [default = 1];
bool ExpParam::has_min_object_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ExpParam::set_has_min_object_scale() {
  _has_bits_[0] |= 0x00000400u;
}
void ExpParam::clear_has_min_object_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
void ExpParam::clear_min_object_scale() {
  min_object_scale_ = 1;
  clear_has_min_object_scale();
}
float ExpParam::min_object_scale() const {
  // @@protoc_insertion_point(field_get:ExpParam.min_object_scale)
  return min_object_scale_;
}
void ExpParam::set_min_object_scale(float value) {
  set_has_min_object_scale();
  min_object_scale_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.min_object_scale)
}

// optional float max_object_scale = 10 [default = 1];
bool ExpParam::has_max_object_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ExpParam::set_has_max_object_scale() {
  _has_bits_[0] |= 0x00000800u;
}
void ExpParam::clear_has_max_object_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
void ExpParam::clear_max_object_scale() {
  max_object_scale_ = 1;
  clear_has_max_object_scale();
}
float ExpParam::max_object_scale() const {
  // @@protoc_insertion_point(field_get:ExpParam.max_object_scale)
  return max_object_scale_;
}
void ExpParam::set_max_object_scale(float value) {
  set_has_max_object_scale();
  max_object_scale_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.max_object_scale)
}

// optional uint32 num_scale_steps = 11 [default = 1];
bool ExpParam::has_num_scale_steps() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ExpParam::set_has_num_scale_steps() {
  _has_bits_[0] |= 0x00001000u;
}
void ExpParam::clear_has_num_scale_steps() {
  _has_bits_[0] &= ~0x00001000u;
}
void ExpParam::clear_num_scale_steps() {
  num_scale_steps_ = 1u;
  clear_has_num_scale_steps();
}
::google::protobuf::uint32 ExpParam::num_scale_steps() const {
  // @@protoc_insertion_point(field_get:ExpParam.num_scale_steps)
  return num_scale_steps_;
}
void ExpParam::set_num_scale_steps(::google::protobuf::uint32 value) {
  set_has_num_scale_steps();
  num_scale_steps_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.num_scale_steps)
}

// optional float min_part_rotation = 12 [default = 0];
bool ExpParam::has_min_part_rotation() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ExpParam::set_has_min_part_rotation() {
  _has_bits_[0] |= 0x00002000u;
}
void ExpParam::clear_has_min_part_rotation() {
  _has_bits_[0] &= ~0x00002000u;
}
void ExpParam::clear_min_part_rotation() {
  min_part_rotation_ = 0;
  clear_has_min_part_rotation();
}
float ExpParam::min_part_rotation() const {
  // @@protoc_insertion_point(field_get:ExpParam.min_part_rotation)
  return min_part_rotation_;
}
void ExpParam::set_min_part_rotation(float value) {
  set_has_min_part_rotation();
  min_part_rotation_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.min_part_rotation)
}

// optional float max_part_rotation = 13 [default = 0];
bool ExpParam::has_max_part_rotation() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ExpParam::set_has_max_part_rotation() {
  _has_bits_[0] |= 0x00004000u;
}
void ExpParam::clear_has_max_part_rotation() {
  _has_bits_[0] &= ~0x00004000u;
}
void ExpParam::clear_max_part_rotation() {
  max_part_rotation_ = 0;
  clear_has_max_part_rotation();
}
float ExpParam::max_part_rotation() const {
  // @@protoc_insertion_point(field_get:ExpParam.max_part_rotation)
  return max_part_rotation_;
}
void ExpParam::set_max_part_rotation(float value) {
  set_has_max_part_rotation();
  max_part_rotation_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.max_part_rotation)
}

// optional uint32 num_rotation_steps = 14 [default = 1];
bool ExpParam::has_num_rotation_steps() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ExpParam::set_has_num_rotation_steps() {
  _has_bits_[0] |= 0x00008000u;
}
void ExpParam::clear_has_num_rotation_steps() {
  _has_bits_[0] &= ~0x00008000u;
}
void ExpParam::clear_num_rotation_steps() {
  num_rotation_steps_ = 1u;
  clear_has_num_rotation_steps();
}
::google::protobuf::uint32 ExpParam::num_rotation_steps() const {
  // @@protoc_insertion_point(field_get:ExpParam.num_rotation_steps)
  return num_rotation_steps_;
}
void ExpParam::set_num_rotation_steps(::google::protobuf::uint32 value) {
  set_has_num_rotation_steps();
  num_rotation_steps_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.num_rotation_steps)
}

// optional bool flip_orientation = 15 [default = false];
bool ExpParam::has_flip_orientation() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ExpParam::set_has_flip_orientation() {
  _has_bits_[0] |= 0x00010000u;
}
void ExpParam::clear_has_flip_orientation() {
  _has_bits_[0] &= ~0x00010000u;
}
void ExpParam::clear_flip_orientation() {
  flip_orientation_ = false;
  clear_has_flip_orientation();
}
bool ExpParam::flip_orientation() const {
  // @@protoc_insertion_point(field_get:ExpParam.flip_orientation)
  return flip_orientation_;
}
void ExpParam::set_flip_orientation(bool value) {
  set_has_flip_orientation();
  flip_orientation_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.flip_orientation)
}

// optional uint32 scorehist_nbins = 18 [default = 20];
bool ExpParam::has_scorehist_nbins() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ExpParam::set_has_scorehist_nbins() {
  _has_bits_[0] |= 0x00020000u;
}
void ExpParam::clear_has_scorehist_nbins() {
  _has_bits_[0] &= ~0x00020000u;
}
void ExpParam::clear_scorehist_nbins() {
  scorehist_nbins_ = 20u;
  clear_has_scorehist_nbins();
}
::google::protobuf::uint32 ExpParam::scorehist_nbins() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_nbins)
  return scorehist_nbins_;
}
void ExpParam::set_scorehist_nbins(::google::protobuf::uint32 value) {
  set_has_scorehist_nbins();
  scorehist_nbins_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_nbins)
}

// optional uint32 scorehist_def_pw = 19 [default = 10];
bool ExpParam::has_scorehist_def_pw() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ExpParam::set_has_scorehist_def_pw() {
  _has_bits_[0] |= 0x00040000u;
}
void ExpParam::clear_has_scorehist_def_pw() {
  _has_bits_[0] &= ~0x00040000u;
}
void ExpParam::clear_scorehist_def_pw() {
  scorehist_def_pw_ = 10u;
  clear_has_scorehist_def_pw();
}
::google::protobuf::uint32 ExpParam::scorehist_def_pw() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_def_pw)
  return scorehist_def_pw_;
}
void ExpParam::set_scorehist_def_pw(::google::protobuf::uint32 value) {
  set_has_scorehist_def_pw();
  scorehist_def_pw_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_def_pw)
}

// optional uint32 scorehist_def_ph = 20 [default = 10];
bool ExpParam::has_scorehist_def_ph() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ExpParam::set_has_scorehist_def_ph() {
  _has_bits_[0] |= 0x00080000u;
}
void ExpParam::clear_has_scorehist_def_ph() {
  _has_bits_[0] &= ~0x00080000u;
}
void ExpParam::clear_scorehist_def_ph() {
  scorehist_def_ph_ = 10u;
  clear_has_scorehist_def_ph();
}
::google::protobuf::uint32 ExpParam::scorehist_def_ph() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_def_ph)
  return scorehist_def_ph_;
}
void ExpParam::set_scorehist_def_ph(::google::protobuf::uint32 value) {
  set_has_scorehist_def_ph();
  scorehist_def_ph_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_def_ph)
}

// optional double scorehist_minval = 26 [default = -0.5];
bool ExpParam::has_scorehist_minval() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ExpParam::set_has_scorehist_minval() {
  _has_bits_[0] |= 0x00100000u;
}
void ExpParam::clear_has_scorehist_minval() {
  _has_bits_[0] &= ~0x00100000u;
}
void ExpParam::clear_scorehist_minval() {
  scorehist_minval_ = -0.5;
  clear_has_scorehist_minval();
}
double ExpParam::scorehist_minval() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_minval)
  return scorehist_minval_;
}
void ExpParam::set_scorehist_minval(double value) {
  set_has_scorehist_minval();
  scorehist_minval_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_minval)
}

// optional double scorehist_maxval = 27 [default = 0.5];
bool ExpParam::has_scorehist_maxval() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ExpParam::set_has_scorehist_maxval() {
  _has_bits_[0] |= 0x00200000u;
}
void ExpParam::clear_has_scorehist_maxval() {
  _has_bits_[0] &= ~0x00200000u;
}
void ExpParam::clear_scorehist_maxval() {
  scorehist_maxval_ = 0.5;
  clear_has_scorehist_maxval();
}
double ExpParam::scorehist_maxval() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_maxval)
  return scorehist_maxval_;
}
void ExpParam::set_scorehist_maxval(double value) {
  set_has_scorehist_maxval();
  scorehist_maxval_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_maxval)
}

// optional float object_height_width_ratio = 21 [default = 2.5];
bool ExpParam::has_object_height_width_ratio() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ExpParam::set_has_object_height_width_ratio() {
  _has_bits_[0] |= 0x00400000u;
}
void ExpParam::clear_has_object_height_width_ratio() {
  _has_bits_[0] &= ~0x00400000u;
}
void ExpParam::clear_object_height_width_ratio() {
  object_height_width_ratio_ = 2.5f;
  clear_has_object_height_width_ratio();
}
float ExpParam::object_height_width_ratio() const {
  // @@protoc_insertion_point(field_get:ExpParam.object_height_width_ratio)
  return object_height_width_ratio_;
}
void ExpParam::set_object_height_width_ratio(float value) {
  set_has_object_height_width_ratio();
  object_height_width_ratio_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.object_height_width_ratio)
}

// optional bool compute_part_marginals = 22 [default = false];
bool ExpParam::has_compute_part_marginals() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ExpParam::set_has_compute_part_marginals() {
  _has_bits_[0] |= 0x00800000u;
}
void ExpParam::clear_has_compute_part_marginals() {
  _has_bits_[0] &= ~0x00800000u;
}
void ExpParam::clear_compute_part_marginals() {
  compute_part_marginals_ = false;
  clear_has_compute_part_marginals();
}
bool ExpParam::compute_part_marginals() const {
  // @@protoc_insertion_point(field_get:ExpParam.compute_part_marginals)
  return compute_part_marginals_;
}
void ExpParam::set_compute_part_marginals(bool value) {
  set_has_compute_part_marginals();
  compute_part_marginals_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.compute_part_marginals)
}

// optional int32 num_pose_samples = 23 [default = 0];
bool ExpParam::has_num_pose_samples() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ExpParam::set_has_num_pose_samples() {
  _has_bits_[0] |= 0x01000000u;
}
void ExpParam::clear_has_num_pose_samples() {
  _has_bits_[0] &= ~0x01000000u;
}
void ExpParam::clear_num_pose_samples() {
  num_pose_samples_ = 0;
  clear_has_num_pose_samples();
}
::google::protobuf::int32 ExpParam::num_pose_samples() const {
  // @@protoc_insertion_point(field_get:ExpParam.num_pose_samples)
  return num_pose_samples_;
}
void ExpParam::set_num_pose_samples(::google::protobuf::int32 value) {
  set_has_num_pose_samples();
  num_pose_samples_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.num_pose_samples)
}

// optional float strip_border_detections = 24 [default = 0];
bool ExpParam::has_strip_border_detections() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ExpParam::set_has_strip_border_detections() {
  _has_bits_[0] |= 0x02000000u;
}
void ExpParam::clear_has_strip_border_detections() {
  _has_bits_[0] &= ~0x02000000u;
}
void ExpParam::clear_strip_border_detections() {
  strip_border_detections_ = 0;
  clear_has_strip_border_detections();
}
float ExpParam::strip_border_detections() const {
  // @@protoc_insertion_point(field_get:ExpParam.strip_border_detections)
  return strip_border_detections_;
}
void ExpParam::set_strip_border_detections(float value) {
  set_has_strip_border_detections();
  strip_border_detections_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.strip_border_detections)
}

// optional bool save_image_scoregrid = 25 [default = false];
bool ExpParam::has_save_image_scoregrid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ExpParam::set_has_save_image_scoregrid() {
  _has_bits_[0] |= 0x04000000u;
}
void ExpParam::clear_has_save_image_scoregrid() {
  _has_bits_[0] &= ~0x04000000u;
}
void ExpParam::clear_save_image_scoregrid() {
  save_image_scoregrid_ = false;
  clear_has_save_image_scoregrid();
}
bool ExpParam::save_image_scoregrid() const {
  // @@protoc_insertion_point(field_get:ExpParam.save_image_scoregrid)
  return save_image_scoregrid_;
}
void ExpParam::set_save_image_scoregrid(bool value) {
  set_has_save_image_scoregrid();
  save_image_scoregrid_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.save_image_scoregrid)
}

inline const ExpParam* ExpParam::internal_default_instance() {
  return &ExpParam_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
