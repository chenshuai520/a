// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExpParam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ExpParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExpParam_2eproto() {
  protobuf_AddDesc_ExpParam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExpParam.proto");
  GOOGLE_CHECK(file != NULL);
  ExpParam_descriptor_ = file->message_type(0);
  static const int ExpParam_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, train_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, validation_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, test_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, log_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, log_subdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, class_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scoregrid_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, partprob_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, part_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, abc_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, min_object_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, max_object_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_scale_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, min_part_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, max_part_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_rotation_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, flip_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_nbins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_def_pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_def_ph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_minval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, scorehist_maxval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, object_height_width_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, compute_part_marginals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, num_pose_samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, strip_border_detections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, save_image_scoregrid_),
  };
  ExpParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpParam_descriptor_,
      ExpParam::default_instance_,
      ExpParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExpParam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpParam_descriptor_, &ExpParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExpParam_2eproto() {
  delete ExpParam::default_instance_;
  delete ExpParam_reflection_;
}

void protobuf_AddDesc_ExpParam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ExpParam.proto\"\375\005\n\010ExpParam\022\025\n\rtrain_d"
    "ataset\030\001 \003(\t\022\032\n\022validation_dataset\030\010 \003(\t"
    "\022\024\n\014test_dataset\030\002 \003(\t\022\017\n\007log_dir\030\003 \001(\t\022"
    "\022\n\nlog_subdir\030\007 \001(\t\022\021\n\tclass_dir\030\004 \001(\t\022\025"
    "\n\rscoregrid_dir\030\020 \001(\t\022\024\n\014partprob_dir\030\021 "
    "\001(\t\022\021\n\tpart_conf\030\005 \001(\t\022\021\n\tabc_param\030\006 \001("
    "\t\022\033\n\020min_object_scale\030\t \001(\002:\0011\022\033\n\020max_ob"
    "ject_scale\030\n \001(\002:\0011\022\032\n\017num_scale_steps\030\013"
    " \001(\r:\0011\022\034\n\021min_part_rotation\030\014 \001(\002:\0010\022\034\n"
    "\021max_part_rotation\030\r \001(\002:\0010\022\035\n\022num_rotat"
    "ion_steps\030\016 \001(\r:\0011\022\037\n\020flip_orientation\030\017"
    " \001(\010:\005false\022\033\n\017scorehist_nbins\030\022 \001(\r:\00220"
    "\022\034\n\020scorehist_def_pw\030\023 \001(\r:\00210\022\034\n\020scoreh"
    "ist_def_ph\030\024 \001(\r:\00210\022\036\n\020scorehist_minval"
    "\030\032 \001(\001:\004-0.5\022\035\n\020scorehist_maxval\030\033 \001(\001:\003"
    "0.5\022&\n\031object_height_width_ratio\030\025 \001(\002:\003"
    "2.5\022%\n\026compute_part_marginals\030\026 \001(\010:\005fal"
    "se\022\033\n\020num_pose_samples\030\027 \001(\005:\0010\022\"\n\027strip"
    "_border_detections\030\030 \001(\002:\0010\022#\n\024save_imag"
    "e_scoregrid\030\031 \001(\010:\005false", 784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExpParam.proto", &protobuf_RegisterTypes);
  ExpParam::default_instance_ = new ExpParam();
  ExpParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExpParam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExpParam_2eproto {
  StaticDescriptorInitializer_ExpParam_2eproto() {
    protobuf_AddDesc_ExpParam_2eproto();
  }
} static_descriptor_initializer_ExpParam_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ExpParam::kTrainDatasetFieldNumber;
const int ExpParam::kValidationDatasetFieldNumber;
const int ExpParam::kTestDatasetFieldNumber;
const int ExpParam::kLogDirFieldNumber;
const int ExpParam::kLogSubdirFieldNumber;
const int ExpParam::kClassDirFieldNumber;
const int ExpParam::kScoregridDirFieldNumber;
const int ExpParam::kPartprobDirFieldNumber;
const int ExpParam::kPartConfFieldNumber;
const int ExpParam::kAbcParamFieldNumber;
const int ExpParam::kMinObjectScaleFieldNumber;
const int ExpParam::kMaxObjectScaleFieldNumber;
const int ExpParam::kNumScaleStepsFieldNumber;
const int ExpParam::kMinPartRotationFieldNumber;
const int ExpParam::kMaxPartRotationFieldNumber;
const int ExpParam::kNumRotationStepsFieldNumber;
const int ExpParam::kFlipOrientationFieldNumber;
const int ExpParam::kScorehistNbinsFieldNumber;
const int ExpParam::kScorehistDefPwFieldNumber;
const int ExpParam::kScorehistDefPhFieldNumber;
const int ExpParam::kScorehistMinvalFieldNumber;
const int ExpParam::kScorehistMaxvalFieldNumber;
const int ExpParam::kObjectHeightWidthRatioFieldNumber;
const int ExpParam::kComputePartMarginalsFieldNumber;
const int ExpParam::kNumPoseSamplesFieldNumber;
const int ExpParam::kStripBorderDetectionsFieldNumber;
const int ExpParam::kSaveImageScoregridFieldNumber;
#endif  // !_MSC_VER

ExpParam::ExpParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpParam::InitAsDefaultInstance() {
}

ExpParam::ExpParam(const ExpParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpParam::SharedCtor() {
  _cached_size_ = 0;
  log_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_subdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  class_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scoregrid_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partprob_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  part_conf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  abc_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_object_scale_ = 1;
  max_object_scale_ = 1;
  num_scale_steps_ = 1u;
  min_part_rotation_ = 0;
  max_part_rotation_ = 0;
  num_rotation_steps_ = 1u;
  flip_orientation_ = false;
  scorehist_nbins_ = 20u;
  scorehist_def_pw_ = 10u;
  scorehist_def_ph_ = 10u;
  scorehist_minval_ = -0.5;
  scorehist_maxval_ = 0.5;
  object_height_width_ratio_ = 2.5f;
  compute_part_marginals_ = false;
  num_pose_samples_ = 0;
  strip_border_detections_ = 0;
  save_image_scoregrid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpParam::~ExpParam() {
  SharedDtor();
}

void ExpParam::SharedDtor() {
  if (log_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete log_dir_;
  }
  if (log_subdir_ != &::google::protobuf::internal::kEmptyString) {
    delete log_subdir_;
  }
  if (class_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete class_dir_;
  }
  if (scoregrid_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete scoregrid_dir_;
  }
  if (partprob_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete partprob_dir_;
  }
  if (part_conf_ != &::google::protobuf::internal::kEmptyString) {
    delete part_conf_;
  }
  if (abc_param_ != &::google::protobuf::internal::kEmptyString) {
    delete abc_param_;
  }
  if (this != default_instance_) {
  }
}

void ExpParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpParam_descriptor_;
}

const ExpParam& ExpParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExpParam_2eproto();  return *default_instance_;
}

ExpParam* ExpParam::default_instance_ = NULL;

ExpParam* ExpParam::New() const {
  return new ExpParam;
}

void ExpParam::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_log_dir()) {
      if (log_dir_ != &::google::protobuf::internal::kEmptyString) {
        log_dir_->clear();
      }
    }
    if (has_log_subdir()) {
      if (log_subdir_ != &::google::protobuf::internal::kEmptyString) {
        log_subdir_->clear();
      }
    }
    if (has_class_dir()) {
      if (class_dir_ != &::google::protobuf::internal::kEmptyString) {
        class_dir_->clear();
      }
    }
    if (has_scoregrid_dir()) {
      if (scoregrid_dir_ != &::google::protobuf::internal::kEmptyString) {
        scoregrid_dir_->clear();
      }
    }
    if (has_partprob_dir()) {
      if (partprob_dir_ != &::google::protobuf::internal::kEmptyString) {
        partprob_dir_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_part_conf()) {
      if (part_conf_ != &::google::protobuf::internal::kEmptyString) {
        part_conf_->clear();
      }
    }
    if (has_abc_param()) {
      if (abc_param_ != &::google::protobuf::internal::kEmptyString) {
        abc_param_->clear();
      }
    }
    min_object_scale_ = 1;
    max_object_scale_ = 1;
    num_scale_steps_ = 1u;
    min_part_rotation_ = 0;
    max_part_rotation_ = 0;
    num_rotation_steps_ = 1u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    flip_orientation_ = false;
    scorehist_nbins_ = 20u;
    scorehist_def_pw_ = 10u;
    scorehist_def_ph_ = 10u;
    scorehist_minval_ = -0.5;
    scorehist_maxval_ = 0.5;
    object_height_width_ratio_ = 2.5f;
    compute_part_marginals_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    num_pose_samples_ = 0;
    strip_border_detections_ = 0;
    save_image_scoregrid_ = false;
  }
  train_dataset_.Clear();
  validation_dataset_.Clear();
  test_dataset_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string train_dataset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_train_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_dataset(0).data(), this->train_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_train_dataset;
        if (input->ExpectTag(18)) goto parse_test_dataset;
        break;
      }
      
      // repeated string test_dataset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_test_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->test_dataset(0).data(), this->test_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_test_dataset;
        if (input->ExpectTag(26)) goto parse_log_dir;
        break;
      }
      
      // optional string log_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_dir().data(), this->log_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_class_dir;
        break;
      }
      
      // optional string class_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_dir().data(), this->class_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_part_conf;
        break;
      }
      
      // optional string part_conf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_conf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->part_conf().data(), this->part_conf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_abc_param;
        break;
      }
      
      // optional string abc_param = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abc_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abc_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abc_param().data(), this->abc_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_log_subdir;
        break;
      }
      
      // optional string log_subdir = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_subdir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_subdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_subdir().data(), this->log_subdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_validation_dataset;
        break;
      }
      
      // repeated string validation_dataset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_validation_dataset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_validation_dataset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->validation_dataset(0).data(), this->validation_dataset(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_validation_dataset;
        if (input->ExpectTag(77)) goto parse_min_object_scale;
        break;
      }
      
      // optional float min_object_scale = 9 [default = 1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_object_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_object_scale_)));
          set_has_min_object_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_max_object_scale;
        break;
      }
      
      // optional float max_object_scale = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_object_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_object_scale_)));
          set_has_max_object_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_num_scale_steps;
        break;
      }
      
      // optional uint32 num_scale_steps = 11 [default = 1];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_scale_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_scale_steps_)));
          set_has_num_scale_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_min_part_rotation;
        break;
      }
      
      // optional float min_part_rotation = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_part_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_part_rotation_)));
          set_has_min_part_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_max_part_rotation;
        break;
      }
      
      // optional float max_part_rotation = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_part_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_part_rotation_)));
          set_has_max_part_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_num_rotation_steps;
        break;
      }
      
      // optional uint32 num_rotation_steps = 14 [default = 1];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rotation_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_rotation_steps_)));
          set_has_num_rotation_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_flip_orientation;
        break;
      }
      
      // optional bool flip_orientation = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flip_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flip_orientation_)));
          set_has_flip_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_scoregrid_dir;
        break;
      }
      
      // optional string scoregrid_dir = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scoregrid_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scoregrid_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scoregrid_dir().data(), this->scoregrid_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_partprob_dir;
        break;
      }
      
      // optional string partprob_dir = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partprob_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partprob_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->partprob_dir().data(), this->partprob_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_scorehist_nbins;
        break;
      }
      
      // optional uint32 scorehist_nbins = 18 [default = 20];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scorehist_nbins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scorehist_nbins_)));
          set_has_scorehist_nbins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_scorehist_def_pw;
        break;
      }
      
      // optional uint32 scorehist_def_pw = 19 [default = 10];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scorehist_def_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scorehist_def_pw_)));
          set_has_scorehist_def_pw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_scorehist_def_ph;
        break;
      }
      
      // optional uint32 scorehist_def_ph = 20 [default = 10];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scorehist_def_ph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scorehist_def_ph_)));
          set_has_scorehist_def_ph();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_object_height_width_ratio;
        break;
      }
      
      // optional float object_height_width_ratio = 21 [default = 2.5];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_object_height_width_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_height_width_ratio_)));
          set_has_object_height_width_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_compute_part_marginals;
        break;
      }
      
      // optional bool compute_part_marginals = 22 [default = false];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compute_part_marginals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compute_part_marginals_)));
          set_has_compute_part_marginals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_num_pose_samples;
        break;
      }
      
      // optional int32 num_pose_samples = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_pose_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_pose_samples_)));
          set_has_num_pose_samples();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_strip_border_detections;
        break;
      }
      
      // optional float strip_border_detections = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strip_border_detections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strip_border_detections_)));
          set_has_strip_border_detections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_save_image_scoregrid;
        break;
      }
      
      // optional bool save_image_scoregrid = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_image_scoregrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_image_scoregrid_)));
          set_has_save_image_scoregrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_scorehist_minval;
        break;
      }
      
      // optional double scorehist_minval = 26 [default = -0.5];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scorehist_minval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scorehist_minval_)));
          set_has_scorehist_minval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_scorehist_maxval;
        break;
      }
      
      // optional double scorehist_maxval = 27 [default = 0.5];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scorehist_maxval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scorehist_maxval_)));
          set_has_scorehist_maxval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string train_dataset = 1;
  for (int i = 0; i < this->train_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->train_dataset(i).data(), this->train_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->train_dataset(i), output);
  }
  
  // repeated string test_dataset = 2;
  for (int i = 0; i < this->test_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->test_dataset(i).data(), this->test_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->test_dataset(i), output);
  }
  
  // optional string log_dir = 3;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->log_dir(), output);
  }
  
  // optional string class_dir = 4;
  if (has_class_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_dir().data(), this->class_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->class_dir(), output);
  }
  
  // optional string part_conf = 5;
  if (has_part_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf().data(), this->part_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->part_conf(), output);
  }
  
  // optional string abc_param = 6;
  if (has_abc_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abc_param().data(), this->abc_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->abc_param(), output);
  }
  
  // optional string log_subdir = 7;
  if (has_log_subdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_subdir().data(), this->log_subdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->log_subdir(), output);
  }
  
  // repeated string validation_dataset = 8;
  for (int i = 0; i < this->validation_dataset_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->validation_dataset(i).data(), this->validation_dataset(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->validation_dataset(i), output);
  }
  
  // optional float min_object_scale = 9 [default = 1];
  if (has_min_object_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->min_object_scale(), output);
  }
  
  // optional float max_object_scale = 10 [default = 1];
  if (has_max_object_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->max_object_scale(), output);
  }
  
  // optional uint32 num_scale_steps = 11 [default = 1];
  if (has_num_scale_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num_scale_steps(), output);
  }
  
  // optional float min_part_rotation = 12 [default = 0];
  if (has_min_part_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->min_part_rotation(), output);
  }
  
  // optional float max_part_rotation = 13 [default = 0];
  if (has_max_part_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->max_part_rotation(), output);
  }
  
  // optional uint32 num_rotation_steps = 14 [default = 1];
  if (has_num_rotation_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->num_rotation_steps(), output);
  }
  
  // optional bool flip_orientation = 15 [default = false];
  if (has_flip_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->flip_orientation(), output);
  }
  
  // optional string scoregrid_dir = 16;
  if (has_scoregrid_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scoregrid_dir().data(), this->scoregrid_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->scoregrid_dir(), output);
  }
  
  // optional string partprob_dir = 17;
  if (has_partprob_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partprob_dir().data(), this->partprob_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->partprob_dir(), output);
  }
  
  // optional uint32 scorehist_nbins = 18 [default = 20];
  if (has_scorehist_nbins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->scorehist_nbins(), output);
  }
  
  // optional uint32 scorehist_def_pw = 19 [default = 10];
  if (has_scorehist_def_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->scorehist_def_pw(), output);
  }
  
  // optional uint32 scorehist_def_ph = 20 [default = 10];
  if (has_scorehist_def_ph()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->scorehist_def_ph(), output);
  }
  
  // optional float object_height_width_ratio = 21 [default = 2.5];
  if (has_object_height_width_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->object_height_width_ratio(), output);
  }
  
  // optional bool compute_part_marginals = 22 [default = false];
  if (has_compute_part_marginals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->compute_part_marginals(), output);
  }
  
  // optional int32 num_pose_samples = 23 [default = 0];
  if (has_num_pose_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->num_pose_samples(), output);
  }
  
  // optional float strip_border_detections = 24 [default = 0];
  if (has_strip_border_detections()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->strip_border_detections(), output);
  }
  
  // optional bool save_image_scoregrid = 25 [default = false];
  if (has_save_image_scoregrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->save_image_scoregrid(), output);
  }
  
  // optional double scorehist_minval = 26 [default = -0.5];
  if (has_scorehist_minval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->scorehist_minval(), output);
  }
  
  // optional double scorehist_maxval = 27 [default = 0.5];
  if (has_scorehist_maxval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->scorehist_maxval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string train_dataset = 1;
  for (int i = 0; i < this->train_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_dataset(i).data(), this->train_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->train_dataset(i), target);
  }
  
  // repeated string test_dataset = 2;
  for (int i = 0; i < this->test_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->test_dataset(i).data(), this->test_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->test_dataset(i), target);
  }
  
  // optional string log_dir = 3;
  if (has_log_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_dir().data(), this->log_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log_dir(), target);
  }
  
  // optional string class_dir = 4;
  if (has_class_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_dir().data(), this->class_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->class_dir(), target);
  }
  
  // optional string part_conf = 5;
  if (has_part_conf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_conf().data(), this->part_conf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->part_conf(), target);
  }
  
  // optional string abc_param = 6;
  if (has_abc_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abc_param().data(), this->abc_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->abc_param(), target);
  }
  
  // optional string log_subdir = 7;
  if (has_log_subdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_subdir().data(), this->log_subdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->log_subdir(), target);
  }
  
  // repeated string validation_dataset = 8;
  for (int i = 0; i < this->validation_dataset_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->validation_dataset(i).data(), this->validation_dataset(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->validation_dataset(i), target);
  }
  
  // optional float min_object_scale = 9 [default = 1];
  if (has_min_object_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->min_object_scale(), target);
  }
  
  // optional float max_object_scale = 10 [default = 1];
  if (has_max_object_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->max_object_scale(), target);
  }
  
  // optional uint32 num_scale_steps = 11 [default = 1];
  if (has_num_scale_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num_scale_steps(), target);
  }
  
  // optional float min_part_rotation = 12 [default = 0];
  if (has_min_part_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->min_part_rotation(), target);
  }
  
  // optional float max_part_rotation = 13 [default = 0];
  if (has_max_part_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->max_part_rotation(), target);
  }
  
  // optional uint32 num_rotation_steps = 14 [default = 1];
  if (has_num_rotation_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->num_rotation_steps(), target);
  }
  
  // optional bool flip_orientation = 15 [default = false];
  if (has_flip_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->flip_orientation(), target);
  }
  
  // optional string scoregrid_dir = 16;
  if (has_scoregrid_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scoregrid_dir().data(), this->scoregrid_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->scoregrid_dir(), target);
  }
  
  // optional string partprob_dir = 17;
  if (has_partprob_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->partprob_dir().data(), this->partprob_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->partprob_dir(), target);
  }
  
  // optional uint32 scorehist_nbins = 18 [default = 20];
  if (has_scorehist_nbins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->scorehist_nbins(), target);
  }
  
  // optional uint32 scorehist_def_pw = 19 [default = 10];
  if (has_scorehist_def_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->scorehist_def_pw(), target);
  }
  
  // optional uint32 scorehist_def_ph = 20 [default = 10];
  if (has_scorehist_def_ph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->scorehist_def_ph(), target);
  }
  
  // optional float object_height_width_ratio = 21 [default = 2.5];
  if (has_object_height_width_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->object_height_width_ratio(), target);
  }
  
  // optional bool compute_part_marginals = 22 [default = false];
  if (has_compute_part_marginals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->compute_part_marginals(), target);
  }
  
  // optional int32 num_pose_samples = 23 [default = 0];
  if (has_num_pose_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->num_pose_samples(), target);
  }
  
  // optional float strip_border_detections = 24 [default = 0];
  if (has_strip_border_detections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->strip_border_detections(), target);
  }
  
  // optional bool save_image_scoregrid = 25 [default = false];
  if (has_save_image_scoregrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->save_image_scoregrid(), target);
  }
  
  // optional double scorehist_minval = 26 [default = -0.5];
  if (has_scorehist_minval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->scorehist_minval(), target);
  }
  
  // optional double scorehist_maxval = 27 [default = 0.5];
  if (has_scorehist_maxval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->scorehist_maxval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional string log_dir = 3;
    if (has_log_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_dir());
    }
    
    // optional string log_subdir = 7;
    if (has_log_subdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_subdir());
    }
    
    // optional string class_dir = 4;
    if (has_class_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_dir());
    }
    
    // optional string scoregrid_dir = 16;
    if (has_scoregrid_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scoregrid_dir());
    }
    
    // optional string partprob_dir = 17;
    if (has_partprob_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partprob_dir());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string part_conf = 5;
    if (has_part_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->part_conf());
    }
    
    // optional string abc_param = 6;
    if (has_abc_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abc_param());
    }
    
    // optional float min_object_scale = 9 [default = 1];
    if (has_min_object_scale()) {
      total_size += 1 + 4;
    }
    
    // optional float max_object_scale = 10 [default = 1];
    if (has_max_object_scale()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 num_scale_steps = 11 [default = 1];
    if (has_num_scale_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_scale_steps());
    }
    
    // optional float min_part_rotation = 12 [default = 0];
    if (has_min_part_rotation()) {
      total_size += 1 + 4;
    }
    
    // optional float max_part_rotation = 13 [default = 0];
    if (has_max_part_rotation()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 num_rotation_steps = 14 [default = 1];
    if (has_num_rotation_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_rotation_steps());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool flip_orientation = 15 [default = false];
    if (has_flip_orientation()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 scorehist_nbins = 18 [default = 20];
    if (has_scorehist_nbins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scorehist_nbins());
    }
    
    // optional uint32 scorehist_def_pw = 19 [default = 10];
    if (has_scorehist_def_pw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scorehist_def_pw());
    }
    
    // optional uint32 scorehist_def_ph = 20 [default = 10];
    if (has_scorehist_def_ph()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scorehist_def_ph());
    }
    
    // optional double scorehist_minval = 26 [default = -0.5];
    if (has_scorehist_minval()) {
      total_size += 2 + 8;
    }
    
    // optional double scorehist_maxval = 27 [default = 0.5];
    if (has_scorehist_maxval()) {
      total_size += 2 + 8;
    }
    
    // optional float object_height_width_ratio = 21 [default = 2.5];
    if (has_object_height_width_ratio()) {
      total_size += 2 + 4;
    }
    
    // optional bool compute_part_marginals = 22 [default = false];
    if (has_compute_part_marginals()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 num_pose_samples = 23 [default = 0];
    if (has_num_pose_samples()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_pose_samples());
    }
    
    // optional float strip_border_detections = 24 [default = 0];
    if (has_strip_border_detections()) {
      total_size += 2 + 4;
    }
    
    // optional bool save_image_scoregrid = 25 [default = false];
    if (has_save_image_scoregrid()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string train_dataset = 1;
  total_size += 1 * this->train_dataset_size();
  for (int i = 0; i < this->train_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->train_dataset(i));
  }
  
  // repeated string validation_dataset = 8;
  total_size += 1 * this->validation_dataset_size();
  for (int i = 0; i < this->validation_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->validation_dataset(i));
  }
  
  // repeated string test_dataset = 2;
  total_size += 1 * this->test_dataset_size();
  for (int i = 0; i < this->test_dataset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->test_dataset(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpParam::MergeFrom(const ExpParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  train_dataset_.MergeFrom(from.train_dataset_);
  validation_dataset_.MergeFrom(from.validation_dataset_);
  test_dataset_.MergeFrom(from.test_dataset_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_log_dir()) {
      set_log_dir(from.log_dir());
    }
    if (from.has_log_subdir()) {
      set_log_subdir(from.log_subdir());
    }
    if (from.has_class_dir()) {
      set_class_dir(from.class_dir());
    }
    if (from.has_scoregrid_dir()) {
      set_scoregrid_dir(from.scoregrid_dir());
    }
    if (from.has_partprob_dir()) {
      set_partprob_dir(from.partprob_dir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_part_conf()) {
      set_part_conf(from.part_conf());
    }
    if (from.has_abc_param()) {
      set_abc_param(from.abc_param());
    }
    if (from.has_min_object_scale()) {
      set_min_object_scale(from.min_object_scale());
    }
    if (from.has_max_object_scale()) {
      set_max_object_scale(from.max_object_scale());
    }
    if (from.has_num_scale_steps()) {
      set_num_scale_steps(from.num_scale_steps());
    }
    if (from.has_min_part_rotation()) {
      set_min_part_rotation(from.min_part_rotation());
    }
    if (from.has_max_part_rotation()) {
      set_max_part_rotation(from.max_part_rotation());
    }
    if (from.has_num_rotation_steps()) {
      set_num_rotation_steps(from.num_rotation_steps());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_flip_orientation()) {
      set_flip_orientation(from.flip_orientation());
    }
    if (from.has_scorehist_nbins()) {
      set_scorehist_nbins(from.scorehist_nbins());
    }
    if (from.has_scorehist_def_pw()) {
      set_scorehist_def_pw(from.scorehist_def_pw());
    }
    if (from.has_scorehist_def_ph()) {
      set_scorehist_def_ph(from.scorehist_def_ph());
    }
    if (from.has_scorehist_minval()) {
      set_scorehist_minval(from.scorehist_minval());
    }
    if (from.has_scorehist_maxval()) {
      set_scorehist_maxval(from.scorehist_maxval());
    }
    if (from.has_object_height_width_ratio()) {
      set_object_height_width_ratio(from.object_height_width_ratio());
    }
    if (from.has_compute_part_marginals()) {
      set_compute_part_marginals(from.compute_part_marginals());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_num_pose_samples()) {
      set_num_pose_samples(from.num_pose_samples());
    }
    if (from.has_strip_border_detections()) {
      set_strip_border_detections(from.strip_border_detections());
    }
    if (from.has_save_image_scoregrid()) {
      set_save_image_scoregrid(from.save_image_scoregrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpParam::CopyFrom(const ExpParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpParam::IsInitialized() const {
  
  return true;
}

void ExpParam::Swap(ExpParam* other) {
  if (other != this) {
    train_dataset_.Swap(&other->train_dataset_);
    validation_dataset_.Swap(&other->validation_dataset_);
    test_dataset_.Swap(&other->test_dataset_);
    std::swap(log_dir_, other->log_dir_);
    std::swap(log_subdir_, other->log_subdir_);
    std::swap(class_dir_, other->class_dir_);
    std::swap(scoregrid_dir_, other->scoregrid_dir_);
    std::swap(partprob_dir_, other->partprob_dir_);
    std::swap(part_conf_, other->part_conf_);
    std::swap(abc_param_, other->abc_param_);
    std::swap(min_object_scale_, other->min_object_scale_);
    std::swap(max_object_scale_, other->max_object_scale_);
    std::swap(num_scale_steps_, other->num_scale_steps_);
    std::swap(min_part_rotation_, other->min_part_rotation_);
    std::swap(max_part_rotation_, other->max_part_rotation_);
    std::swap(num_rotation_steps_, other->num_rotation_steps_);
    std::swap(flip_orientation_, other->flip_orientation_);
    std::swap(scorehist_nbins_, other->scorehist_nbins_);
    std::swap(scorehist_def_pw_, other->scorehist_def_pw_);
    std::swap(scorehist_def_ph_, other->scorehist_def_ph_);
    std::swap(scorehist_minval_, other->scorehist_minval_);
    std::swap(scorehist_maxval_, other->scorehist_maxval_);
    std::swap(object_height_width_ratio_, other->object_height_width_ratio_);
    std::swap(compute_part_marginals_, other->compute_part_marginals_);
    std::swap(num_pose_samples_, other->num_pose_samples_);
    std::swap(strip_border_detections_, other->strip_border_detections_);
    std::swap(save_image_scoregrid_, other->save_image_scoregrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpParam_descriptor_;
  metadata.reflection = ExpParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
