// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExpParam.proto

#ifndef PROTOBUF_ExpParam_2eproto__INCLUDED
#define PROTOBUF_ExpParam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ExpParam_2eproto();
void protobuf_InitDefaults_ExpParam_2eproto();
void protobuf_AssignDesc_ExpParam_2eproto();
void protobuf_ShutdownFile_ExpParam_2eproto();

class ExpParam;

// ===================================================================

class ExpParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ExpParam) */ {
 public:
  ExpParam();
  virtual ~ExpParam();

  ExpParam(const ExpParam& from);

  inline ExpParam& operator=(const ExpParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParam& default_instance();

  static const ExpParam* internal_default_instance();

  void Swap(ExpParam* other);

  // implements Message ----------------------------------------------

  inline ExpParam* New() const { return New(NULL); }

  ExpParam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpParam& from);
  void MergeFrom(const ExpParam& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExpParam* other);
  void UnsafeMergeFrom(const ExpParam& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string train_dataset = 1;
  int train_dataset_size() const;
  void clear_train_dataset();
  static const int kTrainDatasetFieldNumber = 1;
  const ::std::string& train_dataset(int index) const;
  ::std::string* mutable_train_dataset(int index);
  void set_train_dataset(int index, const ::std::string& value);
  void set_train_dataset(int index, const char* value);
  void set_train_dataset(int index, const char* value, size_t size);
  ::std::string* add_train_dataset();
  void add_train_dataset(const ::std::string& value);
  void add_train_dataset(const char* value);
  void add_train_dataset(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& train_dataset() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_train_dataset();

  // repeated string validation_dataset = 8;
  int validation_dataset_size() const;
  void clear_validation_dataset();
  static const int kValidationDatasetFieldNumber = 8;
  const ::std::string& validation_dataset(int index) const;
  ::std::string* mutable_validation_dataset(int index);
  void set_validation_dataset(int index, const ::std::string& value);
  void set_validation_dataset(int index, const char* value);
  void set_validation_dataset(int index, const char* value, size_t size);
  ::std::string* add_validation_dataset();
  void add_validation_dataset(const ::std::string& value);
  void add_validation_dataset(const char* value);
  void add_validation_dataset(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& validation_dataset() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_validation_dataset();

  // repeated string test_dataset = 2;
  int test_dataset_size() const;
  void clear_test_dataset();
  static const int kTestDatasetFieldNumber = 2;
  const ::std::string& test_dataset(int index) const;
  ::std::string* mutable_test_dataset(int index);
  void set_test_dataset(int index, const ::std::string& value);
  void set_test_dataset(int index, const char* value);
  void set_test_dataset(int index, const char* value, size_t size);
  ::std::string* add_test_dataset();
  void add_test_dataset(const ::std::string& value);
  void add_test_dataset(const char* value);
  void add_test_dataset(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_dataset() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_dataset();

  // optional string log_dir = 3;
  bool has_log_dir() const;
  void clear_log_dir();
  static const int kLogDirFieldNumber = 3;
  const ::std::string& log_dir() const;
  void set_log_dir(const ::std::string& value);
  void set_log_dir(const char* value);
  void set_log_dir(const char* value, size_t size);
  ::std::string* mutable_log_dir();
  ::std::string* release_log_dir();
  void set_allocated_log_dir(::std::string* log_dir);

  // optional string log_subdir = 7;
  bool has_log_subdir() const;
  void clear_log_subdir();
  static const int kLogSubdirFieldNumber = 7;
  const ::std::string& log_subdir() const;
  void set_log_subdir(const ::std::string& value);
  void set_log_subdir(const char* value);
  void set_log_subdir(const char* value, size_t size);
  ::std::string* mutable_log_subdir();
  ::std::string* release_log_subdir();
  void set_allocated_log_subdir(::std::string* log_subdir);

  // optional string class_dir = 4;
  bool has_class_dir() const;
  void clear_class_dir();
  static const int kClassDirFieldNumber = 4;
  const ::std::string& class_dir() const;
  void set_class_dir(const ::std::string& value);
  void set_class_dir(const char* value);
  void set_class_dir(const char* value, size_t size);
  ::std::string* mutable_class_dir();
  ::std::string* release_class_dir();
  void set_allocated_class_dir(::std::string* class_dir);

  // optional string scoregrid_dir = 16;
  bool has_scoregrid_dir() const;
  void clear_scoregrid_dir();
  static const int kScoregridDirFieldNumber = 16;
  const ::std::string& scoregrid_dir() const;
  void set_scoregrid_dir(const ::std::string& value);
  void set_scoregrid_dir(const char* value);
  void set_scoregrid_dir(const char* value, size_t size);
  ::std::string* mutable_scoregrid_dir();
  ::std::string* release_scoregrid_dir();
  void set_allocated_scoregrid_dir(::std::string* scoregrid_dir);

  // optional string partprob_dir = 17;
  bool has_partprob_dir() const;
  void clear_partprob_dir();
  static const int kPartprobDirFieldNumber = 17;
  const ::std::string& partprob_dir() const;
  void set_partprob_dir(const ::std::string& value);
  void set_partprob_dir(const char* value);
  void set_partprob_dir(const char* value, size_t size);
  ::std::string* mutable_partprob_dir();
  ::std::string* release_partprob_dir();
  void set_allocated_partprob_dir(::std::string* partprob_dir);

  // optional string part_conf = 5;
  bool has_part_conf() const;
  void clear_part_conf();
  static const int kPartConfFieldNumber = 5;
  const ::std::string& part_conf() const;
  void set_part_conf(const ::std::string& value);
  void set_part_conf(const char* value);
  void set_part_conf(const char* value, size_t size);
  ::std::string* mutable_part_conf();
  ::std::string* release_part_conf();
  void set_allocated_part_conf(::std::string* part_conf);

  // optional string abc_param = 6;
  bool has_abc_param() const;
  void clear_abc_param();
  static const int kAbcParamFieldNumber = 6;
  const ::std::string& abc_param() const;
  void set_abc_param(const ::std::string& value);
  void set_abc_param(const char* value);
  void set_abc_param(const char* value, size_t size);
  ::std::string* mutable_abc_param();
  ::std::string* release_abc_param();
  void set_allocated_abc_param(::std::string* abc_param);

  // optional float min_object_scale = 9 [default = 1];
  bool has_min_object_scale() const;
  void clear_min_object_scale();
  static const int kMinObjectScaleFieldNumber = 9;
  float min_object_scale() const;
  void set_min_object_scale(float value);

  // optional float max_object_scale = 10 [default = 1];
  bool has_max_object_scale() const;
  void clear_max_object_scale();
  static const int kMaxObjectScaleFieldNumber = 10;
  float max_object_scale() const;
  void set_max_object_scale(float value);

  // optional uint32 num_scale_steps = 11 [default = 1];
  bool has_num_scale_steps() const;
  void clear_num_scale_steps();
  static const int kNumScaleStepsFieldNumber = 11;
  ::google::protobuf::uint32 num_scale_steps() const;
  void set_num_scale_steps(::google::protobuf::uint32 value);

  // optional float min_part_rotation = 12 [default = 0];
  bool has_min_part_rotation() const;
  void clear_min_part_rotation();
  static const int kMinPartRotationFieldNumber = 12;
  float min_part_rotation() const;
  void set_min_part_rotation(float value);

  // optional float max_part_rotation = 13 [default = 0];
  bool has_max_part_rotation() const;
  void clear_max_part_rotation();
  static const int kMaxPartRotationFieldNumber = 13;
  float max_part_rotation() const;
  void set_max_part_rotation(float value);

  // optional uint32 num_rotation_steps = 14 [default = 1];
  bool has_num_rotation_steps() const;
  void clear_num_rotation_steps();
  static const int kNumRotationStepsFieldNumber = 14;
  ::google::protobuf::uint32 num_rotation_steps() const;
  void set_num_rotation_steps(::google::protobuf::uint32 value);

  // optional bool flip_orientation = 15 [default = false];
  bool has_flip_orientation() const;
  void clear_flip_orientation();
  static const int kFlipOrientationFieldNumber = 15;
  bool flip_orientation() const;
  void set_flip_orientation(bool value);

  // optional uint32 scorehist_nbins = 18 [default = 20];
  bool has_scorehist_nbins() const;
  void clear_scorehist_nbins();
  static const int kScorehistNbinsFieldNumber = 18;
  ::google::protobuf::uint32 scorehist_nbins() const;
  void set_scorehist_nbins(::google::protobuf::uint32 value);

  // optional uint32 scorehist_def_pw = 19 [default = 10];
  bool has_scorehist_def_pw() const;
  void clear_scorehist_def_pw();
  static const int kScorehistDefPwFieldNumber = 19;
  ::google::protobuf::uint32 scorehist_def_pw() const;
  void set_scorehist_def_pw(::google::protobuf::uint32 value);

  // optional uint32 scorehist_def_ph = 20 [default = 10];
  bool has_scorehist_def_ph() const;
  void clear_scorehist_def_ph();
  static const int kScorehistDefPhFieldNumber = 20;
  ::google::protobuf::uint32 scorehist_def_ph() const;
  void set_scorehist_def_ph(::google::protobuf::uint32 value);

  // optional double scorehist_minval = 26 [default = -0.5];
  bool has_scorehist_minval() const;
  void clear_scorehist_minval();
  static const int kScorehistMinvalFieldNumber = 26;
  double scorehist_minval() const;
  void set_scorehist_minval(double value);

  // optional double scorehist_maxval = 27 [default = 0.5];
  bool has_scorehist_maxval() const;
  void clear_scorehist_maxval();
  static const int kScorehistMaxvalFieldNumber = 27;
  double scorehist_maxval() const;
  void set_scorehist_maxval(double value);

  // optional float object_height_width_ratio = 21 [default = 2.5];
  bool has_object_height_width_ratio() const;
  void clear_object_height_width_ratio();
  static const int kObjectHeightWidthRatioFieldNumber = 21;
  float object_height_width_ratio() const;
  void set_object_height_width_ratio(float value);

  // optional bool compute_part_marginals = 22 [default = false];
  bool has_compute_part_marginals() const;
  void clear_compute_part_marginals();
  static const int kComputePartMarginalsFieldNumber = 22;
  bool compute_part_marginals() const;
  void set_compute_part_marginals(bool value);

  // optional int32 num_pose_samples = 23 [default = 0];
  bool has_num_pose_samples() const;
  void clear_num_pose_samples();
  static const int kNumPoseSamplesFieldNumber = 23;
  ::google::protobuf::int32 num_pose_samples() const;
  void set_num_pose_samples(::google::protobuf::int32 value);

  // optional float strip_border_detections = 24 [default = 0];
  bool has_strip_border_detections() const;
  void clear_strip_border_detections();
  static const int kStripBorderDetectionsFieldNumber = 24;
  float strip_border_detections() const;
  void set_strip_border_detections(float value);

  // optional bool save_image_scoregrid = 25 [default = false];
  bool has_save_image_scoregrid() const;
  void clear_save_image_scoregrid();
  static const int kSaveImageScoregridFieldNumber = 25;
  bool save_image_scoregrid() const;
  void set_save_image_scoregrid(bool value);

  // @@protoc_insertion_point(class_scope:ExpParam)
 private:
  inline void set_has_log_dir();
  inline void clear_has_log_dir();
  inline void set_has_log_subdir();
  inline void clear_has_log_subdir();
  inline void set_has_class_dir();
  inline void clear_has_class_dir();
  inline void set_has_scoregrid_dir();
  inline void clear_has_scoregrid_dir();
  inline void set_has_partprob_dir();
  inline void clear_has_partprob_dir();
  inline void set_has_part_conf();
  inline void clear_has_part_conf();
  inline void set_has_abc_param();
  inline void clear_has_abc_param();
  inline void set_has_min_object_scale();
  inline void clear_has_min_object_scale();
  inline void set_has_max_object_scale();
  inline void clear_has_max_object_scale();
  inline void set_has_num_scale_steps();
  inline void clear_has_num_scale_steps();
  inline void set_has_min_part_rotation();
  inline void clear_has_min_part_rotation();
  inline void set_has_max_part_rotation();
  inline void clear_has_max_part_rotation();
  inline void set_has_num_rotation_steps();
  inline void clear_has_num_rotation_steps();
  inline void set_has_flip_orientation();
  inline void clear_has_flip_orientation();
  inline void set_has_scorehist_nbins();
  inline void clear_has_scorehist_nbins();
  inline void set_has_scorehist_def_pw();
  inline void clear_has_scorehist_def_pw();
  inline void set_has_scorehist_def_ph();
  inline void clear_has_scorehist_def_ph();
  inline void set_has_scorehist_minval();
  inline void clear_has_scorehist_minval();
  inline void set_has_scorehist_maxval();
  inline void clear_has_scorehist_maxval();
  inline void set_has_object_height_width_ratio();
  inline void clear_has_object_height_width_ratio();
  inline void set_has_compute_part_marginals();
  inline void clear_has_compute_part_marginals();
  inline void set_has_num_pose_samples();
  inline void clear_has_num_pose_samples();
  inline void set_has_strip_border_detections();
  inline void clear_has_strip_border_detections();
  inline void set_has_save_image_scoregrid();
  inline void clear_has_save_image_scoregrid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> train_dataset_;
  ::google::protobuf::RepeatedPtrField< ::std::string> validation_dataset_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_dataset_;
  ::google::protobuf::internal::ArenaStringPtr log_dir_;
  ::google::protobuf::internal::ArenaStringPtr log_subdir_;
  ::google::protobuf::internal::ArenaStringPtr class_dir_;
  ::google::protobuf::internal::ArenaStringPtr scoregrid_dir_;
  ::google::protobuf::internal::ArenaStringPtr partprob_dir_;
  ::google::protobuf::internal::ArenaStringPtr part_conf_;
  ::google::protobuf::internal::ArenaStringPtr abc_param_;
  float min_part_rotation_;
  float max_part_rotation_;
  bool flip_orientation_;
  bool compute_part_marginals_;
  bool save_image_scoregrid_;
  ::google::protobuf::int32 num_pose_samples_;
  float strip_border_detections_;
  float min_object_scale_;
  float max_object_scale_;
  ::google::protobuf::uint32 num_scale_steps_;
  ::google::protobuf::uint32 num_rotation_steps_;
  ::google::protobuf::uint32 scorehist_nbins_;
  ::google::protobuf::uint32 scorehist_def_pw_;
  double scorehist_minval_;
  ::google::protobuf::uint32 scorehist_def_ph_;
  float object_height_width_ratio_;
  double scorehist_maxval_;
  friend void  protobuf_InitDefaults_ExpParam_2eproto_impl();
  friend void  protobuf_AddDesc_ExpParam_2eproto_impl();
  friend void protobuf_AssignDesc_ExpParam_2eproto();
  friend void protobuf_ShutdownFile_ExpParam_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ExpParam> ExpParam_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ExpParam

// repeated string train_dataset = 1;
inline int ExpParam::train_dataset_size() const {
  return train_dataset_.size();
}
inline void ExpParam::clear_train_dataset() {
  train_dataset_.Clear();
}
inline const ::std::string& ExpParam::train_dataset(int index) const {
  // @@protoc_insertion_point(field_get:ExpParam.train_dataset)
  return train_dataset_.Get(index);
}
inline ::std::string* ExpParam::mutable_train_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:ExpParam.train_dataset)
  return train_dataset_.Mutable(index);
}
inline void ExpParam::set_train_dataset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ExpParam.train_dataset)
  train_dataset_.Mutable(index)->assign(value);
}
inline void ExpParam::set_train_dataset(int index, const char* value) {
  train_dataset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExpParam.train_dataset)
}
inline void ExpParam::set_train_dataset(int index, const char* value, size_t size) {
  train_dataset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExpParam.train_dataset)
}
inline ::std::string* ExpParam::add_train_dataset() {
  // @@protoc_insertion_point(field_add_mutable:ExpParam.train_dataset)
  return train_dataset_.Add();
}
inline void ExpParam::add_train_dataset(const ::std::string& value) {
  train_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExpParam.train_dataset)
}
inline void ExpParam::add_train_dataset(const char* value) {
  train_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExpParam.train_dataset)
}
inline void ExpParam::add_train_dataset(const char* value, size_t size) {
  train_dataset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExpParam.train_dataset)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExpParam::train_dataset() const {
  // @@protoc_insertion_point(field_list:ExpParam.train_dataset)
  return train_dataset_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExpParam::mutable_train_dataset() {
  // @@protoc_insertion_point(field_mutable_list:ExpParam.train_dataset)
  return &train_dataset_;
}

// repeated string validation_dataset = 8;
inline int ExpParam::validation_dataset_size() const {
  return validation_dataset_.size();
}
inline void ExpParam::clear_validation_dataset() {
  validation_dataset_.Clear();
}
inline const ::std::string& ExpParam::validation_dataset(int index) const {
  // @@protoc_insertion_point(field_get:ExpParam.validation_dataset)
  return validation_dataset_.Get(index);
}
inline ::std::string* ExpParam::mutable_validation_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:ExpParam.validation_dataset)
  return validation_dataset_.Mutable(index);
}
inline void ExpParam::set_validation_dataset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ExpParam.validation_dataset)
  validation_dataset_.Mutable(index)->assign(value);
}
inline void ExpParam::set_validation_dataset(int index, const char* value) {
  validation_dataset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExpParam.validation_dataset)
}
inline void ExpParam::set_validation_dataset(int index, const char* value, size_t size) {
  validation_dataset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExpParam.validation_dataset)
}
inline ::std::string* ExpParam::add_validation_dataset() {
  // @@protoc_insertion_point(field_add_mutable:ExpParam.validation_dataset)
  return validation_dataset_.Add();
}
inline void ExpParam::add_validation_dataset(const ::std::string& value) {
  validation_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExpParam.validation_dataset)
}
inline void ExpParam::add_validation_dataset(const char* value) {
  validation_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExpParam.validation_dataset)
}
inline void ExpParam::add_validation_dataset(const char* value, size_t size) {
  validation_dataset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExpParam.validation_dataset)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExpParam::validation_dataset() const {
  // @@protoc_insertion_point(field_list:ExpParam.validation_dataset)
  return validation_dataset_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExpParam::mutable_validation_dataset() {
  // @@protoc_insertion_point(field_mutable_list:ExpParam.validation_dataset)
  return &validation_dataset_;
}

// repeated string test_dataset = 2;
inline int ExpParam::test_dataset_size() const {
  return test_dataset_.size();
}
inline void ExpParam::clear_test_dataset() {
  test_dataset_.Clear();
}
inline const ::std::string& ExpParam::test_dataset(int index) const {
  // @@protoc_insertion_point(field_get:ExpParam.test_dataset)
  return test_dataset_.Get(index);
}
inline ::std::string* ExpParam::mutable_test_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:ExpParam.test_dataset)
  return test_dataset_.Mutable(index);
}
inline void ExpParam::set_test_dataset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ExpParam.test_dataset)
  test_dataset_.Mutable(index)->assign(value);
}
inline void ExpParam::set_test_dataset(int index, const char* value) {
  test_dataset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ExpParam.test_dataset)
}
inline void ExpParam::set_test_dataset(int index, const char* value, size_t size) {
  test_dataset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ExpParam.test_dataset)
}
inline ::std::string* ExpParam::add_test_dataset() {
  // @@protoc_insertion_point(field_add_mutable:ExpParam.test_dataset)
  return test_dataset_.Add();
}
inline void ExpParam::add_test_dataset(const ::std::string& value) {
  test_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ExpParam.test_dataset)
}
inline void ExpParam::add_test_dataset(const char* value) {
  test_dataset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ExpParam.test_dataset)
}
inline void ExpParam::add_test_dataset(const char* value, size_t size) {
  test_dataset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ExpParam.test_dataset)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExpParam::test_dataset() const {
  // @@protoc_insertion_point(field_list:ExpParam.test_dataset)
  return test_dataset_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExpParam::mutable_test_dataset() {
  // @@protoc_insertion_point(field_mutable_list:ExpParam.test_dataset)
  return &test_dataset_;
}

// optional string log_dir = 3;
inline bool ExpParam::has_log_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExpParam::set_has_log_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExpParam::clear_has_log_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExpParam::clear_log_dir() {
  log_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_dir();
}
inline const ::std::string& ExpParam::log_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.log_dir)
  return log_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_log_dir(const ::std::string& value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.log_dir)
}
inline void ExpParam::set_log_dir(const char* value) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.log_dir)
}
inline void ExpParam::set_log_dir(const char* value, size_t size) {
  set_has_log_dir();
  log_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.log_dir)
}
inline ::std::string* ExpParam::mutable_log_dir() {
  set_has_log_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.log_dir)
  return log_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpParam::release_log_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.log_dir)
  clear_has_log_dir();
  return log_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_allocated_log_dir(::std::string* log_dir) {
  if (log_dir != NULL) {
    set_has_log_dir();
  } else {
    clear_has_log_dir();
  }
  log_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.log_dir)
}

// optional string log_subdir = 7;
inline bool ExpParam::has_log_subdir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExpParam::set_has_log_subdir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExpParam::clear_has_log_subdir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExpParam::clear_log_subdir() {
  log_subdir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_subdir();
}
inline const ::std::string& ExpParam::log_subdir() const {
  // @@protoc_insertion_point(field_get:ExpParam.log_subdir)
  return log_subdir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_log_subdir(const ::std::string& value) {
  set_has_log_subdir();
  log_subdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.log_subdir)
}
inline void ExpParam::set_log_subdir(const char* value) {
  set_has_log_subdir();
  log_subdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.log_subdir)
}
inline void ExpParam::set_log_subdir(const char* value, size_t size) {
  set_has_log_subdir();
  log_subdir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.log_subdir)
}
inline ::std::string* ExpParam::mutable_log_subdir() {
  set_has_log_subdir();
  // @@protoc_insertion_point(field_mutable:ExpParam.log_subdir)
  return log_subdir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpParam::release_log_subdir() {
  // @@protoc_insertion_point(field_release:ExpParam.log_subdir)
  clear_has_log_subdir();
  return log_subdir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_allocated_log_subdir(::std::string* log_subdir) {
  if (log_subdir != NULL) {
    set_has_log_subdir();
  } else {
    clear_has_log_subdir();
  }
  log_subdir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_subdir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.log_subdir)
}

// optional string class_dir = 4;
inline bool ExpParam::has_class_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExpParam::set_has_class_dir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExpParam::clear_has_class_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExpParam::clear_class_dir() {
  class_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_dir();
}
inline const ::std::string& ExpParam::class_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.class_dir)
  return class_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_class_dir(const ::std::string& value) {
  set_has_class_dir();
  class_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.class_dir)
}
inline void ExpParam::set_class_dir(const char* value) {
  set_has_class_dir();
  class_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.class_dir)
}
inline void ExpParam::set_class_dir(const char* value, size_t size) {
  set_has_class_dir();
  class_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.class_dir)
}
inline ::std::string* ExpParam::mutable_class_dir() {
  set_has_class_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.class_dir)
  return class_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpParam::release_class_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.class_dir)
  clear_has_class_dir();
  return class_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_allocated_class_dir(::std::string* class_dir) {
  if (class_dir != NULL) {
    set_has_class_dir();
  } else {
    clear_has_class_dir();
  }
  class_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.class_dir)
}

// optional string scoregrid_dir = 16;
inline bool ExpParam::has_scoregrid_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExpParam::set_has_scoregrid_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExpParam::clear_has_scoregrid_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExpParam::clear_scoregrid_dir() {
  scoregrid_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scoregrid_dir();
}
inline const ::std::string& ExpParam::scoregrid_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.scoregrid_dir)
  return scoregrid_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_scoregrid_dir(const ::std::string& value) {
  set_has_scoregrid_dir();
  scoregrid_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.scoregrid_dir)
}
inline void ExpParam::set_scoregrid_dir(const char* value) {
  set_has_scoregrid_dir();
  scoregrid_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.scoregrid_dir)
}
inline void ExpParam::set_scoregrid_dir(const char* value, size_t size) {
  set_has_scoregrid_dir();
  scoregrid_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.scoregrid_dir)
}
inline ::std::string* ExpParam::mutable_scoregrid_dir() {
  set_has_scoregrid_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.scoregrid_dir)
  return scoregrid_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpParam::release_scoregrid_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.scoregrid_dir)
  clear_has_scoregrid_dir();
  return scoregrid_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_allocated_scoregrid_dir(::std::string* scoregrid_dir) {
  if (scoregrid_dir != NULL) {
    set_has_scoregrid_dir();
  } else {
    clear_has_scoregrid_dir();
  }
  scoregrid_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scoregrid_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.scoregrid_dir)
}

// optional string partprob_dir = 17;
inline bool ExpParam::has_partprob_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExpParam::set_has_partprob_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExpParam::clear_has_partprob_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExpParam::clear_partprob_dir() {
  partprob_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partprob_dir();
}
inline const ::std::string& ExpParam::partprob_dir() const {
  // @@protoc_insertion_point(field_get:ExpParam.partprob_dir)
  return partprob_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_partprob_dir(const ::std::string& value) {
  set_has_partprob_dir();
  partprob_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.partprob_dir)
}
inline void ExpParam::set_partprob_dir(const char* value) {
  set_has_partprob_dir();
  partprob_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.partprob_dir)
}
inline void ExpParam::set_partprob_dir(const char* value, size_t size) {
  set_has_partprob_dir();
  partprob_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.partprob_dir)
}
inline ::std::string* ExpParam::mutable_partprob_dir() {
  set_has_partprob_dir();
  // @@protoc_insertion_point(field_mutable:ExpParam.partprob_dir)
  return partprob_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpParam::release_partprob_dir() {
  // @@protoc_insertion_point(field_release:ExpParam.partprob_dir)
  clear_has_partprob_dir();
  return partprob_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_allocated_partprob_dir(::std::string* partprob_dir) {
  if (partprob_dir != NULL) {
    set_has_partprob_dir();
  } else {
    clear_has_partprob_dir();
  }
  partprob_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partprob_dir);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.partprob_dir)
}

// optional string part_conf = 5;
inline bool ExpParam::has_part_conf() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ExpParam::set_has_part_conf() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ExpParam::clear_has_part_conf() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ExpParam::clear_part_conf() {
  part_conf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_part_conf();
}
inline const ::std::string& ExpParam::part_conf() const {
  // @@protoc_insertion_point(field_get:ExpParam.part_conf)
  return part_conf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_part_conf(const ::std::string& value) {
  set_has_part_conf();
  part_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.part_conf)
}
inline void ExpParam::set_part_conf(const char* value) {
  set_has_part_conf();
  part_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.part_conf)
}
inline void ExpParam::set_part_conf(const char* value, size_t size) {
  set_has_part_conf();
  part_conf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.part_conf)
}
inline ::std::string* ExpParam::mutable_part_conf() {
  set_has_part_conf();
  // @@protoc_insertion_point(field_mutable:ExpParam.part_conf)
  return part_conf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpParam::release_part_conf() {
  // @@protoc_insertion_point(field_release:ExpParam.part_conf)
  clear_has_part_conf();
  return part_conf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_allocated_part_conf(::std::string* part_conf) {
  if (part_conf != NULL) {
    set_has_part_conf();
  } else {
    clear_has_part_conf();
  }
  part_conf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_conf);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.part_conf)
}

// optional string abc_param = 6;
inline bool ExpParam::has_abc_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ExpParam::set_has_abc_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ExpParam::clear_has_abc_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ExpParam::clear_abc_param() {
  abc_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_abc_param();
}
inline const ::std::string& ExpParam::abc_param() const {
  // @@protoc_insertion_point(field_get:ExpParam.abc_param)
  return abc_param_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_abc_param(const ::std::string& value) {
  set_has_abc_param();
  abc_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ExpParam.abc_param)
}
inline void ExpParam::set_abc_param(const char* value) {
  set_has_abc_param();
  abc_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ExpParam.abc_param)
}
inline void ExpParam::set_abc_param(const char* value, size_t size) {
  set_has_abc_param();
  abc_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ExpParam.abc_param)
}
inline ::std::string* ExpParam::mutable_abc_param() {
  set_has_abc_param();
  // @@protoc_insertion_point(field_mutable:ExpParam.abc_param)
  return abc_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExpParam::release_abc_param() {
  // @@protoc_insertion_point(field_release:ExpParam.abc_param)
  clear_has_abc_param();
  return abc_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExpParam::set_allocated_abc_param(::std::string* abc_param) {
  if (abc_param != NULL) {
    set_has_abc_param();
  } else {
    clear_has_abc_param();
  }
  abc_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abc_param);
  // @@protoc_insertion_point(field_set_allocated:ExpParam.abc_param)
}

// optional float min_object_scale = 9 [default = 1];
inline bool ExpParam::has_min_object_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ExpParam::set_has_min_object_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ExpParam::clear_has_min_object_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ExpParam::clear_min_object_scale() {
  min_object_scale_ = 1;
  clear_has_min_object_scale();
}
inline float ExpParam::min_object_scale() const {
  // @@protoc_insertion_point(field_get:ExpParam.min_object_scale)
  return min_object_scale_;
}
inline void ExpParam::set_min_object_scale(float value) {
  set_has_min_object_scale();
  min_object_scale_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.min_object_scale)
}

// optional float max_object_scale = 10 [default = 1];
inline bool ExpParam::has_max_object_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ExpParam::set_has_max_object_scale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ExpParam::clear_has_max_object_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ExpParam::clear_max_object_scale() {
  max_object_scale_ = 1;
  clear_has_max_object_scale();
}
inline float ExpParam::max_object_scale() const {
  // @@protoc_insertion_point(field_get:ExpParam.max_object_scale)
  return max_object_scale_;
}
inline void ExpParam::set_max_object_scale(float value) {
  set_has_max_object_scale();
  max_object_scale_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.max_object_scale)
}

// optional uint32 num_scale_steps = 11 [default = 1];
inline bool ExpParam::has_num_scale_steps() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ExpParam::set_has_num_scale_steps() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ExpParam::clear_has_num_scale_steps() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ExpParam::clear_num_scale_steps() {
  num_scale_steps_ = 1u;
  clear_has_num_scale_steps();
}
inline ::google::protobuf::uint32 ExpParam::num_scale_steps() const {
  // @@protoc_insertion_point(field_get:ExpParam.num_scale_steps)
  return num_scale_steps_;
}
inline void ExpParam::set_num_scale_steps(::google::protobuf::uint32 value) {
  set_has_num_scale_steps();
  num_scale_steps_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.num_scale_steps)
}

// optional float min_part_rotation = 12 [default = 0];
inline bool ExpParam::has_min_part_rotation() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ExpParam::set_has_min_part_rotation() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ExpParam::clear_has_min_part_rotation() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ExpParam::clear_min_part_rotation() {
  min_part_rotation_ = 0;
  clear_has_min_part_rotation();
}
inline float ExpParam::min_part_rotation() const {
  // @@protoc_insertion_point(field_get:ExpParam.min_part_rotation)
  return min_part_rotation_;
}
inline void ExpParam::set_min_part_rotation(float value) {
  set_has_min_part_rotation();
  min_part_rotation_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.min_part_rotation)
}

// optional float max_part_rotation = 13 [default = 0];
inline bool ExpParam::has_max_part_rotation() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ExpParam::set_has_max_part_rotation() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ExpParam::clear_has_max_part_rotation() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ExpParam::clear_max_part_rotation() {
  max_part_rotation_ = 0;
  clear_has_max_part_rotation();
}
inline float ExpParam::max_part_rotation() const {
  // @@protoc_insertion_point(field_get:ExpParam.max_part_rotation)
  return max_part_rotation_;
}
inline void ExpParam::set_max_part_rotation(float value) {
  set_has_max_part_rotation();
  max_part_rotation_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.max_part_rotation)
}

// optional uint32 num_rotation_steps = 14 [default = 1];
inline bool ExpParam::has_num_rotation_steps() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ExpParam::set_has_num_rotation_steps() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ExpParam::clear_has_num_rotation_steps() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ExpParam::clear_num_rotation_steps() {
  num_rotation_steps_ = 1u;
  clear_has_num_rotation_steps();
}
inline ::google::protobuf::uint32 ExpParam::num_rotation_steps() const {
  // @@protoc_insertion_point(field_get:ExpParam.num_rotation_steps)
  return num_rotation_steps_;
}
inline void ExpParam::set_num_rotation_steps(::google::protobuf::uint32 value) {
  set_has_num_rotation_steps();
  num_rotation_steps_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.num_rotation_steps)
}

// optional bool flip_orientation = 15 [default = false];
inline bool ExpParam::has_flip_orientation() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ExpParam::set_has_flip_orientation() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ExpParam::clear_has_flip_orientation() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ExpParam::clear_flip_orientation() {
  flip_orientation_ = false;
  clear_has_flip_orientation();
}
inline bool ExpParam::flip_orientation() const {
  // @@protoc_insertion_point(field_get:ExpParam.flip_orientation)
  return flip_orientation_;
}
inline void ExpParam::set_flip_orientation(bool value) {
  set_has_flip_orientation();
  flip_orientation_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.flip_orientation)
}

// optional uint32 scorehist_nbins = 18 [default = 20];
inline bool ExpParam::has_scorehist_nbins() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ExpParam::set_has_scorehist_nbins() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ExpParam::clear_has_scorehist_nbins() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ExpParam::clear_scorehist_nbins() {
  scorehist_nbins_ = 20u;
  clear_has_scorehist_nbins();
}
inline ::google::protobuf::uint32 ExpParam::scorehist_nbins() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_nbins)
  return scorehist_nbins_;
}
inline void ExpParam::set_scorehist_nbins(::google::protobuf::uint32 value) {
  set_has_scorehist_nbins();
  scorehist_nbins_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_nbins)
}

// optional uint32 scorehist_def_pw = 19 [default = 10];
inline bool ExpParam::has_scorehist_def_pw() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ExpParam::set_has_scorehist_def_pw() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ExpParam::clear_has_scorehist_def_pw() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ExpParam::clear_scorehist_def_pw() {
  scorehist_def_pw_ = 10u;
  clear_has_scorehist_def_pw();
}
inline ::google::protobuf::uint32 ExpParam::scorehist_def_pw() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_def_pw)
  return scorehist_def_pw_;
}
inline void ExpParam::set_scorehist_def_pw(::google::protobuf::uint32 value) {
  set_has_scorehist_def_pw();
  scorehist_def_pw_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_def_pw)
}

// optional uint32 scorehist_def_ph = 20 [default = 10];
inline bool ExpParam::has_scorehist_def_ph() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ExpParam::set_has_scorehist_def_ph() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ExpParam::clear_has_scorehist_def_ph() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ExpParam::clear_scorehist_def_ph() {
  scorehist_def_ph_ = 10u;
  clear_has_scorehist_def_ph();
}
inline ::google::protobuf::uint32 ExpParam::scorehist_def_ph() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_def_ph)
  return scorehist_def_ph_;
}
inline void ExpParam::set_scorehist_def_ph(::google::protobuf::uint32 value) {
  set_has_scorehist_def_ph();
  scorehist_def_ph_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_def_ph)
}

// optional double scorehist_minval = 26 [default = -0.5];
inline bool ExpParam::has_scorehist_minval() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ExpParam::set_has_scorehist_minval() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ExpParam::clear_has_scorehist_minval() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ExpParam::clear_scorehist_minval() {
  scorehist_minval_ = -0.5;
  clear_has_scorehist_minval();
}
inline double ExpParam::scorehist_minval() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_minval)
  return scorehist_minval_;
}
inline void ExpParam::set_scorehist_minval(double value) {
  set_has_scorehist_minval();
  scorehist_minval_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_minval)
}

// optional double scorehist_maxval = 27 [default = 0.5];
inline bool ExpParam::has_scorehist_maxval() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ExpParam::set_has_scorehist_maxval() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ExpParam::clear_has_scorehist_maxval() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ExpParam::clear_scorehist_maxval() {
  scorehist_maxval_ = 0.5;
  clear_has_scorehist_maxval();
}
inline double ExpParam::scorehist_maxval() const {
  // @@protoc_insertion_point(field_get:ExpParam.scorehist_maxval)
  return scorehist_maxval_;
}
inline void ExpParam::set_scorehist_maxval(double value) {
  set_has_scorehist_maxval();
  scorehist_maxval_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.scorehist_maxval)
}

// optional float object_height_width_ratio = 21 [default = 2.5];
inline bool ExpParam::has_object_height_width_ratio() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ExpParam::set_has_object_height_width_ratio() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ExpParam::clear_has_object_height_width_ratio() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ExpParam::clear_object_height_width_ratio() {
  object_height_width_ratio_ = 2.5f;
  clear_has_object_height_width_ratio();
}
inline float ExpParam::object_height_width_ratio() const {
  // @@protoc_insertion_point(field_get:ExpParam.object_height_width_ratio)
  return object_height_width_ratio_;
}
inline void ExpParam::set_object_height_width_ratio(float value) {
  set_has_object_height_width_ratio();
  object_height_width_ratio_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.object_height_width_ratio)
}

// optional bool compute_part_marginals = 22 [default = false];
inline bool ExpParam::has_compute_part_marginals() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ExpParam::set_has_compute_part_marginals() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ExpParam::clear_has_compute_part_marginals() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ExpParam::clear_compute_part_marginals() {
  compute_part_marginals_ = false;
  clear_has_compute_part_marginals();
}
inline bool ExpParam::compute_part_marginals() const {
  // @@protoc_insertion_point(field_get:ExpParam.compute_part_marginals)
  return compute_part_marginals_;
}
inline void ExpParam::set_compute_part_marginals(bool value) {
  set_has_compute_part_marginals();
  compute_part_marginals_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.compute_part_marginals)
}

// optional int32 num_pose_samples = 23 [default = 0];
inline bool ExpParam::has_num_pose_samples() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ExpParam::set_has_num_pose_samples() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ExpParam::clear_has_num_pose_samples() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ExpParam::clear_num_pose_samples() {
  num_pose_samples_ = 0;
  clear_has_num_pose_samples();
}
inline ::google::protobuf::int32 ExpParam::num_pose_samples() const {
  // @@protoc_insertion_point(field_get:ExpParam.num_pose_samples)
  return num_pose_samples_;
}
inline void ExpParam::set_num_pose_samples(::google::protobuf::int32 value) {
  set_has_num_pose_samples();
  num_pose_samples_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.num_pose_samples)
}

// optional float strip_border_detections = 24 [default = 0];
inline bool ExpParam::has_strip_border_detections() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ExpParam::set_has_strip_border_detections() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ExpParam::clear_has_strip_border_detections() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ExpParam::clear_strip_border_detections() {
  strip_border_detections_ = 0;
  clear_has_strip_border_detections();
}
inline float ExpParam::strip_border_detections() const {
  // @@protoc_insertion_point(field_get:ExpParam.strip_border_detections)
  return strip_border_detections_;
}
inline void ExpParam::set_strip_border_detections(float value) {
  set_has_strip_border_detections();
  strip_border_detections_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.strip_border_detections)
}

// optional bool save_image_scoregrid = 25 [default = false];
inline bool ExpParam::has_save_image_scoregrid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ExpParam::set_has_save_image_scoregrid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ExpParam::clear_has_save_image_scoregrid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ExpParam::clear_save_image_scoregrid() {
  save_image_scoregrid_ = false;
  clear_has_save_image_scoregrid();
}
inline bool ExpParam::save_image_scoregrid() const {
  // @@protoc_insertion_point(field_get:ExpParam.save_image_scoregrid)
  return save_image_scoregrid_;
}
inline void ExpParam::set_save_image_scoregrid(bool value) {
  set_has_save_image_scoregrid();
  save_image_scoregrid_ = value;
  // @@protoc_insertion_point(field_set:ExpParam.save_image_scoregrid)
}

inline const ExpParam* ExpParam::internal_default_instance() {
  return &ExpParam_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ExpParam_2eproto__INCLUDED
