// sobs.cpp : 定义 DLL 应用程序的导出函数。
//

//#define _CRTDBG_MAP_ALLOC
//#include <stdlib.h>
//#include <crtdbg.h>

#include "cv.h"
#include "highgui.h"
#include "math.h"
#include "sobs.h"

// 这是导出变量的一个示例
//SOBS_API int nsobs=0;

// 这是导出函数的一个示例。
//SOBS_API int fnsobs(void)
//{
//	return 42;
//}

// 这是已导出类的构造函数。
// 有关类定义的信息，请参阅 sobs.h

const float SOBS::A[3][3]={{0.1353, 0.3679, 0.1353},
						   {0.3679, 1.0000, 0.3679},
						   {0.1353, 0.3679, 0.1353}};

//Constructor function
SOBS::SOBS(int pK, int pe1, int pe2, int pc1, int pc2,
		   int pgama, int pbeta, int pTS, int pTH)
{//Constructor function
	frameIndex = 0;
	//Set the SOBS parameters
	K   = pK;
	e1  = pe1;
	e2  = pe2;
	c1  = pc1;
	c2  = pc2;
	gama= pgama;
	beta= pbeta;
	pTS = pTS;
	TH  = pTH;

	step = 1;
}

bool SOBS::InitSOBS(IplImage* firstFrame)
{//Initialize the background mode
	//step = 1;
	iHeight = firstFrame->height / step;
	iWidth  = firstFrame->width / step;
	iChannel= firstFrame->nChannels;

	if ((scaledImage = 
		cvCreateImage(cvSize(iWidth,iHeight),firstFrame->depth,firstFrame->nChannels))
		== NULL)
		return false;
	cvResize(firstFrame,scaledImage,CV_INTER_NN);
	
	iWidthSetp = scaledImage->widthStep;

	if ((hsvImage = 
		cvCreateMat(iHeight, iWidth, CV_8UC3))
		==NULL)
		return false;

	//cvCvtColor(scaledImage, hsvImage, CV_RGB2HSV);
	cvCvtColor(scaledImage, hsvImage, CV_RGB2YCrCb);

	restrictROI();

	if((backgroundModle = 
		cvCreateMat(iHeight*N, iWidth*N, CV_8UC3))
		==NULL)
		return false;

	if ((foregroundMaskImage = 
		cvCreateImage(cvSize(iWidth,iHeight),8,1))==NULL)
		return false;
	cvZero(foregroundMaskImage);

	InitBkMode(hsvImage);

	return true;
}

void SOBS::InitBkMode(CvMat* image)
{
	uchar* ptr = image->data.ptr;
	uchar* bkPtr/* = backgroundModle->data.ptr*/;
	
	for (int j=0; j<iHeight;j++)
	{//for each row
		for (int i=0; i<iWidth; i++)
		{//for each  col			
			for (int jj=0; jj<N; jj++)
			{				
				for (int ii=0; ii<N; ii++)
				{
					cvSet2D(backgroundModle,j*N+jj,i*N+ii,cvGet2D(image,j,i));
					//bkPtr = (uchar*)cvPtr2D(backgroundModle, j*N+jj, i*N+ii);
					//for (int k=0; k<iChannel; k++)
					//{//for each channel
					//	*(bkPtr++) = *(ptr+k);
					//}
				}
			}
			// ptr +=3;
			//ptr = (uchar*)cvPtr2D(image, j, i);
		}
		//ptr += offset;
	}
	//cvCvtColor(backgroundModle,backgroundModle,CV_HSV2RGB);
	//cvNamedWindow("BKMode", 1);
	//cvShowImage("BKMode",backgroundModle);
	//cvWaitKey(0);
	//cvCvtColor(backgroundModle,backgroundModle,CV_RGB2HSV);
	//cvNamedWindow("curFrame", 1);
	//cvShowImage("curFrame",image);
	//cvWaitKey(1);

	

}

BestMacth SOBS::FindBestMacth(int y, int x, CvMat* image)
{
	//CvScalar p = cvGet2D(image, y, x);
	uchar* ptrC = cvPtr2D(image, y, x);
	//当前帧中（x,y）点的h,s,v值
	//uchar hc = p.val[0];
	//uchar sc = p.val[1];
	//uchar vc = p.val[2];

	uchar hc = ptrC[0];
	uchar sc = ptrC[1];
	uchar vc = ptrC[2];

	// 背景模型中的h,s,v
	uchar hb, sb, vb;

	bool isShadow = false;
	int dist=0; 

	int macthX = x*N+1;
	int macthY = y*N+1;
	//float* backPtr = (float*)cvPtr2D(backgroundModle, macthY, macthX);	
	{
		uchar* ptrB = cvPtr2D(backgroundModle, macthY,macthX);
		//CvScalar pb = cvGet2D(backgroundModle, macthY, macthX);
		//hb = pb.val[0];
		//sb = pb.val[1];
		//vb = pb.val[2];

		hb = ptrB[0];
		sb = ptrB[1];
		vb = ptrB[2];

		//int d1 = vc*sc*COS[hc*2] - vb*sb*COS[hb*2];
		//int d2 = vc*sc*SIN[hc*2] - vb*sb*SIN[hb*2];
		//int d3 = vc - vb;
		int d1 = (hc-hb)*0.3;
		int d2 = sc-sb;
		int d3 = vc - vb;
		dist = d1*d1 + d2*d2 + d3*d3;
		//dist = (int)sqrt((float)dist);
		//if (dist < 10)
		//{
		//	BestMacth bm = {macthX+1, macthY+1, dist, true};
		//	return bm;
		//}
	}

	int tDist;
	int startX = macthX-1;
	int startY = macthY-1;
	for (int j = 0; j < N; j++)
	{
		for(int i = 0; i < N; i++)
		{
			if (i==1 && j==1)
				continue;
			
			CvScalar pb = cvGet2D(backgroundModle, startY+j, startX+i);
			hb = pb.val[0];
			sb = pb.val[1];
			vb = pb.val[2];
			//以下3行注释掉，因为它是HSV空间的计算方法
			//int d1 = vc*sc*COS[hc] - vb*sb*COS[hb];
			//int d2 = vc*sc*SIN[hc] - vb*sb*SIN[hb];
			//int d3 = vc - vb;
			int d1 = (hc-hb)*0.3;
			int d2 = sc-sb;
			int d3 = vc-vb;
			tDist = d1*d1 + d2*d2 + d3*d3;
			//tDist = (int)sqrt((float)tDist);

			if(tDist < dist)
			{
				dist = tDist;
				macthX = startX+i;
				macthY = startY+j;
			}

			// 阴影消除
			//if (tempY > 10 && tempY < 100)
			//{
			//	float colordist = abs((float)(tempCr + tempCr)/tempY);
			//	isShadow = colordist < 0.07f;
			//}

		}
	}
	BestMacth bm = {macthX, macthY, dist, isShadow};
	return bm;
}




void SOBS::UpdateBkMode(BestMacth bestMatch, CvMat* image)
{
	//Update backgroundMde here
	int x = bestMatch.x /  N;
	int y = bestMatch.y / N;

	// 判断是否可能越界
	//if (x==0 || 
	//	x>= iWidth-1 ||
	//	y==0 ||
	//	y >= iHeight-1)
	//{
	//	return;
	//}

	uchar* ptr = (uchar*)cvPtr2D(image, y, x);

	//当前帧中（x,y）点的h,s,v值
	uchar hc = *ptr;
	uchar sc = *(++ptr);
	uchar vc = *(++ptr);

	int startX = bestMatch.x - 1;
	int startY = bestMatch.y - 1;

	uchar* backPtr;

	for (int j = 0; j < N; j++)
	{
		for(int i = 0; i < N; i++)
		{
			backPtr = (uchar*)cvPtr2D(backgroundModle, startY+j,startX+i);
			*backPtr += (hc - (*backPtr))*c2*A[i][j]; backPtr++;
			*backPtr += (sc - (*backPtr))*c2*A[i][j]; backPtr++;
			*backPtr += (vc - (*backPtr))*c2*A[i][j];
		}
	}
}

bool SOBS::setROI(CvRect rect)
{
	roi.x = rect.x / step;
	roi.y = rect.y / step;
	roi.width = rect.width / step;
	roi.height = rect.height / step;
	//if ( rect.x > iWidth || rect.y < iHeight
	//	|| rect.width < 0 || rect.height < 0)
	//	return false;
	//roi = rect;
	//if (roi.x < 0)
	//	roi.x = 0;
	//if (roi.y < 0)
	//	roi.y = 0;
	//if (roi.x + roi.width > iWidth)
	//	roi.width = iWidth - roi.x;
	//if (roi.y + roi.height > iHeight)
	//	roi.height = iHeight - roi.y;
	return true;
}

bool SOBS::restrictROI()
{
	if ( roi.x > iWidth || roi.y > iHeight
		|| roi.width <= 0 || roi.height <= 0)
	{
		roi.x = 0;
		roi.y = 0;
		roi.width = iWidth;
		roi.height = iHeight;
		return false;
	}
	if (roi.x < 0)
		roi.x = 0;
	if (roi.y < 0)
		roi.y = 0;
	if (roi.x + roi.width > iWidth)
		roi.width = iWidth - roi.x;
	if (roi.y + roi.height > iHeight)
		roi.height = iHeight - roi.y;
	return true;
}

CvRect SOBS::getROI()
{
	return roi;
}

int SOBS::ProcessFrame(IplImage *image, IplImage* pFgImg)
{
	//cvNamedWindow("BKMode", 1);

	if (frameIndex == 0)
	{
		InitSOBS(image);
		frameIndex++;
		return 0;
	}

	cvResize(image,scaledImage,CV_INTER_NN);
	cvCvtColor(scaledImage,hsvImage,CV_RGB2YCrCb);

	//cvCvtColor(backgroundModle,backgroundModle,CV_HSV2RGB);
	//cvShowImage("BKMode",backgroundModle);
	//cvWaitKey(1);
	//cvCvtColor(backgroundModle,backgroundModle,CV_RGB2HSV);

	//cvShowImage("curFrame",hsvImage);
	//cvWaitKey(1);

	// 这里的这些+1或者-1是为了忽略最边上的一圈像素
	// 简化后期处理的越界判断
	int startX = roi.x + 1;
	int endX = startX + roi.width - 2;
	int startY = roi.y + 1;
	int endY = startY + roi.height - 2;
	
	char* ptrfg = foregroundMaskImage->imageData + startY * foregroundMaskImage->widthStep + startX;
	int offset  = foregroundMaskImage->widthStep - roi.width + 2;
	
	for (int j=startY; j<endY;j++)
	{//for rows
		for (int i=startX; i<endX; i++)
		{//for cols
			
			BestMacth macthPixel = FindBestMacth(j, i, hsvImage);
			//*ptrfg = (char)macthPixel.dist;
			if (macthPixel.dist<80)
			{
				//UpdateBkMode(macthPixel,hsvImage);
				*ptrfg = (char)0x00;
			}
			/*else if (macthPixel.isShadow)
			{
				*ptrfg = (char)0x80;
			}*/
			else
			{
				*ptrfg = (char)0xFF;
			}
			ptrfg ++;

		}
		ptrfg += offset;
	}

	//cvShowImage("BKMode", backgroundModle);
	cvErode(foregroundMaskImage,foregroundMaskImage);
	cvDilate(foregroundMaskImage,foregroundMaskImage);

	if (pFgImg != NULL)
		cvCopy(foregroundMaskImage, pFgImg);

	//Sleep(5000);
	return 1;
	
}

bool SOBS::GetFgmaskImage(IplImage* maskImage)
{
	//return foregroundMaskImage;
	if (foregroundMaskImage != NULL)
	{
		cvResize(foregroundMaskImage, maskImage,CV_INTER_NN);
		return true;
	}
	else
		return false;
}

const float SOBS::COS[]={
	1, 0.999847695156391, 0.999390827019096, 0.998629534754574, 0.997564050259824, 0.996194698091746, 0.994521895368273, 0.992546151641322, 0.99026806874157, 0.987688340595138, 
	0.984807753012208, 0.981627183447664, 0.978147600733806, 0.974370064785235, 0.970295726275996, 0.965925826289068, 0.961261695938319, 0.956304755963035, 0.951056516295154, 0.945518575599317, 
	0.939692620785908, 0.933580426497202, 0.927183854566787, 0.92050485345244, 0.913545457642601, 0.90630778703665, 0.898794046299167, 0.891006524188368, 0.882947592858927, 0.874619707139396, 
	0.866025403784439, 0.857167300702112, 0.848048096156426, 0.838670567945424, 0.829037572555042, 0.819152044288992, 0.809016994374947, 0.798635510047293, 0.788010753606722, 0.777145961456971, 
	0.766044443118978, 0.754709580222772, 0.743144825477394, 0.731353701619171, 0.719339800338651, 0.707106781186548, 0.694658370458997, 0.681998360062498, 0.669130606358858, 0.656059028990507, 
	0.642787609686539, 0.629320391049838, 0.615661475325658, 0.601815023152048, 0.587785252292473, 0.573576436351046, 0.559192903470747, 0.544639035015027, 0.529919264233205, 0.515038074910054, 
	0.5, 0.484809620246337, 0.469471562785891, 0.453990499739547, 0.438371146789077, 0.422618261740699, 0.4067366430758, 0.390731128489274, 0.374606593415912, 0.3583679495453, 
	0.342020143325669, 0.325568154457157, 0.309016994374947, 0.292371704722737, 0.275637355816999, 0.258819045102521, 0.241921895599668, 0.224951054343865, 0.207911690817759, 0.190808995376545, 
	0.17364817766693, 0.156434465040231, 0.139173100960066, 0.121869343405147, 0.104528463267653, 0.0871557427476581, 0.0697564737441255, 0.052335956242944, 0.0348994967025011, 0.0174524064372834, 
	6.12303176911189E-17, -0.0174524064372835, -0.0348994967025007, -0.0523359562429436, -0.0697564737441253, -0.0871557427476582, -0.104528463267653, -0.121869343405147, -0.139173100960065, -0.156434465040231, 
	-0.17364817766693, -0.190808995376545, -0.207911690817759, -0.224951054343865, -0.241921895599668, -0.258819045102521, -0.275637355816999, -0.292371704722737, -0.309016994374947, -0.325568154457156, 
	-0.342020143325669, -0.3583679495453, -0.374606593415912, -0.390731128489274, -0.4067366430758, -0.422618261740699, -0.438371146789078, -0.453990499739547, -0.469471562785891, -0.484809620246337, 
	-0.5, -0.515038074910054, -0.529919264233205, -0.544639035015027, -0.559192903470747, -0.573576436351046, -0.587785252292473, -0.601815023152048, -0.615661475325658, -0.629320391049837, 
	-0.642787609686539, -0.656059028990508, -0.669130606358858, -0.681998360062498, -0.694658370458997, -0.707106781186547, -0.719339800338651, -0.73135370161917, -0.743144825477394, -0.754709580222772, 
	-0.766044443118978, -0.777145961456971, -0.788010753606722, -0.798635510047293, -0.809016994374947, -0.819152044288992, -0.829037572555042, -0.838670567945424, -0.848048096156426, -0.857167300702112, 
	-0.866025403784439, -0.874619707139396, -0.882947592858927, -0.891006524188368, -0.898794046299167, -0.90630778703665, -0.913545457642601, -0.92050485345244, -0.927183854566787, -0.933580426497202, 
	-0.939692620785908, -0.945518575599317, -0.951056516295154, -0.956304755963035, -0.961261695938319, -0.965925826289068, -0.970295726275996, -0.974370064785235, -0.978147600733806, -0.981627183447664, 
	-0.984807753012208, -0.987688340595138, -0.99026806874157, -0.992546151641322, -0.994521895368273, -0.996194698091746, -0.997564050259824, -0.998629534754574, -0.999390827019096, -0.999847695156391, 
	-1, -0.999847695156391, -0.999390827019096, -0.998629534754574, -0.997564050259824, -0.996194698091746, -0.994521895368273, -0.992546151641322, -0.99026806874157, -0.987688340595138, 
	-0.984807753012208, -0.981627183447664, -0.978147600733806, -0.974370064785235, -0.970295726275996, -0.965925826289068, -0.961261695938319, -0.956304755963036, -0.951056516295154, -0.945518575599317, 
	-0.939692620785908, -0.933580426497202, -0.927183854566787, -0.92050485345244, -0.913545457642601, -0.90630778703665, -0.898794046299167, -0.891006524188368, -0.882947592858927, -0.874619707139396, 
	-0.866025403784439, -0.857167300702112, -0.848048096156426, -0.838670567945424, -0.829037572555042, -0.819152044288992, -0.809016994374948, -0.798635510047293, -0.788010753606722, -0.777145961456971, 
	-0.766044443118978, -0.754709580222772, -0.743144825477394, -0.731353701619171, -0.719339800338651, -0.707106781186548, -0.694658370458998, -0.681998360062499, -0.669130606358858, -0.656059028990508, 
	-0.642787609686539, -0.629320391049837, -0.615661475325658, -0.601815023152048, -0.587785252292473, -0.573576436351046, -0.559192903470747, -0.544639035015027, -0.529919264233205, -0.515038074910054, 
	-0.5, -0.484809620246337, -0.469471562785891, -0.453990499739547, -0.438371146789078, -0.4226182617407, -0.4067366430758, -0.390731128489274, -0.374606593415912, -0.358367949545301, 
	-0.342020143325669, -0.325568154457157, -0.309016994374948, -0.292371704722737, -0.275637355816999, -0.258819045102521, -0.241921895599668, -0.224951054343865, -0.20791169081776, -0.190808995376545, 
	-0.17364817766693, -0.156434465040231, -0.139173100960065, -0.121869343405147, -0.104528463267653, -0.0871557427476582, -0.0697564737441256, -0.0523359562429443, -0.0348994967025016, -0.0174524064372835, 
	-1.83690953073357E-16, 0.0174524064372831, 0.0348994967025013, 0.0523359562429439, 0.0697564737441252, 0.0871557427476579, 0.104528463267653, 0.121869343405148, 0.139173100960065, 0.156434465040231, 
	0.17364817766693, 0.190808995376544, 0.207911690817759, 0.224951054343865, 0.241921895599667, 0.258819045102521, 0.275637355816999, 0.292371704722737, 0.309016994374947, 0.325568154457156, 
	0.342020143325668, 0.3583679495453, 0.374606593415912, 0.390731128489273, 0.406736643075801, 0.4226182617407, 0.438371146789077, 0.453990499739547, 0.46947156278589, 0.484809620246337, 
	0.5, 0.515038074910054, 0.529919264233205, 0.544639035015027, 0.559192903470746, 0.573576436351046, 0.587785252292473, 0.601815023152048, 0.615661475325659, 0.629320391049838, 
	0.642787609686539, 0.656059028990507, 0.669130606358858, 0.681998360062498, 0.694658370458997, 0.707106781186547, 0.719339800338651, 0.731353701619171, 0.743144825477394, 0.754709580222772, 
	0.766044443118978, 0.777145961456971, 0.788010753606722, 0.798635510047293, 0.809016994374947, 0.819152044288992, 0.829037572555041, 0.838670567945424, 0.848048096156425, 0.857167300702112, 
	0.866025403784438, 0.874619707139396, 0.882947592858927, 0.891006524188368, 0.898794046299167, 0.90630778703665, 0.913545457642601, 0.92050485345244, 0.927183854566787, 0.933580426497202, 
	0.939692620785908, 0.945518575599317, 0.951056516295154, 0.956304755963036, 0.961261695938319, 0.965925826289068, 0.970295726275996, 0.974370064785235, 0.978147600733806, 0.981627183447664, 
	0.984807753012208, 0.987688340595138, 0.99026806874157, 0.992546151641322, 0.994521895368273, 0.996194698091746, 0.997564050259824, 0.998629534754574, 0.999390827019096, 0.999847695156391};

	const float SOBS::SIN[]={
		0, 0.0174524064372835, 0.034899496702501, 0.0523359562429438, 0.0697564737441253, 0.0871557427476582, 0.104528463267653, 0.121869343405147, 0.139173100960065, 0.156434465040231, 
		0.17364817766693, 0.190808995376545, 0.207911690817759, 0.224951054343865, 0.241921895599668, 0.258819045102521, 0.275637355816999, 0.292371704722737, 0.309016994374947, 0.325568154457157, 
		0.342020143325669, 0.3583679495453, 0.374606593415912, 0.390731128489274, 0.4067366430758, 0.422618261740699, 0.438371146789077, 0.453990499739547, 0.469471562785891, 0.484809620246337, 
		0.5, 0.515038074910054, 0.529919264233205, 0.544639035015027, 0.559192903470747, 0.573576436351046, 0.587785252292473, 0.601815023152048, 0.615661475325658, 0.629320391049837, 
		0.642787609686539, 0.656059028990507, 0.669130606358858, 0.681998360062498, 0.694658370458997, 0.707106781186547, 0.719339800338651, 0.73135370161917, 0.743144825477394, 0.754709580222772, 
		0.766044443118978, 0.777145961456971, 0.788010753606722, 0.798635510047293, 0.809016994374947, 0.819152044288992, 0.829037572555042, 0.838670567945424, 0.848048096156426, 0.857167300702112, 
		0.866025403784439, 0.874619707139396, 0.882947592858927, 0.891006524188368, 0.898794046299167, 0.90630778703665, 0.913545457642601, 0.92050485345244, 0.927183854566787, 0.933580426497202, 
		0.939692620785908, 0.945518575599317, 0.951056516295154, 0.956304755963035, 0.961261695938319, 0.965925826289068, 0.970295726275996, 0.974370064785235, 0.978147600733806, 0.981627183447664, 
		0.984807753012208, 0.987688340595138, 0.99026806874157, 0.992546151641322, 0.994521895368273, 0.996194698091746, 0.997564050259824, 0.998629534754574, 0.999390827019096, 0.999847695156391, 
		1, 0.999847695156391, 0.999390827019096, 0.998629534754574, 0.997564050259824, 0.996194698091746, 0.994521895368273, 0.992546151641322, 0.99026806874157, 0.987688340595138, 
		0.984807753012208, 0.981627183447664, 0.978147600733806, 0.974370064785235, 0.970295726275996, 0.965925826289068, 0.961261695938319, 0.956304755963036, 0.951056516295154, 0.945518575599317, 
		0.939692620785908, 0.933580426497202, 0.927183854566787, 0.92050485345244, 0.913545457642601, 0.90630778703665, 0.898794046299167, 0.891006524188368, 0.882947592858927, 0.874619707139396, 
		0.866025403784439, 0.857167300702112, 0.848048096156426, 0.838670567945424, 0.829037572555042, 0.819152044288992, 0.809016994374947, 0.798635510047293, 0.788010753606722, 0.777145961456971, 
		0.766044443118978, 0.754709580222772, 0.743144825477394, 0.731353701619171, 0.719339800338651, 0.707106781186548, 0.694658370458997, 0.681998360062499, 0.669130606358858, 0.656059028990507, 
		0.642787609686539, 0.629320391049838, 0.615661475325658, 0.601815023152048, 0.587785252292473, 0.573576436351046, 0.559192903470747, 0.544639035015027, 0.529919264233205, 0.515038074910054, 
		0.5, 0.484809620246337, 0.469471562785891, 0.453990499739547, 0.438371146789077, 0.4226182617407, 0.4067366430758, 0.390731128489274, 0.374606593415912, 0.3583679495453, 
		0.342020143325669, 0.325568154457157, 0.309016994374948, 0.292371704722737, 0.275637355817, 0.258819045102521, 0.241921895599668, 0.224951054343865, 0.207911690817759, 0.190808995376545, 
		0.17364817766693, 0.156434465040231, 0.139173100960066, 0.121869343405148, 0.104528463267654, 0.0871557427476586, 0.0697564737441255, 0.0523359562429438, 0.0348994967025007, 0.0174524064372834, 
		1.22460635382238E-16, -0.0174524064372832, -0.0348994967025009, -0.0523359562429436, -0.0697564737441248, -0.0871557427476579, -0.104528463267653, -0.121869343405148, -0.139173100960066, -0.156434465040231, 
		-0.17364817766693, -0.190808995376545, -0.207911690817759, -0.224951054343865, -0.241921895599668, -0.25881904510252, -0.275637355816999, -0.292371704722736, -0.309016994374948, -0.325568154457157, 
		-0.342020143325669, -0.3583679495453, -0.374606593415912, -0.390731128489274, -0.4067366430758, -0.422618261740699, -0.438371146789077, -0.453990499739546, -0.469471562785891, -0.484809620246337, 
		-0.5, -0.515038074910054, -0.529919264233205, -0.544639035015027, -0.559192903470747, -0.573576436351046, -0.587785252292473, -0.601815023152048, -0.615661475325658, -0.629320391049838, 
		-0.642787609686539, -0.656059028990507, -0.669130606358858, -0.681998360062498, -0.694658370458997, -0.707106781186547, -0.719339800338651, -0.73135370161917, -0.743144825477394, -0.754709580222772, 
		-0.766044443118978, -0.777145961456971, -0.788010753606722, -0.798635510047293, -0.809016994374947, -0.819152044288992, -0.829037572555041, -0.838670567945424, -0.848048096156426, -0.857167300702112, 
		-0.866025403784438, -0.874619707139396, -0.882947592858927, -0.891006524188368, -0.898794046299167, -0.90630778703665, -0.913545457642601, -0.92050485345244, -0.927183854566787, -0.933580426497202, 
		-0.939692620785908, -0.945518575599317, -0.951056516295154, -0.956304755963035, -0.961261695938319, -0.965925826289068, -0.970295726275996, -0.974370064785235, -0.978147600733806, -0.981627183447664, 
		-0.984807753012208, -0.987688340595138, -0.99026806874157, -0.992546151641322, -0.994521895368273, -0.996194698091746, -0.997564050259824, -0.998629534754574, -0.999390827019096, -0.999847695156391, 
		-1, -0.999847695156391, -0.999390827019096, -0.998629534754574, -0.997564050259824, -0.996194698091746, -0.994521895368273, -0.992546151641322, -0.99026806874157, -0.987688340595138, 
		-0.984807753012208, -0.981627183447664, -0.978147600733806, -0.974370064785235, -0.970295726275997, -0.965925826289068, -0.961261695938319, -0.956304755963035, -0.951056516295154, -0.945518575599317, 
		-0.939692620785909, -0.933580426497202, -0.927183854566787, -0.92050485345244, -0.913545457642601, -0.90630778703665, -0.898794046299167, -0.891006524188368, -0.882947592858927, -0.874619707139396, 
		-0.866025403784439, -0.857167300702112, -0.848048096156426, -0.838670567945424, -0.829037572555042, -0.819152044288992, -0.809016994374948, -0.798635510047293, -0.788010753606722, -0.777145961456971, 
		-0.766044443118978, -0.754709580222772, -0.743144825477395, -0.731353701619171, -0.719339800338652, -0.707106781186548, -0.694658370458998, -0.681998360062498, -0.669130606358858, -0.656059028990507, 
		-0.64278760968654, -0.629320391049838, -0.615661475325659, -0.601815023152048, -0.587785252292473, -0.573576436351046, -0.559192903470747, -0.544639035015027, -0.529919264233206, -0.515038074910054, 
		-0.5, -0.484809620246337, -0.469471562785891, -0.453990499739547, -0.438371146789077, -0.4226182617407, -0.4067366430758, -0.390731128489275, -0.374606593415912, -0.358367949545301, 
		-0.342020143325669, -0.325568154457158, -0.309016994374948, -0.292371704722736, -0.275637355817, -0.258819045102521, -0.241921895599668, -0.224951054343865, -0.20791169081776, -0.190808995376545, 
		-0.173648177666931, -0.156434465040231, -0.139173100960066, -0.121869343405148, -0.104528463267653, -0.0871557427476583, -0.0697564737441248, -0.0523359562429444, -0.0348994967025008, -0.0174524064372844};
