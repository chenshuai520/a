[-] General.
	- Site.
		http://www.boost.org/

		http://sourceforge.net/adobe/genimglib/
		http://mathema.tician.de/software/boost-bindings

		Boost Dependency Analyzer:
		http://www.meetingcpp.com/index.php/br/items/boost-dependency-analyzer.html

[-] Building (VC).
	- Run Visual Studio command prompt.
		For Win32:
		For Win64:

	- Build Boost.Build engine.
        run ${BOOST_HOME}/bootstrap.bat

	- Configure Boost.Build engine.
		Add the content below to ${BOOST_HOME}/project-config.jam
			REF [site] >> http://www.boost.org/build/doc/html/index.html
			REF [site] >> http://www.boost.org/build/doc/html/bbv2/reference/tools.html

		For Win32:
			using msvc : 14.0 : "C:/Program Files (x86)/Microsoft Visual Studio 14/VC/bin/cl" ;
			using zlib : 1.2.8 : "D:/usr/local/include" "D:/usr/local/lib" ;
		For Win64:
			using msvc : 14.0 : "C:/Program Files (x86)/Microsoft Visual Studio 14/VC/bin/amd64/cl" ;
			using zlib : 1.2.8 : "D:/usr/local64/include" "D:/usr/local64/lib" ;
		using python : 3.5 : "D:/MyProgramFiles/Python35" : "D:/MyProgramFiles/Python35/include" : "D:/MyProgramFiles/Python35/libs" ;
		using mpi ;

	- Build Boost library.
		Option:
			b2 stage|install|clean release debug toolset=msvc-14.0 address-model=32|64 variant=debug|release link=static|shared threading=single|multi runtime-link=single|shared optimization=off|full|space|speed --build-type=complete
		Example:
			b2 stage toolset=msvc link=static,shared --without-thread --without-regex --without-python
			b2 stage --stagedir=stage64 toolset=msvc address-model=64 link=static,shared --without-python --without-mpi
			b2 stage -sICU_PATH=${ICU_ROOT} -sZLIB_SOURCE=${ZLIB_ROOT} toolset=msvc link=static,shared

		For Win32:
			b2 stage -j4 toolset=msvc variant=release,debug link=static,shared threading=multi --build-type=complete --without-mpi -sICU_PATH="D:/lib_repo/cpp/ext/icu4c-57_1-src/icu" -sICU_LINK="-LD:/usr/local/lib" -sZLIB_SOURCE="D:/lib_repo/cpp/ext/zlib-1.2.8"
		For Win64:
			b2 stage -j4 --stagedir=stage64 toolset=msvc address-model=64 variant=release,debug link=static,shared threading=multi --build-type=complete --without-mpi -sICU_PATH="D:/lib_repo/cpp/ext/icu4c-57_1-src/icu" -sICU_LINK="-LD:/usr/local64/lib" -sZLIB_SOURCE="D:/lib_repo/cpp/ext/zlib-1.2.8"

		For Win32:
			b2 install --prefix=/usr/local
		For Win64:
			b2 install --prefix=/usr/local64

        b2 clean release debug

	- Use MS-MPI.
		Modify ${BOOST_HOME}/project-config.jam.
			using mpi ;
		Modify ${BOOST_HOME}/tools/build/src/tools/mpi.jam.
			REF [site] >> http://stackoverflow.com/questions/9433311/error-in-building-boost-mpi-in-msvc-2010
			REF [site] >> http://stackoverflow.com/questions/26147564/how-to-build-boost-mpi-for-ms-mpi-with-visual-studio-2012

			In line 246:
			  if ! $(mpicxx) && [ os.on-windows ]
			  {  
			    # Try to auto-configure to the Microsoft Compute Cluster Pack
			    #local cluster_pack_path_native = "C:\\Program Files\\Microsoft Compute Cluster Pack" ;
			    #local cluster_pack_path = [ path.make $(cluster_pack_path_native) ] ;
				local ms_mpi_sdk_path = "C:\\Program Files (x86)\\Microsoft SDKs\\MPI" ;
				local ms_mpi_path = "C:\\Program Files\\Microsoft MPI" ;
			    #if [ GLOB $(cluster_pack_path_native)\\Include : mpi.h ]
			    if [ GLOB $(ms_mpi_sdk_path)\\Include : mpi.h ]
			    {
			      if $(.debug-configuration)
			      {
			        #ECHO "Found Microsoft Compute Cluster Pack: $(cluster_pack_path_native)" ;
			        ECHO "Found Microsoft Compute Cluster Pack: $(ms_mpi_sdk_path)" ;
			      }
			      
			      # Pick up either the 32-bit or 64-bit library, depending on which address
			      # model the user has selected. Default to 32-bit.
			      #options = <include>$(cluster_pack_path)/Include 
			      #          <address-model>64:<library-path>$(cluster_pack_path)/Lib/amd64
			      #          <library-path>$(cluster_pack_path)/Lib/i386
			      options = <include>$(ms_mpi_sdk_path)/Include 
			                <address-model>64:<library-path>$(ms_mpi_sdk_path)/Lib/x64
			                <library-path>$(ms_mpi_sdk_path)/Lib/x86
			                <find-static-library>msmpi
			                <toolset>msvc:<define>_SECURE_SCL=0
			              ;
			              
			      # Setup the "mpirun" equivalent (mpiexec)
			      #.mpirun = "\"$(cluster_pack_path_native)\\Bin\\mpiexec.exe"\" ;
			      .mpirun = "\"$(ms_mpi_path)\\Bin\\mpiexec.exe"\" ;
			      .mpirun_flags = -n ;
			    }
			    else if $(.debug-configuration)
			    {
			      ECHO "Did not find Microsoft Compute Cluster Pack in $(cluster_pack_path_native)." ;
			    }
			  }
		Build.
			e.g.) b2 --with-mpi

--------------------------------------------------------------------------------

[-] 다른 library에서 Boost library를 사용할 때 (CMake).
	- Boost library를 찾지 못하는 오류.
		<error>
			Could not find the following Boost libraries:
				boost_thread
		          boost_chrono
		          boost_system
		          boost_date_time
			No Boost libraries were found. You may need to set BOOST_LIBRARYDIR to the directory containing Boost libraries or BOOST_ROOT to the location of Boost.
		<cause>
			Boost library directory를 찾지 못함.
			최신 version의 Boost library 사용.
			==> 정확한 원인은 아직 모름 (2016/05/03).
		<solution>
			Boost library directory를 올바르게 지정.
				Set Boost_DIR to ${BOOST_HOME}.
				Set BOOST_ROOT to ${BOOST_HOME}.
				Set BOOST_LIBRARYDIR to ${BOOST_HOME}/stage/lib.
			Boost library 설정을 올바르게 지정.
				Set Boost_USE_MULTITHREADED to on/off.
				Set Boost_USE_STATIC_LIBS to on/off.
				Set Boost_ADDITIONAL_VERSIONS to 1.61.0.
				Set Boost_DEBUG to true/false.

<< Building & Installation >>

[-] Boost site로 부터 file download.
	- Related files.
		boost package
		boost-jam file
[-] MSVC 환경변수 설정.
	- Visual Studio 6.0.
		>> Run ${VC6_ROOT}/Vc98/bin/vcvars32.bat.
		>> Command.
			vcvars32.bat > nul
	- Visual Studio .NET 2003.
		>> Run ${VC71_ROOT}/Vc7/bin/vcvars32.bat.
		>> Command.
			vcvars32.bat > nul

[-] Building boost tool executables.
	- bjam.
		Using bootstrap script.
			${BOOST_ROOT}/bootstrap.bat
			${BOOST_ROOT}/bootstrap.sh
			==> building에 의해 생성된 file.
				${BOOST_ROOT}/b2.exe or bjam.exe
				${BOOST_ROOT}/b2 or bjam
		bjam을 개별적으로 building.
			bjam executable을 생성하기 위해 아래의 script file을 실행.
				${BOOST_ROOT}/tools/build/v2/engine/build.bat
				${BOOST_ROOT}/tools/build/v2/engine/build.sh
				or
				${BOOST_ROOT}/tools/build/src/engine/build.bat
				${BOOST_ROOT}/tools/build/src/engine/build.sh
	- bcp.
		Build command.
			${BOOST_ROOT}/bjam tools/bcp
		${BOOST_ROOT}/dist/bin 하에 생성.

[-] When linking with STLport.
	- Set eenvironmental variables.
		STLPORT_PATH
		STLPORT_VERSION
		e.g.) when linking with STL port in "${STLPORT_HOME}/STLport-4.6.2"
			set STLPORT_PATH="${STLPORT_HOME}"
			set STLPORT_VERSION=4.6.2
	- Build된 STLport 관련 lib/dll file들이 특정 directory에 존재해야 함.
		"${STLPORT_PATH}/STLport-4.6.2/lib" directory
	- STLport debug mode가 정의되어 있어야 함.
		#define _STLP_DEBUG 1

[-] Setting compiler specific configuration policy.
	- ${BOOST_ROOT}/boost/config/user.hpp

[-] Building Boost.
	- Use bjam.
		bootstrap script의 실행 결과로 생성.
		모든 library를 building는 경우.
			${BOOST_ROOT}/b2.exe or bjam.exe
			${BOOST_ROOT}/b2 or bjam
		특정 library만을 building하고자 한다면 해당 option을 추가.
			e.g.) boost::date_time library만을 building하는 경우.
				bjam --with-date_time "-sBUILD=debug" install
		==> 기본 설정을 사용한다면.
			Windows(VC) 환경에서는 static library만 생성.
				shared library 생성.
					bjam link=shared
			Unix-like(GCC) 환경에서 release version만 생성.
				debug version 생성.
					bjam variant=debug
		==> 생성된 library directory.
				${BOOST_ROOT}/stage/lib
			Unix-like(GCC) 환경에서는 release & debug version이 동일한 file 이름을 가지며 동일 directory에 생성되므로 겹쳐쓰여지지 않도록 주의를 기울여야 함.
	- Run my batch file.
		e.g.)
			boost_1_50_0_vc_build.bat clean > error.log
			boost_1_50_0_vc_build.bat stage > error.log
			boost_1_50_0_vc_build.bat install > error.log

[-] Installation.
	- Use bjam.
		bjam install --prefix=${BOOST_PREFIX_DIR}
		==> Installation directory.
			Include files:
				"${BOOST_PREFIX_DIR}/include"
			Library files:
				"${BOOST_PREFIX_DIR}/lib"

<< Trouble Shooting >>

[-] Configure boost library.
	- Boost library에는 user configuration을 위한 file을 제공.
		${BOOST_HEADER_ROOT}/config/user.hpp
[-] Library linking시 error가 발생할 때.
	- Boost building시에 outpur message를 file로 redirection해 "failed"된 원인을 제거.
		e.g.)
			1. boost_build > error.log
			2. error.log file에서 "failed"를 검색
[-] Building시 boost library source와 같이 배포되는 jam file을 이용해야 함.
[-] Ver. 1.32.0에서 boost::date_time library를 MSVC6/STLport를 이용하여 building할 때.
	- 알 수 없는 error 발생시.
		>< "boost/date_time/date_formatting.hpp"을 아래와 같이 수정.
			[ref] http://lists.boost.org/MailArchives/boost/msg76452.php
		<before>
			public:
				// Workaround for ICE in MSVC 6 when building with STLport IOstreams
				//! Formats a month as as string into an ostream
				/*! This function demands that month_type provide
				 *  functions for converting to short and long strings
				 *  if that capability is used.
				 */
				static std::basic_ostream<charT>& format_month(const month_type& month,
				                                  std::basic_ostream<charT>& os)
		<after>
			public:
				// Workaround for ICE in MSVC 6 when building with STLport IOstreams
			#if defined(BOOST_MSVC) && BOOST_MSVC <= 1200 && \
			    (defined(__SGI_STL_PORT) || defined(_STLPORT_VERSION)) && \
			    !defined(_STLP_NO_OWN_IOSTREAMS)
			private:
				typedef std::basic_ostream<charT> _ostream_type;
			public:
				static _ostream_type &format_month(const month_type& month, _ostream_type &os)
			#else
			public:
				//! Formats a month as as string into an ostream
				/*! This function demands that month_type provide
				 *  functions for converting to short and long strings
				 *  if that capability is used.
				 */
				static std::basic_ostream<charT>& format_month(const month_type& month,
				                                  std::basic_ostream<charT>& os)
			#endif
	- _i64toa 관련 error 발생시.
		>< "boost/date_time/posix_time/date_formatters.hpp"을 아래와 같이 수정.
			[ref] http://lists.boost.org/MailArchives/boost/msg76453.php
		>< 두 곳을 수정해야 함.
		<before>
			template<class charT>
			inline std::basic_string<charT> to_simple_string_type(time_duration td) {
				//...
			    charT buff[32];
			    _i64toa(frac_sec, buff, 10);
			    //...
			}
		<after>
			#if (defined(BOOST_MSVC) && (_MSC_VER <= 1200))  // 1200 == VC++ 6.0
			namespace detail {
				template <typename charT> struct convert_int64;
				template <> struct convert_int64<char> {
					static char *convert (char *buff, boost::int64_t i)
					{ return _i64toa(i, buff, 10); }
				};
				template <> struct convert_int64<wchar_t> {
					static wchar_t *convert (wchar_t *buff, boost::int64_t i)
					{ return _i64tow(i, buff, 10); }
				};
			}
			#endif

			template<class charT>
			inline std::basic_string<charT> to_simple_string_type(time_duration td) {
				//...
			    charT buff[32];
			    detail::convert_int64<charT>::convert(buff, frac_sec);
			    //...
			}

[-] Ver. 1.32.0을 MSVC7.1/STLport를 이용하여 building할 때.
	- boost::lexical_cast 관련 error 발생한다면.
		>< build option 추가.
			<native-wchar_t>on
			e.g.) "-sBUILD=release <native-wchar_t>on"

[-] Microsoft VC++ Compiler를 위한 project file(.dsw, *.sln)이 존재하는 library.
	- Serialization library.
		>< directory where project files exist.
			${BOOST_ROOT}/libs/serialization/vc6ide
			${BOOST_ROOT}/libs/serialization/vc7ide
			${BOOST_ROOT}/libs/serialization/borland6ide
		>< Visual Studio .NET(_MSC_VER >= 1300)에서만 정상적으로 building.
	- Python library.
		>< directory where project files exist
			${BOOST_ROOT}/libs/python/build
	- Test library.
		>< directory where project files exist
			${BOOST_ROOT}/libs/test/build

[-] Ver. 1.33.0 & MSVC7.1/STLport5.0RC5를 이용하여 building할 때.
	<-> Library linking error.
		- Error message.
			LINK : fatal error LNK1181: cannot open input file 'stlport_vc71.lib'
			LINK : fatal error LNK1181: cannot open input file 'stlport_vc71_stldebug.lib'
		- Build 관련 파일 수정.
			-> STLport library base name 수정.
				>> In ${BOOST_ROOT}/tools/build/v1/vc-7_1-stlport-tools.jam.
					<before> STLPORT_LIB_BASE_NAME = stlport_vc71;
					<after> STLPORT_LIB_BASE_NAME = stlport;		
			-> STLport library debug suffix 수정.
				>> In ${BOOST_ROOT}/tools/build/v1/stlport.jam
					<before>
						STLPORT_LIB_DEBUG_SUFFIX ?= _stldebug;
					<after>
						STLPORT_LIB_DEBUG_SUFFIX ?= _stld50;
						STLPORT_LIB_RELEASE_SUFFIX ?= _r50;

					<before>
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>static    : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_DEBUG_SUFFIX)$(STLPORT_LIB_STATIC_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>dynamic   : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_DEBUG_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>static  : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_STATIC_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>dynamic : $(STLPORT_LIB_BASE_NAME) ;
					<after>
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>static    : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_STATIC_SUFFIX)$(STLPORT_LIB_DEBUG_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>dynamic   : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_DEBUG_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>static  : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_STATIC_SUFFIX)$(STLPORT_LIB_RELEASE_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>dynamic : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_RELEASE_SUFFIX) ;
				>> In ${BOOST_ROOT}/tools/build/v2/tools/stlport.jam.
					<before>
						if $(debug) = "on"
			            {
			            	name = $(name)_stldebug;
			            }
			        <after>
			            if $(debug) = "on"
			            {
			                name = $(name)_stld50 ;
			            }
			            else {
			                name = $(name)_r50 ;
			            }

[-] Ver. 1.33.0 & MSVC7.1/STLport5.0RC6를 이용하여 building할 때.
	<-> STLport library linking error.
		- Error message.
			LINK : fatal error LNK1181: cannot open input file 'stlport_vc71.lib'
			LINK : fatal error LNK1181: cannot open input file 'stlport_vc71_stldebug.lib'
		- Build 관련 파일 수정.
			-> STLport library base name 수정.
				>> In ${BOOST_ROOT}/tools/build/v1/vc-7_1-stlport-tools.jam.
					<before> STLPORT_LIB_BASE_NAME = stlport_vc71 ;
					<after> STLPORT_LIB_BASE_NAME = stlport ;		
			-> STLport library debug suffix 수정.
				>> In ${BOOST_ROOT}/tools/build/v1/stlport.jam.
					<before>
						STLPORT_LIB_DEBUG_SUFFIX ?= _stldebug ;
					<after>
						STLPORT_LIB_DEBUG_SUFFIX ?= stld.5.0.0 ;
						STLPORT_LIB_RELEASE_SUFFIX ?= .5.0.0 ;

					<before>
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>static    : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_DEBUG_SUFFIX)$(STLPORT_LIB_STATIC_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>dynamic   : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_DEBUG_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>static  : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_STATIC_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>dynamic : $(STLPORT_LIB_BASE_NAME) ;
					<after>
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>static    : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_STATIC_SUFFIX)$(STLPORT_LIB_DEBUG_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>debug/<runtime-link>dynamic   : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_DEBUG_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>static  : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_STATIC_SUFFIX)$(STLPORT_LIB_RELEASE_SUFFIX) ;
						flags $(CURR_TOOLSET) FINDLIBS <stlport-iostream>on/<runtime-build>release/<runtime-link>dynamic : $(STLPORT_LIB_BASE_NAME)$(STLPORT_LIB_RELEASE_SUFFIX) ;
				>> In ${BOOST_ROOT}/tools/build/v2/tools/stlport.jam.
					<before>
						if $(debug) = "on"
			            {
			            	name = $(name)_stldebug ;
			            }
			        <after>
			            if $(debug) = "on"
			            {
			                name = $(name)stld.5.0.0 ;
			            }
			            else {
			                name = $(name).5.0.0 ;
			            }
	<-> Thread library compiling error.
		-. Error message.
			error C3861: '_snprintf': identifier not found, even with argument-dependent lookup
		- Target file.
			-> ${BOOST_ROOT}/libs/thread/src/read_write_mutex.cpp
				<before>
					bool boost_error(char const* expr, char const* func, char const* file, long line)
					{
					    #if WINVER
					        using namespace std;

					        #ifndef ELEMENTS
					        #define ELEMENTS(a) (sizeof(a)/sizeof(*(a)))
					        #endif

					        TCHAR message[200];
					        _sntprintf(message,ELEMENTS(message),TEXT("Assertion failed (func=%s, file=%s, line=%d): %s"), func, file, line, expr);

					        ::OutputDebugString(message);

					        if(::IsDebuggerPresent())
					            ::DebugBreak();
					    #endif

					    return false;
					}
				<after>
					/*
					bool boost_error(char const* expr, char const* func, char const* file, long line)
					{
					    #if WINVER
					        using namespace std;

					        #ifndef ELEMENTS
					        #define ELEMENTS(a) (sizeof(a)/sizeof(*(a)))
					        #endif

					        TCHAR message[200];
					        _sntprintf(message,ELEMENTS(message),TEXT("Assertion failed (func=%s, file=%s, line=%d): %s"), func, file, line, expr);

					        ::OutputDebugString(message);

					        if(::IsDebuggerPresent())
					            ::DebugBreak();
					    #endif

					    return false;
					}
					*/
	<-> Regex library linking error.
		- Error situation.
			basic_string linking error
		- Target file.
			-> ${BOOST_ROOT}/boost/regex/config.hpp
				<before>
					#  define BOOST_REGEX_HAS_OTHER_WCHAR_T
				<after>
					//#  define BOOST_REGEX_HAS_OTHER_WCHAR_T
