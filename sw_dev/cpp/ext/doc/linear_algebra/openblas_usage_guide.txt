[-] General.
	- Site.
		http://xianyi.github.io/OpenBLAS/
		https://github.com/xianyi/OpenBLAS

	- Reference.
		${GDT_HOME}/sw_dev/cpp/ext/src/linear_algebra/linear_algebra_library_usage_guide.txt

[-] Building.
	REF [site] >> https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio

	- Required compiler.
		Fortran compiler if Lapack is included.

	- System info.
		REF [file] >> ${OPENBLAS_HOME}/Makefile & ${OPENBLAS_HOME}/Makefile.system
			OSNAME
				WINNT, CYGWIN_NT.
			ARCH
				x86, x86_64.
		For 32-bit:
			OSNAME = WINNT
			ARCH = x86
		For 32-bit:
			OSNAME = WINNT
			ARCH = x86_64.

[-] Building GitHub (MSYS2).
	REF [site] >> https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio
	REF [file] >> mingw_usage_guide.txt

	- Run MSYS2 MinGW 32-bit or 64-bit terminal.
	- Change directory.
		cd ${OPENBLAS_HOME}.
	- Edit make files.
		In ${OPENBLAS_HOME}/quickbuild.win32 & ${OPENBLAS_HOME}/quickbuild.win64
		<before>
			make BINARY=64 CC=gcc FC=gfortran
			make BINARY=32 CC=gcc FC=gfortran
		<after>
			mingw32-make BINARY=64 CC=gcc FC=gfortran
			mingw32-make BINARY=32 CC=gcc FC=gfortran
	- Run make.
		==> Change make.exe to mingw32-make.exe.
		./quickbuild.win32
		./quickbuild.win64
	- Install.
		make PREFIX=${INSTALL_PREFIX} install
	- Run Visual Studio command prompt.
	- Generate def file.
		Use dumpbin.exe.
			dumpbin.exe /exports libopenblas.dll > libopenblas.def
		REF [doc] >> interoperate_libraries_in_MSVC_MinGW_Cygwin.txt
	- Edit the def file.
		LIBRARY libopenblas.dll
		EXPORTS
	- Generate import library.
		For 32-bit:
			lib.exe /machine:x86 /def:libopenblas.def
		For 64-bit:
			lib.exe /machine:X64 /def:libopenblas.def
		==> ${OPENBLAS_HOME}/exports directory에 OpenBLAS에서 생성한 def file & import file이 존재.
			이들을 Windows 환경에서 사용할 수 있는지 검증 필요.
		REF [doc] >> interoperate_libraries_in_MSVC_MinGW_Cygwin.txt

[-] Building GitHub (MSYS).
	REF [site] >> https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio
	REF [file] >> mingw_usage_guide.txt

	- Problem.
		Win64 shared library is not built.
			This error seems to be related with Win32 object files.
			There is -m32 in the compile options.

	- Run MSYS terminal.
	- (Optional) set the GNU runtime directory in PATH.
		export PATH=${MINGW_HOME}/bin:$PATH
	- Change directory.
		cd ${OPENBLAS_HOME}.
	- Run make.
		./quickbuild.win32
		./quickbuild.win64
	- Install.
		make PREFIX=${INSTALL_PREFIX} install
	- Run Visual Studio command prompt.
	- Generate def file.
		Use dumpbin.exe.
			dumpbin.exe /exports libopenblas.dll > libopenblas.def
		REF [doc] >> interoperate_libraries_in_MSVC_MinGW_Cygwin.txt
	- Edit the def file.
		LIBRARY libopenblas.dll
		EXPORTS
	- Generate import library.
		For 32-bit:
			lib.exe /machine:x86 /def:libopenblas.def
		For 64-bit:
			lib.exe /machine:X64 /def:libopenblas.def
		==> ${OPENBLAS_HOME}/exports directory에 OpenBLAS에서 생성한 def file & import file이 존재.
			이들을 Windows 환경에서 사용할 수 있는지 검증 필요.
		REF [doc] >> interoperate_libraries_in_MSVC_MinGW_Cygwin.txt

[-] Building (Cgywin).
	REF [site] >> https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio

	- Problem.
		Dependency upon Cygwin shared libraries.

	- Run Cygwin terminal.
		For 32-bit, use Cygwin32.
		For 64-bit, use Cygwin64.
	- Change directory.
		cd ${OPENBLAS_HOME}
	- Run quick build script.
		./quickbuild.win32
		./quickbuild.win64
		==> quickbuild.win32 & quickbuild.win64 have to be UNIX file format.
			When running scripts, An error about '\r' occurs.
	- Install.
		make PREFIX=${INSTALL_PREFIX} install
	- Run Visual Studio command prompt.
	- Generate def file.
		Use dumpbin.exe.
			dumpbin.exe /exports libopenblas.dll > libopenblas.def
		REF [doc] >> interoperate_libraries_in_MSVC_MinGW_Cygwin.txt
	- Edit the def file.
		LIBRARY libopenblas.dll
		EXPORTS
	- Generate import library.
		For 32-bit:
			lib.exe /machine:x86 /def:libopenblas.def
		For 64-bit:
			lib.exe /machine:X64 /def:libopenblas.def
		REF [doc] >> interoperate_libraries_in_MSVC_MinGW_Cygwin.txt
		==> ${OPENBLAS_HOME}/exports directory에 OpenBLAS에서 생성한 def file & import file이 존재.
			Windows 환경에서 사용 가능 여부 확인 필요.

[-] Building GitHub (Win32/MSYS + CMake).
	REF [site] >> https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio
	REF [file] >> mingw_usage_guide.txt

	- Problem.
		Make errors occurred.

	- Run MSYS terminal.
	- (Optional) set the GNU runtime directory in PATH.
		export PATH=${MINGW_HOME}/bin:$PATH
	- Run cmake-gui in MSYS terminal.
	- Specify 'MSYS Makefiles' as the generator.
	- Configure and generate.
		Set CMAKE_DEBUG_POSTFIX to d.
	- Change directory.
		cd cmake-build-directory.
	- Run make.
		mingw32-make
		mingw32-make BINARY=32 CC=gcc FC=gfortran USE_OPENMP=1 NO_LAPACK=1 NO_CBLAS=1
		mingw32-make PREFIX=${INSTALL_PREFIX} install

[-] Building (Win32/MinGW + CMake).
	REF [site] >> https://github.com/xianyi/OpenBLAS/wiki/How-to-use-OpenBLAS-in-Microsoft-Visual-Studio
	REF [file] >> mingw_usage_guide.txt

	- Problem.
		Make errors occurred.

	- Run command prompt.
		a) When using MinGW terminal.
			Run MinGW terminal.
				For 64-bit:
					Run ${MINGW_HOME}/mingw-w64.bat.
			Set the GNU runtime directory in PATH.
				set path=${MINGW_HOME}/bin;${MSYS_ROOT}/bin;%path%
				set path=${MINGW_HOME}/bin;${CYGWIN_HOME}/bin;%path%
				set path=${MINGW_HOME}/bin;${GNUWIN32_HOME}/bin;%path%
		b) When using (Visual Studio) command prompt.
			Run (Visual Studio) command prompt.
		    Set the GNU runtime directory in PATH.
				set path=${MINGW_HOME}/bin;${MSYS_ROOT}/bin;%path%
				set path=${MINGW_HOME}/bin;${CYGWIN_HOME}/bin;%path%
				set path=${MINGW_HOME}/bin;${GNUWIN32_HOME}/bin;%path%
	- Run cmake-gui in terminal.
	- Specify 'MinGW Makefiles' as the generator.
	- Configure and generate.
		Set CMAKE_SH to ${MSYS_ROOT}/bin/sh.exe.
		Set CMAKE_Fortran_COMPILER to ${MINGW_HOME}/bin/gfortran.exe.
		Set CMAKE_GNUtoMS to ON.
			<warning> Disabling CMAKE_GNUtoMS option because CMAKE_GNUtoMS_VCVARS is not set
			==> Set the 'CMAKE_GNUtoMS_VCVARS' option to 'C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/vcvars32.bat'.
		Set BUILD_SHARED_LIBS to ON.
			이 option을 지정하지 않으면 .a library file 생성.
		Set CMAKE_DEBUG_POSTFIX to d.

		Fortran files을 찾을 수 없다는 error 발생.
			<error> Cannot find source file.
				sgegs.f, sgegv.f, etc.
			==> 해당 files이 deprecated 되어 발생.
				${OPENBLAS_HOME}/lapack-netlib/SRC -> ${OPENBLAS_HOME}/lapack-netlib/SRC/DEPRECATED.
			==> ${OPENBLAS_HOME}/cmake/lapack.cmake 수정.
				${OPENBLAS_HOME}/lapack-netlib/SRC directory의 file list로 아래의 변수들 설정.
					SLASRC
						cd ${OPENBLAS_HOME}/lapack-netlib/SRC
						dir s*.f > list.txt + ilaslr.f ilaslc.f
						copy file list to set(SLRSRC ...)
					CLASRC
						cd ${OPENBLAS_HOME}/lapack-netlib/SRC
						dir c*.f > list.txt + ilaclr.f ilaclc.f
						copy file list to set(SLRSRC ...)
					DLASRC
						cd ${OPENBLAS_HOME}/lapack-netlib/SRC
						dir d*.f > list.txt + iladlr.f iladlc.f
						copy file list to set(SLRSRC ...)
					ZLASRC
						cd ${OPENBLAS_HOME}/lapack-netlib/SRC
						dir z*.f > list.txt + ilazlr.f ilazlc.f
						copy file list to set(SLRSRC ...)
	- Change directory.
		cd cmake-build-directory.
	- Run make.
		mingw32-make
		mingw32-make PREFIX=${INSTALL_PREFIX} install

[-] Building GitHub (VC): 2016/05/05.
	- Problem.
	    Support x86 only.
			<warning>
				CMake support is experimental.
				x86 support only.
					Only x86 support is currently available.
			==> Support x64 in MinGW and Cygwin.
			==> But can build normally in Win64.

	- Configure and generate.
		Set CMAKE_DEBUG_POSTFIX to d.
	- Open solution file.
	- Build.
	- Install.
		Does not correctly generate install project.
		==> Have copy header files properly.
